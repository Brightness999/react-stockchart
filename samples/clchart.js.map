{"version":3,"sources":["webpack://ClChart/webpack/universalModuleDefinition","webpack://ClChart/webpack/bootstrap","webpack://ClChart/./src/util/cl.tool.js","webpack://ClChart/./src/data/cl.data.tools.js","webpack://ClChart/./src/cl.data.def.js","webpack://ClChart/./src/formula/cl.formula.js","webpack://ClChart/./src/util/cl.draw.js","webpack://ClChart/./src/chart/cl.chart.tools.js","webpack://ClChart/./src/chart/cl.chart.init.js","webpack://ClChart/./src/chart/cl.draw.kbar.js","webpack://ClChart/./src/chart/cl.draw.line.js","webpack://ClChart/./src/chart/cl.draw.right.js","webpack://ClChart/./src/chart/cl.draw.vline.js","webpack://ClChart/./src/cl.chart.def.js","webpack://ClChart/./src/chart/cl.draw.vbar.js","webpack://ClChart/./src/chart/cl.chart.button.js","webpack://ClChart/./src/chart/cl.chart.scroll.js","webpack://ClChart/./src/chart/cl.draw.axisX.js","webpack://ClChart/./src/chart/cl.draw.axisY.js","webpack://ClChart/./src/chart/cl.draw.cursor.js","webpack://ClChart/./src/chart/cl.draw.grid.js","webpack://ClChart/./src/chart/cl.draw.info.js","webpack://ClChart/./src/chart/cl.chart.line.js","webpack://ClChart/./src/chart/cl.chart.order.js","webpack://ClChart/./src/chart/cl.chart.js","webpack://ClChart/./src/event/cl.event.handler.js","webpack://ClChart/./src/event/cl.event.js","webpack://ClChart/./src/data/cl.data.js","webpack://ClChart/./src/plugins/cl.seer.js","webpack://ClChart/./src/plugins/cl.register.js","webpack://ClChart/./src/plugins/cl.seer.def.js","webpack://ClChart/./src/cl.api.js","webpack://ClChart/./src/util/cl.ev.js"],"names":["root","factory","exports","module","define","amd","ClChart","window","t","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","prototype","hasOwnProperty","p","s","e","addPreZero","v","slice","getMTime","ttime","mtime","seconds","Date","parseInt","isNaN","getDate","getFullYear","getMonth","getMinute","getHours","getMinutes","getDayWeek","day","Math","floor","getDay","getDayMon","_dayToTTime","getDayGap","beginDay","endDay","fromTTimeToStr","format","ttimePre","getSeconds","getMinuteGap","beginMin","endMin","getMinuteOffset","minute","offset","mincount","copyArrayOfDeep","obj","out","Array","isArray","len","length","copyJsonOfDeep","key","updateJsonOfDeep","source","isEmptyArray","offsetRect","rect","left","top","width","height","right","bottom","inRect","point","x","y","inRangeX","xx","inRangeY","yy","inArray","arr","indexOf","intersectArray","a","b","result","ai","bi","push","formatVolume","unit","parseFloat","toFixed","String","formatPrice","coinunit","limit","isopen","substr","formatShowTime","toString","formatInfo","volzoom","middle","zero","abs","__webpack_exports__","_util_cl_tool__WEBPACK_IMPORTED_MODULE_1__","getValue","fields","label","index","val","idx","pow","vol","money","error","_getExrightPara","rightdata","exrightGs","exrightPg","exrightPx","_cl_data_def__WEBPACK_IMPORTED_MODULE_0__","FIELD_RIGHT","accrual","sendstock","allotstock","allotprice","gs","pg","px","_getExrightPrice","price","rightpara","mode","getExrightPriceRange","start","stop","rights","j","_transExright","days","end","FIELD_DAY","open","high","low","close","_isRight","dateBegin","dateEnd","rightdate","transExrightDay","time","transExrightMin","h","findIndexInMin","status","lastIndex","findDateInDay","today","finded","getSize","checkZero","checkDayZero","checkDay5","tradeDate","tradetime","maxDays","FIELD_DAY5","count","curDate","splice","daymins","getMinuteCount","fromTradeTimeToIndex","allvol","allmoney","updateStatic","coinzoom","stktype","volunit","before","stophigh","stoplow","matchDayToWeek","daydata","zipday","field","isBegin","k","week","matchDayToMon","month","begin","nowmin","fromIndexToTradeTime","tindex","f","u","g","FIELD_TRADE","STOCK_TYPE_INDEX","STOCK_TYPE_A","STOCK_TYPE_B","STOCK_TYPE_OTHER","STOCK_TRADETIME","FIELD_MIN","FIELD_TICK","FIELD_LINE","FIELD_ILINE","FIELD_NOW","buy1","buyvol1","sell1","sellvol1","buy2","buyvol2","sell2","sellvol2","buy3","buyvol3","sell3","sellvol3","buy4","buyvol4","sell4","sellvol4","buy5","buyvol5","sell5","sellvol5","FIELD_ENOW","FIELD_NOW_IDX","ups","upvol","downs","downvol","mids","midvol","FIELD_INFO","marker","code","search","type","FIELD_FINANCE","flow","total","earnings","info","ClFormula","_data_cl_data_tools__WEBPACK_IMPORTED_MODULE_0__","[object Object]","this","data","minIndex","maxIndex","nowIndex","offIndex","formula","eval","singleValue","matchData","match","funcName","argStr","replace","split","command","period","off","G","V","U","Z","$","J","Q","tt","it","et","_setLineWidth","context","lineWidth","_drawVline","yy1","yy2","moveTo","lineTo","_drawHline","xx1","xx2","_drawmoveTo","_drawlineTo","_drawRect","ww","hh","strokeRect","_fillRect","fillclr","fillStyle","fillRect","_drawBegin","clr","beginPath","strokeStyle","_drawEnd","stroke","_drawDashLine","x1","y1","x2","y2","dashLen","beveling","sqrt","num","_setFontSize","font","pixel","_drawTxt","txt","pos","textBaseline","textAlign","fillText","getTxtWith","charMap","fontSize","scale","allWidth","element","_getTxtWidth","measureText","__getTxtRect","config","spaceX","spaceY","_drawTxtRect","tr","xxx","yyy","bakclr","_drawCircle","arc","PI","_drawCircleAndFilled","fill","_drawLineAlone","oldclr","_drawSignCircle","Arc1","Arc2","Arc3","_drawSignHLine","item","linew","display","set","maxR","minR","_drawKBar","unitX","xxm","yyh","round","maxmin","max","unitY","yyl","min","filled","_drawVBar","_setTransColor","scolor","trans","style","sColor","toLowerCase","test","sColorNew","concat","sColorChange","join","findNearTimeToIndex","findvalue","direction","cl_data_tools","setFixedLineFlags","showMode","fixed","maxCount","size","COLOR_WHITE","sys","line","back","baktxt","axis","grid","red","green","white","button","colume","box","COLOR_BLACK","_systemInfo","runPlatform","axisPlatform","eventPlatform","standard","sysColor","0","1","2","3","4","5","6","7","8","9",".",",","%",":"," ","K","O","L","-","[","]","mainCanvas","cursorCanvas","setColor","syscolor","color","cl_tool","setScale","canvas","clientWidth","clientHeight","initSystem","cfg","initCommonInfo","chart","father","checkLayout","layout","margin","title","axisX","scroll","digit","symbol","changeCursorStyle","cursor","getLineColor","cl_draw_kbar_ClDrawKBar","rectMain","linkInfo","hotKey","getData","codeInfo","cl_draw_line_ClDrawLine","labelX","labelY","colorIndex","showSort","skips","cl_draw_right_ClDrawRight","rightData","rightMode","cl_draw_vline_ClDrawVLine","CHART_LAYOUT","CHART_BUTTONS","CHART_ORDER","ZOOM_INFO_DEF","list","CHART_KBAR","zoomInfo","lines","axisY","className","extremum","method","maxvalue","minvalue","CHART_VBAR","CHART_NOW","CHART_NOWVOL","CHART_DAY5","CHART_DAY5VOL","CHART_NORMAL","DEFAULT_BUTTON","shape","hotIdx","visible","translucent","cl_chart_button_ClChartButton","callback","map","checkConfig","event","onPaint","self","break","center","DEFAULT_SCROLL","direct","range","select","cl_chart_scroll_ClChartScroll","setPublicRect","rectChart","rectMin","rectMax","rectMid","drawClear","drawGridline","drawButton","iscall","xpos","who","mousePos","findMouseIndex","checkMin","onChange","curIndex","head","tail","cl_draw_axisX_ClDrawAxisX","text","tradeTime","dataLayer","cl_draw_axisY_ClDrawAxisY","align","static","hideInfo","posX","offX","offy","cl_draw_cursor_ClDrawCursor","rectFather","axisXInfo","axisYInfo","clearRect","valueX","valueY","_beforePaint","onClear","q","th","_afterPaint","cl_draw_grid_ClDrawGrid","offx","cl_draw_info_ClDrawInfo","rectMess","titleInfo","message","cl_chart_line_ClChartLine","buttons","childCharts","childDraws","setChildDraw","childLines","setChildLines","setButtons","setScroll","setZoomInfo","axisInfo","rectTitle","rectGridLine","rectAxisYLeft","rectAxisYRight","rectAxisX","rectScroll","ClassName","getLineDataKey","draw","CURSOR","TITLE","AXISY_LEFT","AXISY_RIGHT","AXISX","GRID","init","hasButton","createButton","fastDrawEnd","zoomin","setStatus","zoomout","focused","beforeLocation","getMoveData","drawTitleInfo","moveIndex","locationData","readyData","drawChildDraw","readyDraw","drawChildLines","drawChildCharts","mm","getMiddle","maxrate","minrate","cl_data_def","HSCROLL","readyScroll","newdata","getDataRange","calcMaxMin","showCursorLine","eventLayer","boardEvent","reDraw","newIndex","step","deltaY","keyCode","mouseIndex","getMouseMoveData","cl_chart_order_ClChartOrder","txtLen","timeLen","volLen","closeLen","isIndex","orderData","tickData","drawReady","drawIndex","drawOrder","drawTick","rectOrder","rectTick","inow","ticklen","drawGridLine","mmpCount","getColor","maxlines","recs","beginIndex","str","strint","DEFAULT_LINKINFO","locked","hotIndex","cl_chart_ClChart","syscfg","setDataLayer","setEventLayer","fastDraw","clearData","layer","bindChart","initData","JSON","parse","setData","fastBuffer","makeLineData","usercfg","fastDrawBegin","isHideInfo","_getDistance","xLen","yLen","_getTouchInfo","mouseInfo","offsetX","offsetY","srcRect","getBoundingClientRect","pageX","pageY","_getEventInfo","ClEventHandler","eventBuild","isTouch","eventCanvas","addEventListener","preventDefault","addHandler","touchstart","bind","touchend","touchmove","mousemove","mouseout","mousewheel","mouseup","mousedown","keyup","keydown","click","clearHandler","eventName","handler","attachEvent","removeEventListener","deattachEvent","emitEvent","__timestamp","touches","startX","startY","clearTimeout","longTapTimeout","startTime","now","point2","touchDistance","touchVector","setTimeout","target","previousTouchPoint","previousTouchTime","changedTouches","timestamp","moveX","moveY","previousPinchScale","pinchScale","mouseinfo","vector","angle","vector1","vector2","mr","acos","deltaX","buildMinaTouchEvent","eventObj","cl_event_ClEvent","eventCfg","document","eventSource","bindEvent","firstChart","HotWin","clearEvent","getMousePos","chartPath","findEventPath","ignore","path","cl_data_ClData","decimal","cl_formula","InData","OutData","flushNowData","nowdata","TICK","MIN","checked","flushTick","flushMin","DAY","mergeDay","NOW","WEEK","mergeWeek","MON","mergeMon","DAY5","mergeDay5","makeMinute","updateMinute","RIGHT","rightmode","outkey","mergeNowMinToMin","curMin","sumVol","sumMoney","hasData","stopIdx","runSingleStock","FIELD_SEER","buy","stoploss","uid","cl_register","CHART_SEER","nowprice","no","sourceSeer","startPrice","startTxt","surplus","paceY","drawTransRect","xxRight","infos","yl","stopOffset","stopX","nos","uids","date","hotSeer","lastDate","lastval","showSeer","filterSeer","showPrice","setHotButton","seerPos","getSeerPos","acrR","drawHotSeer","createMulChart","DEF_CHART","cl_chart_def_namespaceObject","DEF_DATA","PLUGINS","util","EV","handlers","args","forEach","apply","scope","on","onetimeCallback","arguments","removeListener","createSingleChart","sysInfo","initChart","chartList","charts"],"mappings":"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","file":"clchart.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"ClChart\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ClChart\"] = factory();\n\telse\n\t\troot[\"ClChart\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","/**\n * Copyright (c) 2018-present clchart Contributors.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// /////////////////////////////////////////\n//   时间处理函数\n// ////////////////////////////////////////\n\n/** @module ClTool */\n\n/**\n * add prefix with 0\n * @export\n * @param {Number} v\n * @param {Number} n\n * @return {String}\n */\nexport function addPreZero (v, n) { // n表示总共几位  (9,2) ---09\n  n = n > 9 ? 9 : n\n  const s = '000000000' + v\n  return s.slice(-1 * n)\n}\n\n/**\n * get time's millseconds\n * @export\n * @param {any} ttime\n * @return {Number}\n */\nexport function getMTime (ttime) { // 得到1970-1-1开始的毫秒数\n  let mtime, seconds\n  if (ttime === undefined) {\n    mtime = new Date()\n  } else {\n    if (typeof ttime === 'string') {\n      seconds = parseInt(ttime)\n    } else {\n      seconds = ttime\n    }\n    if (!isNaN(seconds)) {\n      mtime = new Date(seconds * 1000)\n    } else {\n      mtime = new Date()\n    }\n  }\n  return mtime\n}\n\n// time_t转换成20180101格式\n/**\n * format time_t to 20180101\n *\n * @export\n * @param {any} ttime\n * @return {Number}\n */\nexport function getDate (ttime) {\n  const mtime = getMTime(ttime)\n  return mtime.getFullYear() * 10000 + (mtime.getMonth() + 1) * 100 + mtime.getDate()\n}\n// time_t提取其中的分钟 1030\nexport function getMinute (ttime) {\n  const mtime = getMTime(ttime)\n  return mtime.getHours() * 100 + mtime.getMinutes()\n}\n// 求星期几 0-周日 6-周六\nexport function getDayWeek (day) {\n  const mtime = new Date(Math.floor(day / 10000), Math.floor((day % 10000) / 100) - 1, day % 100)\n  return mtime.getDay()\n}\n// 求星期几 0-周日 6-周六\nexport function getDayMon (day) {\n  const mtime = new Date(Math.floor(day / 10000), Math.floor((day % 10000) / 100) - 1, day % 100)\n  return mtime.getMonth() + 1\n}\n// 日期转换成time_t\nfunction _dayToTTime (day) {\n  const mtime = new Date(Math.floor(day / 10000), Math.floor((day % 10000) / 100) - 1, day % 100)\n  return mtime / 1000\n}\n// 得到两个日期间隔的天数\nexport function getDayGap (beginDay, endDay) {\n  return Math.floor((_dayToTTime(endDay) - _dayToTTime(beginDay)) / (24 * 3600))\n}\n// 格式化time_t为指定字符串\nexport function fromTTimeToStr (ttime, format, ttimePre) {\n  const mtime = getMTime(ttime)\n  switch (format) {\n    case 'minute':\n      if (ttimePre === undefined) {\n        return mtime.getHours() + ':' + addPreZero(mtime.getMinutes(), 2)\n      } else {\n        if (getMinute(ttime) === getMinute(ttimePre)) {\n          return ':' + addPreZero(mtime.getSeconds(), 2)\n        } else {\n          return mtime.getHours() + ':' + addPreZero(mtime.getMinutes(), 2)\n        }\n      }\n    case 'datetime':\n      return mtime.getFullYear() * 10000 + (mtime.getMonth() + 1) * 100 + mtime.getDate() +\n      '-' + mtime.getHours() + ':' + addPreZero(mtime.getMinutes(), 2)\n    default:\n      return ''\n  }\n}\n// 分钟转字符串 1500 -- 15:00\nexport function fromMinuteToStr (minute) {\n  return addPreZero(Math.floor(minute / 100), 2).toString() + ':' + addPreZero(minute % 100, 2).toString()\n}\n// 得到间隔分钟数\nexport function getMinuteGap (beginMin, endMin) {\n  return (Math.floor(endMin / 100) - Math.floor(beginMin / 100)) * 60 + endMin % 100 - beginMin % 100\n}\n\n// 偏移分钟数，offset 为分钟数\nexport function getMinuteOffset (minute, offset) {\n  const mincount = Math.floor(minute / 100) * 60 + minute % 100 + offset\n  return Math.floor(mincount / 60) * 100 + mincount % 60\n}\n\n// /////////////////////////////////////////\n// 公用无关性的函数集合\n// /////////////////////////////////////////\n\nexport function copyArrayOfDeep (obj) {\n  let out\n  if (Array.isArray(obj)) {\n    out = []\n    const len = obj.length\n    for (let i = 0; i < len; i++) {\n      out[i] = copyArrayOfDeep(obj[i])\n    }\n  } else {\n    out = obj\n  }\n  return out\n}\nexport function copyJsonOfDeep (obj) {\n  let out\n  if (obj instanceof Object) { // 数组和文档都为真\n    if (Array.isArray(obj)) { // 只有数组为真\n      out = copyArrayOfDeep(obj)\n    } else {\n      out = {}\n      for (const key in obj) {\n        out[key] = copyJsonOfDeep(obj[key])\n      }\n    }\n  } else {\n    out = obj\n  }\n  return out\n}\n// obj为子集，生成新的对象，仅仅替换source中存在的对应元素\n// 例如 obj = {a:[111],b:2} source = {a:[1,2,3]}\n// out = {a:[111,2,3]}\nexport function updateJsonOfDeep (obj, source) {\n  let out\n  if (source instanceof Object) {\n    if (Array.isArray(source)) {\n      out = []\n      for (const key in source) {\n        out[key] = obj && obj[key]\n          ? updateJsonOfDeep(obj[key], source[key])\n          : copyArrayOfDeep(source[key])\n      }\n    } else {\n      out = {}\n      for (const key in source) {\n        out[key] = obj && obj[key]\n          ? updateJsonOfDeep(obj[key], source[key])\n          : copyJsonOfDeep(source[key])\n      }\n    }\n  } else {\n    out = obj || source\n  }\n  return out\n}\n// // obj为原始集，不生成新的对象，用source中存在的对应元素替换obj的数据\n// // 例如 obj = {a:[111],b:2} source = {a:[1,2,3]}\n// // out = {a:[111,2,3],b:2}\nexport function mergeJsonOfDeep (obj, source) {\n  const out = updateJsonOfDeep(obj, source)\n\n  for (const key in obj) {\n    if (out[key] !== undefined) continue\n    if (obj[key] instanceof Object) {\n      if (Array.isArray(obj[key])) {\n        out[key] = copyArrayOfDeep(obj[key])\n      } else {\n        out[key] = copyJsonOfDeep(obj[key])\n      }\n    } else {\n      out[key] = obj[key]\n    }\n  }\n  return out\n}\n// 数组是否为空\nexport function isEmptyArray (obj) {\n  if (obj !== undefined && Array.isArray(obj)) {\n    if (obj.length > 0) return false\n  }\n  return true\n}\n// 根据offset返回一个新的矩形\n// rect:{left,top,width,height}\n// offset:{left,top,right,bottom}\nexport function offsetRect (rect, offset) {\n  if (rect === undefined) return { left: 0, top: 0, width: 0, height: 0 }\n  if (offset === undefined) return rect\n  return {\n    left: rect.left + offset.left,\n    top: rect.top + offset.top,\n    width: rect.width - (offset.left + offset.right),\n    height: rect.height - (offset.top + offset.bottom)\n  }\n}\n// 判断点是否在矩形内\nexport function inRect (rect, point) {\n  if (rect === undefined || point === undefined) return false\n  if (point.x >= rect.left && point.y >= rect.top &&\n    point.x < (rect.left + rect.width) &&\n    point.y < (rect.top + rect.height)) {\n    return true\n  }\n  return false\n}\n// 判断X是否在矩形宽度范围内\nexport function inRangeX (rect, xx) {\n  if (rect === undefined || xx === undefined) return false\n  if (xx >= rect.left &&\n    xx < (rect.left + rect.width)) {\n    return true\n  }\n  return false\n}\n// 判断Y是否在矩形高度范围内\nexport function inRangeY (rect, yy) {\n  if (rect === undefined || yy === undefined) return false\n  if (yy >= rect.top &&\n    yy < (rect.top + rect.height)) {\n    return true\n  }\n  return false\n}\n// 判断 v 是否在数组arr中, 比in准确\nexport function inArray (v, arr) {\n  if (arr.indexOf(v) < 0) return false\n  return true\n}\n// 求数组a和b的交集\nexport function intersectArray (a, b) {\n  const result = []\n  for (let ai = 0; ai < a.length; ai++) {\n    for (let bi = 0; bi < b.length; bi++) {\n      if (a[ai] === b[bi]) {\n        result.push(a[ai])\n        break\n      }\n    }\n  }\n  return result\n}\n// 求数组a和b的并集,去掉重复的元素\nexport function mergeArray (a, b) {\n  const result = []\n  for (let ai = 0; ai < a.length; ai++) {\n    result.push(a[ai])\n  }\n  for (let bi = 0; bi < b.length; bi++) {\n    if (!inArray(b[bi], result)) {\n      result.push(b[bi])\n    }\n  }\n  return result\n}\n// 格式化百分比\nexport function formatRate (value, zero) {\n  if (value === undefined || isNaN(value) || zero === undefined) return '--'\n  if (typeof value === 'string') value = parseFloat(value)\n\n  let result = Math.abs((value - zero) / zero * 100)\n  result = result.toFixed(2) + '%'\n  return result // 10.20%\n}\n// 格式化成交量\nexport function formatVolume (value, unit) {\n  if (value === undefined || isNaN(value)) return '--'\n  if (typeof value === 'string') value = parseFloat(value)\n\n  if (unit === undefined) unit = 100\n  let result = value / unit\n\n  if (result > 100000000000) result = (result / 100000000).toFixed(0) + '亿'\n  else if (result > 10000000000) result = (result / 100000000).toFixed(1) + '亿'\n  else if (result > 1000000000) result = (result / 100000000).toFixed(2) + '亿'\n  else if (result > 100000000) result = (result / 100000000).toFixed(3) + '亿'\n  else if (result > 10000000) result = (result / 10000).toFixed(0) + '万'\n  else if (result > 1000000) result = (result / 10000).toFixed(1) + '万'\n  else if (result > -0.000000001 && result < 0.000000001) result = '--'\n  else result = result.toFixed(0)\n  return String(result)\n}\n// 格式化价格 decimal为小数点，limit为最大长度[4,10]，\nexport function formatPrice (value, coinunit, limit, isopen) {\n  if (value === undefined || isNaN(value)) return '--'\n  // if (typeof value === 'string') value = parseFloat(value);\n\n  let result = value\n  if (coinunit === undefined || coinunit < 0 || coinunit > 10) coinunit = 0\n\n  if (value > -0.000000001 && value < 0.000000001 && !isopen) {\n    return '--'\n  }\n  result = result.toFixed(coinunit)\n\n  if (limit === undefined || limit < 4) return result\n  return result.substr(0, limit)\n}\n// 格式化时间\nexport function formatShowTime (key, value, minute) {\n  let out = value\n  switch (key) {\n    case 'M5':\n    case 'M15':\n    case 'M30':\n    case 'M60':\n      out = fromTTimeToStr(value, 'datetime')\n      break\n    case 'MIN':\n      if (minute === undefined) {\n        out = fromTTimeToStr(value, 'minute')\n      } else {\n        out = fromMinuteToStr(minute)\n      }\n      break\n    case 'DAY5':\n      out = fromTTimeToStr(value, 'minute')\n      break\n  }\n  return out\n}\n\nexport function formatInfo (value, format, coinunit, volzoom, middle) {\n  let out\n  if (format === 'rate') {\n    out = formatRate(value, middle)\n  } else {\n    if (format === 'price') {\n      if (coinunit === undefined) coinunit = 2\n      out = formatPrice(value, coinunit, 7)\n    } else {\n      if (volzoom === undefined) volzoom = 100\n      out = formatVolume(value, volzoom)\n    }\n  }\n  return out\n}\n// /////////////////////////////////////////\n// 数据转换函数集合\n// /////////////////////////////////////////\n","/**\n * Copyright (c) 2018-present clchart Contributors.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport {\n  FIELD_DAY,\n  FIELD_TICK,\n  FIELD_RIGHT,\n  FIELD_DAY5\n} from '../cl.data.def'\n\nimport {\n  copyArrayOfDeep,\n  isEmptyArray,\n  getDate,\n  getDayWeek,\n  getDayGap,\n  getDayMon,\n  getMinuteGap,\n  getMinute,\n  getMinuteOffset\n} from '../util/cl.tool'\n\n/** @module GetValue */\n\n// 按fields定义从数组value中获取，第index条标记为label的数据\n/**\n * get value\n * @export\n * @param {Object} {\n *   fields,\n *   value,\n * }\n * @param {String} label\n * @param {Number} [index=0]\n * @return {Number}\n */\nexport default function getValue ({\n  fields,\n  value\n}, label, index = 0) {\n  let val = 0\n  try {\n    // 支持二维数组和一维数组，判断如果是二维数组就取对应的值\n    let source = value\n    if (Array.isArray(value[0])) {\n      source = value[index]\n    }\n    switch (label) {\n      case 'idx':\n        // 序列，now 0-239，day5 0-5*239\n        // 非常重要，利用这里可以统一MIN和D5的画图\n        if (fields.idx === undefined) val = index\n        else val = source[fields.idx]\n        break\n      case 'coinzoom':\n        val = Math.pow(10, getValue({\n          fields,\n          value\n        }, 'coinzoom', 0))\n        break\n      case 'volzoom':\n        val = Math.pow(10, getValue({\n          fields,\n          value\n        }, 'volunit', 0))\n        break\n      // case 'before':\n      // case 'open':\n      // case 'high':\n      // case 'low':\n      // case 'close':\n      // case 'stophigh':\n      // case 'stoplow':\n      // case 'buy1':\n      // case 'buy2':\n      // case 'buy3':\n      // case 'buy4':\n      // case 'buy5':\n      // case 'sell1':\n      // case 'sell2':\n      // case 'sell3':\n      // case 'sell4':\n      // case 'sell5':\n      //   val = source[fields[label]]\n      //   break\n      case 'flow':\n      case 'total':\n        val = source[fields[label]] * 100\n        break\n      case 'decvol':\n        if (index === 0) {\n          val = source[fields.vol]\n        } else {\n          val = source[fields.vol] - getValue({\n            fields,\n            value\n          }, 'vol', index - 1)\n        }\n        break\n      case 'decmoney':\n        if (index === 0) {\n          val = source[fields.money]\n        } else {\n          val = source[fields.money] - getValue({\n            fields,\n            value\n          }, 'money', index - 1)\n        }\n        break\n      default:\n        if (source[fields[label]]) {\n          val = source[fields[label]]\n        }\n    }\n  } catch (error) {\n    val = 0\n  }\n  return val\n}\n\n// export function getTimeIndex(data, label, value) {\n//   let idx = -1;\n//   for (let i = data.value.length - 1; i >= 0; i--) {\n//     if (getValue(data, label, i) > value) continue;\n//     idx = i;\n//     break;\n//   }\n//   return idx;\n// }\n\n/**\n * get max value\n * @export\n * @param {Array} data\n * @param {String} label\n * @param {Number} value\n * @return {Number}\n */\nexport function getValueMax (data, label, value) {\n  let out = value\n  if (!Array.isArray(data.value)) return out\n  for (let k = 0; k < data.value.length; k++) {\n    const v = getValue(data, label, k)\n    if (v > out) out = v\n  }\n  return out\n}\n/**\n * get min value\n * @export\n * @param {Array} data\n * @param {String} label\n * @param {Number} value\n * @return {Number}\n */\nexport function getValueMin (data, label, value) {\n  let out = value\n  if (!Array.isArray(data.value)) return out\n  for (let k = 0; k < data.value.length; k++) {\n    const v = getValue(data, label, k)\n    if (v < out) out = v\n  }\n  return out\n}\n\n// /////////////////////////////////////////\n// 日线除权的函数集合\n// /////////////////////////////////////////\n/**\n * get exright para\n * @param {String} rightdata\n * @return {Object}\n */\nfunction _getExrightPara (rightdata) {\n  let exrightGs = 1000 // 送股数\n  let exrightPg = 0 // 配股数\n  let exrightPx = 0 // 利息\n  if (rightdata[FIELD_RIGHT.accrual]) exrightPx = rightdata[FIELD_RIGHT.accrual] / 10\n  if (rightdata[FIELD_RIGHT.sendstock] > 0 || rightdata[FIELD_RIGHT.allotstock] > 0) {\n    exrightGs = 1000 + rightdata[FIELD_RIGHT.sendstock] / 10 + rightdata[FIELD_RIGHT.allotstock] / 10\n    exrightPg = -rightdata[FIELD_RIGHT.allotprice] * rightdata[FIELD_RIGHT.allotstock] / 10000\n  }\n  return {\n    gs: exrightGs,\n    pg: exrightPg,\n    px: exrightPx\n  }\n}\n\n/**\n * @param {Number} price\n * @param {Object} rightpara\n * @param {String} mode\n * @return {Number}\n */\nfunction _getExrightPrice (price, rightpara, mode) {\n  if (mode === 'forword') {\n    price = (price * 1000 - rightpara.pg - rightpara.px) * 1000 / rightpara.gs\n  } else {\n    price = price * 1000 * rightpara.gs / 1000 + rightpara.pg + rightpara.px\n  }\n  return price / 1000\n}\n// 得到某个价格的除权价\n/**\n * Get an exemption price for a price\n * @export\n * @param {Number} start\n * @param {Number} stop\n * @param {Number} price\n  * @param {Array} rights\n * @return {Number}\n */\nexport function getExrightPriceRange (start, stop, price, rights) {\n  if (rights === undefined || rights.length < 1) return price\n  let rightpara\n  for (let j = 0; j < rights.length; j++) {\n    if (rights[j][0] > start && rights[j][0] <= stop) {\n      rightpara = _getExrightPara(rights[j])\n      price = _getExrightPrice(price, rightpara, 'forword')\n      break\n    }\n  }\n  return price\n}\n/**\n * transfer exright\n * @private\n * @param {Array} days\n * @param {Array} rightdata\n * @param {String} mode\n * @param {Number} start\n * @param {Number} end\n */\nfunction _transExright (days, rightdata, mode, start, end) {\n  const rightpara = _getExrightPara(rightdata)\n  if (mode === 'forword') {\n    for (let i = start; i < end; i++) {\n      days[i][FIELD_DAY.open] = _getExrightPrice(days[i][FIELD_DAY.open], rightpara, mode) // open\n      days[i][FIELD_DAY.high] = _getExrightPrice(days[i][FIELD_DAY.high], rightpara, mode) // high\n      days[i][FIELD_DAY.low] = _getExrightPrice(days[i][FIELD_DAY.low], rightpara, mode) // low\n      days[i][FIELD_DAY.close] = _getExrightPrice(days[i][FIELD_DAY.close], rightpara, mode) // new\n      days[i][FIELD_DAY.vol] = days[i][FIELD_DAY.vol] * rightpara.gs / 1000\n    }\n  }\n}\n\n// 判断是否有除权\n/**\n * check is right\n * @param {Date} dateBegin\n * @param {Date} dateEnd\n * @param {Date} rightdate\n * @return {Boolean}\n */\nfunction _isRight (dateBegin, dateEnd, rightdate) {\n  if (rightdate > dateBegin && rightdate <= dateEnd) {\n    return true\n  } else return false\n}\n// 对日线进行除权，周年线不能除权，,days传入时就是一个可修改的数组\n/**\n *\n *\n * @export\n * @param {Array} days\n * @param {Array} rights\n * @param {String} mode\n * @param {Number} start\n * @param {Number} end\n * @return {Array}\n */\nexport function transExrightDay (days, rights, mode, start, end) {\n  if (rights.length < 1 || days.length < 1) return days\n  if (mode === undefined) mode = 'forword' // 以最近的价格为基准,修正以前的价格;\n  if (start === undefined || start < 0 || start > days.length - 1) start = 0\n  if (end === undefined || end < 0) end = days.length - 1\n\n  if (mode === 'forword') {\n    for (let i = start; i <= end; i++) {\n      for (let j = 0; j < rights.length; j++) {\n        if (i < 1) continue\n        if (_isRight(days[i - 1][FIELD_DAY.time], days[i][FIELD_DAY.time], rights[j][FIELD_RIGHT.time])) {\n          _transExright(days, rights[j], mode, start, i)\n          break\n        }\n      }\n    }\n  } else if (mode === 'backword') {}\n  return days\n}\n\n// 对分钟线除权,days传入时就是一个可修改的数组\n/**\n * transfer exrigth min data\n * @export\n * @param {Array} days\n * @param {Array} rights\n * @param {String} mode\n * @param {Number} start\n * @param {Number} end\n * @return {Array}\n */\nexport function transExrightMin (days, rights, mode, start, end) {\n  if (rights.length < 1 || days.length < 1) return days\n  if (mode === undefined) mode = 'forword' // 以最近的价格为基准,修正以前的价格;\n  if (start === undefined || start < 0 || start > days.length - 1) start = 0\n  if (end === undefined || end < 0) end = days.length - 1\n\n  if (mode === 'forword') {\n    for (let i = start; i <= end; i++) {\n      for (let j = 0; j < rights.length; j++) {\n        if (i < 1) continue\n        if (_isRight(\n          getDate(days[i - 1][FIELD_DAY.time]),\n          getDate(days[i][FIELD_DAY.time]),\n          rights[j][FIELD_RIGHT.time])) {\n          _transExright(days, rights[j], mode, start, i)\n          break\n        }\n      }\n    }\n  } else if (mode === 'backword') {}\n  return days\n}\n// /////////////////\n// 检索数据函数集\n// /////////////////\n// 从分钟线查找对应记录\n/**\n * find index in min\n * @export\n * @param {Object} source\n * @param {Number} index\n * @return {Object}\n */\nexport function findIndexInMin (source, index) {\n  if (source.value.length < 1) {\n    return {\n      status: 'new',\n      index: -1\n    }\n  }\n  const lastIndex = source.value[source.value.length - 1][source.fields.time]\n  if (lastIndex === index) {\n    return {\n      status: 'old',\n      index: source.value.length - 1\n    }\n  } else if (lastIndex > index) {\n    return {\n      status: 'error',\n      index: source.value.length - 1\n    }\n  } else {\n    return {\n      status: 'new',\n      index: source.value.length - 1\n    }\n  }\n}\n// 从日线查找对应记录\n/**\n * find date in day\n * @export\n * @param {Object} source\n * @param {Number} today\n * @return {Object}\n */\nexport function findDateInDay (source, today) {\n  if (source === undefined || source.value === undefined || source.value.length < 1) {\n    return {\n      finded: false,\n      index: -1\n    }\n  }\n  const lastDate = source.value[source.value.length - 1][source.fields.time]\n  if (today === lastDate) {\n    return {\n      finded: true,\n      index: source.value.length - 1\n    }\n  }\n  return {\n    finded: false,\n    index: -1\n  }\n}\n// export function findDateInDay(source, today) {\n//   if (source === undefined || source.value === undefined || source.value.length < 1)\n//   {\n//     return {\n//       finded: false,\n//       index: -1\n//     };\n//   }\n//   const fields = source.fields;\n//   for (let i = source.value.length - 1; i >= 0; i--) {\n//     if (source.key === 'WEEK') {\n//       const curDay = source.value[i][fields.time];\n//       if (getDayGap(curDay, today) + getDayWeek(curDay) > 7) {\n//         return {\n//           finded: false,\n//           index: -1\n//         };\n//       } else {\n//         return {\n//           finded: true,\n//           index: i\n//         };\n//       }\n//     }\n//     if (source.key === 'MON') {\n//       const curMon = Math.floor(source.value[i][fields.time] / 100);\n//       const todayMon = Math.floor(today / 100);\n//       if (curMon !== todayMon) {\n//         return {\n//           finded: false,\n//           index: -1\n//         };\n//       } else {\n//         return {\n//           finded: true,\n//           index: i\n//         };\n//       }\n//     }\n//     if (source.key === 'DAY') {\n//       if (source.value[i][fields.time] === today) {\n//         return {\n//           finded: true,\n//           index: i\n//         };\n//       }\n//     }\n//   }\n//   return {\n//     finded: false,\n//     index: source.value.length - 1\n//   };\n// }\n\n// /////////////////\n// 检查数据完整性\n// /////////////////\n/**\n * get size\n * @export\n * @param {Object} source\n * @return {Boolean}\n */\nexport function getSize (source) {\n  if (source === undefined || isEmptyArray(source.value)) {\n    return 0\n  }\n  return source.value.length\n}\n/**\n * check zero\n * @export\n * @param {Array} value\n * @param {Object} fields\n * @return {Boolean}\n */\nexport function checkZero (value, fields) {\n  if (Array.isArray(value) &&\n    value[fields.open] > 0 &&\n    value[fields.high] > 0 &&\n    value[fields.low] > 0 &&\n    value[fields.close] > 0 &&\n    value[fields.vol] > 0 &&\n    value[fields.money] > 0) {\n    return false\n  } else {\n    return true\n  }\n}\n/**\n * check day zero\n * @export\n * @param {Object} source\n * @return {Array}\n */\nexport function checkDayZero (source) {\n  const out = []\n  if (!Array.isArray(source)) return out\n\n  for (let i = 0; i < source.length; i++) {\n    if (!checkZero(source[i], FIELD_DAY)) {\n      out.push(source[i])\n    }\n  }\n  return out\n}\n/**\n * check 5 day\n * @export\n * @param {Object} source\n * @param {Number} tradeDate\n * @param {Number} tradetime\n * @return {Array}\n */\nexport function checkDay5 (source, tradeDate, tradetime) {\n  const out = []\n  if (source.length < 1) return out\n\n  const lastDate = getDate(source[source.length - 1][FIELD_DAY5.time])\n  // 判断是否已经有收盘数据了\n  let maxDays = 5\n  if (!lastDate === tradeDate) maxDays = 4\n\n  let idx\n  let count = 0\n  let curDate = 0\n  for (idx = source.length - 1; idx >= 0; idx--) {\n    if (curDate !== getDate(source[idx][FIELD_DAY5.time])) {\n      curDate = getDate(source[idx][FIELD_DAY5.time])\n      count++\n      if (count > maxDays) {\n        idx++\n        break\n      }\n    }\n    out.splice(0, 0, [source[idx][FIELD_DAY5.time], source[idx][FIELD_DAY5.close], source[idx][FIELD_DAY5.vol]])\n  }\n\n  count = 0\n  curDate = 0\n  let vol = 0\n  let money = 0\n  const daymins = getMinuteCount(tradetime)\n  for (idx = 0; idx < out.length; idx++) {\n    if (curDate !== getDate(out[idx][FIELD_DAY5.time])) { // 增加记录\n      curDate = getDate(out[idx][FIELD_DAY5.time])\n      count++\n      vol = 0\n      money = 0\n    }\n    vol += out[idx][FIELD_DAY5.vol]\n    money += out[idx][FIELD_DAY5.close] * out[idx][FIELD_DAY5.vol]\n    let index = fromTradeTimeToIndex(out[idx][FIELD_DAY5.time], tradetime)\n    index += (count - 1) * daymins\n    out[idx][FIELD_DAY5.idx] = index\n    out[idx][FIELD_DAY5.allvol] = vol\n    out[idx][FIELD_DAY5.allmoney] = money\n  }\n  return out\n}\n/**\n * update static\n * @export\n * @param {Object} fields\n * @param {Array} value\n * @return {Array}\n */\nexport function updateStatic (fields, value) {\n  const coinzoom = getValue({\n    fields,\n    value\n  }, 'coinzoom')\n  const volzoom = getValue({\n    fields,\n    value\n  }, 'volzoom')\n  const out = {\n    stktype: getValue({\n      fields,\n      value\n    }, 'type'),\n    volzoom,\n    volunit: getValue({\n      fields,\n      value\n    }, 'volunit'),\n    coinzoom,\n    coinunit: getValue({\n      fields,\n      value\n    }, 'coinunit'),\n    before: getValue({\n      fields,\n      value\n    }, 'before'),\n    stophigh: getValue({\n      fields,\n      value\n    }, 'stophigh'),\n    stoplow: getValue({\n      fields,\n      value\n    }, 'stoplow')\n  }\n  return out\n}\n\n// /////////////////\n// 对数据进行周期性合并\n// /////////////////\n// export function matchMinToMinute(source, outkey) {\n//   switch (outkey) {\n//     case 'M15': out = matchMin5ToMinute(out, outkey, 15);\n//       break;\n//     case 'M30': out = matchMin5ToMinute(out, outkey, 30);\n//       break;\n//     case 'M60': out = matchMin5ToMinute(out, outkey, 60);\n//       break;\n//   }\n// export function mergeMin(daydata, rate) {\n// this.match_minute_line = function(srcfields, srcvalue, minfields, minvalue, period) {\n//   const out = copyArrayOfDeep(srcvalue);\n//   const cur_min = [];\n//   let base_vol = 0;\n//   let base_money = 0;\n\n//   let hasData = false;\n//   let stopIdx = 4;\n//   for (let k = 0; k < minvalue.length; k++) {\n//     const nowmin = minvalue[k][minfields.idx];\n//     if (nowmin < 0) continue;\n//     if (nowmin > stopIdx) {\n//       if (hasData) {\n//         cur_min[minfields.vol] = minvalue[k][minfields.vol] - base_vol;\n//         cur_min[minfields.money] = minvalue[k][minfields.money] - base_money;\n//         base_vol = minvalue[k][minfields.vol];\n//         base_money = minvalue[k][minfields.money];\n\n//         cur_min[minfields.time] = fromIndexToTradeTime(stopIdx, this.tradetime, this.tradeDate);\n//         out.push(copyArrayOfDeep(cur_min));\n//       }\n//       stopIdx = (Math.floor(nowmin / offset) + 1) * offset - 1;\n//       cur_min[minfields.open] = minvalue[k][minfields.open];\n//       cur_min[minfields.high] = minvalue[k][minfields.high];\n//       cur_min[minfields.low] = minvalue[k][minfields.low];\n//       cur_min[minfields.close] = minvalue[k][minfields.close];\n//       hasData = true;\n//     } else { // nowmin 在0-5之间\n//       if (hasData) {\n//         cur_min[minfields.high] = cur_min[minfields.high] > minvalue[k][minfields.high] ? cur_min[minfields.high] : minvalue[k][minfields.high];\n//         cur_min[minfields.low] = cur_min[minfields.low] < minvalue[k][minfields.low] || minvalue[k][minfields.low] === 0 ?\n//                                   cur_min[minfields.low] : minvalue[k][minfields.low];\n//         cur_min[minfields.close] = minvalue[k][minfields.close];\n//       } else {\n//         cur_min[minfields.open] = minvalue[k][minfields.open];\n//         cur_min[minfields.high] = minvalue[k][minfields.high];\n//         cur_min[minfields.low] = minvalue[k][minfields.low];\n//         cur_min[minfields.close] = minvalue[k][minfields.close];\n//         hasData = true;\n//       }\n//     }\n//   } // for i\n//   if (hasData) {\n//     cur_min[minfields.vol] = minvalue[minvalue.length - 1][minfields.vol] - base_vol;\n//     cur_min[minfields.money] = minvalue[minvalue.length - 1][minfields.money] - base_money;\n//     cur_min[minfields.time] = fromIndexToTradeTime(stopIdx, this.tradetime, this.tradeDate);\n//     out.push(copyArrayOfDeep(cur_min));\n//     // alert('4:'+out.toString());\n//   }\n//   return out;\n// }\n\n// 按rate率压缩日线和分钟数据，因为界面显示原因，可能会存在2日...7日等合并的线\n/**\n * get zip day\n * @export\n * @param {Array} daydata\n * @param {Number} rate\n * @return {Array}\n */\nexport function getZipDay (daydata, rate) {\n  if (rate < 1) return daydata\n  const out = []\n  const zipday = []\n\n  let count = 0\n  const field = FIELD_DAY\n  for (let k = 0; k < daydata.length; k++) {\n    if (count === 0) {\n      zipday[field.open] = daydata[k][field.open]\n      zipday[field.high] = daydata[k][field.high]\n      zipday[field.low] = daydata[k][field.low]\n      zipday[field.close] = daydata[k][field.close]\n      zipday[field.vol] = daydata[k][field.vol]\n      zipday[field.money] = daydata[k][field.money]\n      count = 1\n    } else {\n      zipday[field.high] = zipday[field.high] > daydata[k][field.high]\n        ? zipday[field.high] : daydata[k][field.high]\n      zipday[field.low] = zipday[field.low] < daydata[k][field.low] || daydata[k][field.low] === 0\n        ? zipday[field.low] : daydata[k][field.low]\n      zipday[field.close] = daydata[k][field.close]\n      zipday[field.vol] += daydata[k][field.vol]\n      zipday[field.money] += daydata[k][field.money]\n      count++\n      if (count >= rate) {\n        zipday[field.time] = daydata[k][field.time]\n        out.push(copyArrayOfDeep(zipday))\n        count = 0\n      }\n    }\n  } // for i\n  if (count > 0) {\n    zipday[field.time] = daydata[daydata.length - 1][field.time]\n    out.push(copyArrayOfDeep(zipday))\n  }\n  return out\n}\n// 日线到周线\n/**\n * convert day data to week data\n * @export\n * @param {Array} daydata\n * @return {Array}\n */\nexport function matchDayToWeek (daydata) {\n  const out = []\n  const zipday = []\n\n  const field = FIELD_DAY\n  let isBegin = true\n  for (let k = 0; k < daydata.length; k++) {\n    if (isBegin) {\n      zipday[field.open] = daydata[k][field.open]\n      zipday[field.high] = daydata[k][field.high]\n      zipday[field.low] = daydata[k][field.low]\n      isBegin = false\n    } else {\n      zipday[field.high] = zipday[field.high] > daydata[k][field.high]\n        ? zipday[field.high] : daydata[k][field.high]\n      zipday[field.low] = zipday[field.low] < daydata[k][field.low] || daydata[k][field.low] === 0\n        ? zipday[field.low] : daydata[k][field.low]\n    }\n    zipday[field.close] = daydata[k][field.close]\n    zipday[field.vol] = daydata[k][field.vol]\n    zipday[field.money] = daydata[k][field.money]\n\n    // 周五 or 下一个日期跨越一周\n    const week = getDayWeek(daydata[k][field.time])\n    if (k >= daydata.length - 1 || week === 5 ||\n      (getDayGap(daydata[k][field.time], daydata[k + 1][field.time]) + week > 7)) {\n      zipday[field.time] = daydata[k][field.time]\n      out.push(copyArrayOfDeep(zipday))\n      isBegin = true\n    }\n  } // for i\n  if (!isBegin) {\n    zipday[field.time] = daydata[daydata.length - 1][field.time]\n    out.push(copyArrayOfDeep(zipday))\n  }\n  return out\n}\n\n// 日线到月线\n/**\n * convert day data to month data\n * @export\n * @param {Array} daydata\n * @return {Array}\n */\nexport function matchDayToMon (daydata) {\n  let month\n  const out = []\n  const zipday = []\n\n  const field = FIELD_DAY\n  let isBegin = true\n  for (let k = 0; k < daydata.length; k++) {\n    if (isBegin) {\n      zipday[field.open] = daydata[k][field.open]\n      zipday[field.high] = daydata[k][field.high]\n      zipday[field.low] = daydata[k][field.low]\n      month = getDayMon(daydata[k][field.time])\n      isBegin = false\n    } else {\n      zipday[field.high] = zipday[field.high] > daydata[k][field.high]\n        ? zipday[field.high] : daydata[k][field.high]\n      zipday[field.low] = zipday[field.low] < daydata[k][field.low] || daydata[k][field.low] === 0\n        ? zipday[field.low] : daydata[k][field.low]\n    }\n    zipday[field.close] = daydata[k][field.close]\n    zipday[field.vol] = daydata[k][field.vol]\n    zipday[field.money] = daydata[k][field.money]\n\n    if (k >= daydata.length - 1 || getDayMon(daydata[k + 1][field.time]) !== month) {\n      zipday[field.time] = daydata[k][field.time]\n      out.push(copyArrayOfDeep(zipday))\n      isBegin = true\n    }\n  } // for i\n  if (!isBegin) {\n    zipday[field.time] = daydata[daydata.length - 1][field.time]\n    out.push(copyArrayOfDeep(zipday))\n  }\n  return out\n}\n\n// 求交易时间的总共分钟数 [{begin:930,end:1130},{...}]\n/**\n * get minute count\n * @export\n * @param {Number} tradetime\n * @return {Number}\n */\nexport function getMinuteCount (tradetime) { // time_t\n  let mincount = 0\n  for (let i = 0; i < tradetime.length; i++) {\n    mincount += getMinuteGap(tradetime[i].begin, tradetime[i].end)\n  }\n  return mincount\n}\n\n// 根据交易时间把time_t返回一个顺序值 time_t --> 0..239 -1表示没有非交易时间\n/**\n * convert time t to trade time\n * @export\n * @param {Number} ttime\n * @param {Number} tradetime\n * @return {Number}\n */\nexport function fromTradeTimeToIndex (ttime, tradetime) { // time_t 返回０－２３９\n  const minute = getMinute(ttime)\n\n  let nowmin = 0\n  let index = -1\n  for (let i = 0; i < tradetime.length; i++) {\n    // 9:31:00--11:29:59  13:01:00--14:59:59\n    if (minute > tradetime[i].begin && minute < tradetime[i].end) {\n      index = nowmin + getMinuteGap(tradetime[i].begin, minute)\n      break\n    }\n    if (minute <= tradetime[i].begin && i === 0) { // 8:00:00---9:30:59秒前都=0\n      return 0\n    }\n    if (minute <= tradetime[i].begin && (minute > getMinuteOffset(tradetime[i].begin, -5))) { // 12:55:59--13:00:59秒\n      return nowmin\n    }\n\n    nowmin += getMinuteGap(tradetime[i].begin, tradetime[i].end)\n\n    if (minute >= tradetime[i].end && i === tradetime.length - 1) { // 15:00:00秒后\n      return nowmin - 1\n    }\n    if (minute >= tradetime[i].end && (minute < getMinuteOffset(tradetime[i].end, 5))) { // 11:30:00--11:34:59秒\n      return nowmin - 1\n    }\n  }\n  return index\n}\n\n// 根据交易时间把0..239 转换为 time_t;  0 表示没有非交易时间\n/**\n * convert index to trade time\n * @export\n * @param {Number} tindex\n * @param {Number} tradetime\n * @param {Number} tradeDate\n * @return {Number}\n */\nexport function fromIndexToTradeTime (tindex, tradetime, tradeDate) {\n  let index = tindex\n  let offset = 0\n  let nowmin = 0\n  for (let i = 0; i < tradetime.length; i++) {\n    nowmin = getMinuteGap(tradetime[i].begin, tradetime[i].end)\n    if (index < nowmin) {\n      offset = getMinuteOffset(tradetime[i].begin, index + 1)\n      const ttime = new Date(Math.floor(tradeDate / 10000), Math.floor(tradeDate % 10000 / 100) - 1, tradeDate % 100,\n        Math.floor(offset / 100), offset % 100, 0)\n      return Math.floor(ttime / 1000)\n    }\n    index -= nowmin\n  }\n  return 0\n}\n/**\n * out put 5 day\n *\n * @export\n * @param {Object} source\n * @param {Number} tradetime\n * @return {Array}\n */\nexport function outputDay5 (source, tradetime) {\n  const out = {\n    key: 'DAY5',\n    fields: FIELD_DAY5,\n    value: []\n  }\n  if (source.length < 1) return out\n\n  let idx\n  let count = 0\n  let vol = 0\n  let money = 0\n  let curDate = 0\n  const daymins = getMinuteCount(tradetime)\n  for (idx = 0; idx < source.length; idx++) {\n    if (curDate !== getDate(source[idx][FIELD_TICK.time])) {\n      curDate = getDate(source[idx][FIELD_TICK.time])\n      count++\n      vol = 0\n      money = 0\n    }\n    vol += source[idx][FIELD_TICK.vol]\n    money += source[idx][FIELD_TICK.close] * source[idx][FIELD_TICK.vol]\n    let index = fromTradeTimeToIndex(source[idx][FIELD_TICK.time], tradetime)\n    index += (count - 1) * daymins\n    out.value.push([index, source[idx][FIELD_TICK.close], source[idx][FIELD_TICK.vol], money / vol])\n  }\n  return out\n}\n","/**\n * Copyright (c) 2018-present clchart Contributors.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// 数据类型和数据名称分开；根据数据类型生成\n// 在comm中定义几个函数，用户可以自己定义数据类型，自己定义按钮，自己定义画线的方式，\n// 只要用户产生的类支持通用的接口onpaint等函数，并成功注册进来，就可以被chart拿来画图了\n// 这样扩展起来才方便\n// 而chart.line只画基础的一些图形，其他非标的图形由用户自行定义，包括数据生成的算法\n\nexport const STOCK_TYPE_INDEX = 0\nexport const STOCK_TYPE_A = 1\nexport const STOCK_TYPE_B = 4\nexport const STOCK_TYPE_OTHER = 5\n\nexport const STOCK_TRADETIME = [{\n  begin: 930,\n  end: 1130\n},\n{\n  begin: 1300,\n  end: 1500\n}\n]\n\n// 基本日线定义，历史分钟线，\nexport const FIELD_DAY = {\n  time: 0,\n  open: 1,\n  high: 2,\n  low: 3,\n  close: 4,\n  vol: 5,\n  money: 6\n}\nexport const FIELD_MIN = {\n  idx: 0,\n  open: 1,\n  high: 2,\n  low: 3,\n  close: 4,\n  vol: 5,\n  money: 6,\n  allvol: 5, // 增补\n  allmoney: 6 // 增补\n}\n\nexport const FIELD_TICK = {\n  time: 0,\n  close: 1,\n  vol: 2\n}\nexport const FIELD_DAY5 = {\n  time: 0,\n  close: 1,\n  vol: 2,\n  idx: 3, // 增补\n  allvol: 4, // 增补\n  allmoney: 5 // 增补\n}\n\n// 两种单线的定义\nexport const FIELD_LINE = {\n  time: 0,\n  value: 1\n}\nexport const FIELD_ILINE = {\n  idx: 0,\n  value: 1\n}\n\n// 标准5档实时行情\nexport const FIELD_NOW = {\n  time: 0,\n  open: 1,\n  high: 2,\n  low: 3,\n  close: 4,\n  vol: 5,\n  money: 6,\n  buy1: 7,\n  buyvol1: 8,\n  sell1: 9,\n  sellvol1: 10,\n  buy2: 11,\n  buyvol2: 12,\n  sell2: 13,\n  sellvol2: 14,\n  buy3: 15,\n  buyvol3: 16,\n  sell3: 17,\n  sellvol3: 18,\n  buy4: 19,\n  buyvol4: 20,\n  sell4: 21,\n  sellvol4: 22,\n  buy5: 23,\n  buyvol5: 24,\n  sell5: 25,\n  sellvol5: 26\n}\n// 简易一档实时行情\nexport const FIELD_ENOW = {\n  time: 0,\n  open: 1,\n  high: 2,\n  low: 3,\n  close: 4,\n  vol: 5,\n  money: 6,\n  buy1: 7,\n  buyvol1: 8,\n  sell1: 9,\n  sellvol1: 10\n}\n// 指数实时行情\nexport const FIELD_NOW_IDX = {\n  time: 0,\n  open: 1,\n  high: 2,\n  low: 3,\n  close: 4,\n  vol: 5,\n  money: 6,\n  ups: 7,\n  upvol: 8,\n  downs: 9,\n  downvol: 10,\n  mids: 11,\n  midvol: 12\n}\n\n// 股票信息定义\nexport const FIELD_INFO = {\n  marker: 0,\n  code: 1,\n  name: 2, // 股票名称\n  search: 3,\n  type: 4, // 股票类型\n  coinunit: 5, // 保留小数点\n  volunit: 6, // 成交量单位\n  before: 7, // 前收盘\n  stophigh: 8, // 涨停价\n  stoplow: 9 // 跌停价\n}\n\n// 除权字段定义\nexport const FIELD_RIGHT = {\n  time: 0,\n  sendstock: 1, // 10送股 放大1000倍\n  accrual: 2, // 10送红利 放大1000倍\n  allotstock: 3, // 10配股数 放大1000倍\n  allotprice: 4 // 配股价 放大1000倍\n}\n// 财务信息定义\nexport const FIELD_FINANCE = {\n  code: 0,\n  time: 1,\n  flow: 2, // 流通股\n  total: 3, // 总股本\n  earnings: 4 // 每股收益\n}\n// ////////////////////////////////////////\n// 以上为系统默认定义，用户定义数据类型可以放在下面\n// ////////////////////////////////////////\n\nexport const FIELD_TRADE = {\n  time: 0, // 交易时间\n  code: 1, // 股票代码\n  type: 2, // B S 买卖标志\n  price: 3, // 交易价格\n  vol: 4, // 成交量\n  money: 5, // 成交金额\n  info: 6 // 交易参数\n}\n","/**\n * Copyright (c) 2018-present clchart Contributors.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// /////////////////////////////////////////\n// 预先定义好的公式，比如MA等，可在这里扩展公式定义\n// 用户可以自定义公式注册到ClData层，便于系统调用\n// ////////////////////////////////////////\nimport getValue from '../data/cl.data.tools'\n\n/**\n * Class representing ClFormula\n * @export\n * @class ClFormula\n */\nexport class ClFormula {\n  /**\n   * Creates an instance of ClFormula.\n   * @constructor\n   */\n  constructor () {\n    this.source = {\n      data: {},\n      minIndex: 0,\n      maxIndex: 0,\n      nowIndex: 0\n    }\n  }\n  /**\n   * get value from data layer\n   * @param {String} label\n   * @param {Number} offIndex\n   * @return {Array}\n   * @memberof ClFormula\n   */\n  getValue (label, offIndex) { // offIndex 向前偏移offIndex条记录\n    if (label === undefined) return 0\n    if (this.source.data === undefined || this.source.data.value === undefined) return 0\n\n    if (this.source.nowIndex === undefined) this.source.nowIndex = this.source.minIndex\n    const index = this.source.nowIndex - offIndex\n\n    return getValue(this.source.data, label, index)\n  }\n  /**\n   * calculate single stock data by formula\n   * @param {Object} source\n   * @param {String} formula\n   * @return {Array}\n   * @memberof ClFormula\n   */\n  runSingleStock (source, formula) {\n    // fix for Wechat mina not support eval\n    if (!eval) {\n      const singleValue = []\n      const matchData = formula.match(/\\.(\\w+)(\\(.+)/)\n      const funcName = matchData[1]\n      if (typeof this[funcName] !== 'function') {\n        return singleValue\n      }\n      let argStr = matchData[2] || ''\n      argStr = argStr.replace(/\\(|\\)/g, '').split(',')\n      this.source = source\n      for (this.source.nowIndex = this.source.minIndex; this.source.nowIndex <= this.source.maxIndex; this.source.nowIndex++) {\n        const out = this[funcName](...argStr)\n        singleValue.push([this.getValue('idx', 0), out])\n      }\n      return singleValue\n    }\n    const singleValue = []\n    this.source = source\n    const command = `\n    for (this.source.nowIndex = this.source.minIndex;this.source.nowIndex <= this.source.maxIndex;this.source.nowIndex++) {\n          const ${formula}\n          singleValue.push([this.getValue('idx', 0), out]);\n    }`\n    eval(command)\n    return singleValue\n  }\n  // ///////////////////\n  //  自定义公式\n  // /////////////////\n  /**\n   * calculate move averge data\n   * @param {String} label\n   * @param {Number} period\n   * @return {Array}\n   * @memberof ClFormula\n   */\n  MA (label, period) {\n    let off = 0\n    let value = 0\n    for (let m = 0; m < period; m++) {\n      const v = this.getValue(label, m)\n      if (v !== 0) {\n        off++\n        value += v\n      }\n    }\n    return off === 0 ? 0 : value / off\n  }\n  AVGPRC () {\n    let value = 0\n    value = this.getValue('allmoney', 0) / this.getValue('allvol', 0)\n    return value\n  }\n}\n","/**\n * Copyright (c) 2018-present clchart Contributors.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @module DrawUtils */\n\n/**\n * get image data\n * @export\n * @param {Object} context canvas's context\n * @param {Number} xx\n * @param {Number} yy\n * @param {Number} ww\n * @param {Number} hh\n * @return {Object}\n */\nexport function _getImageData (context, xx, yy, ww, hh) {\n  if (context.getImageData) {\n    return context.getImageData(xx, yy, ww, hh)\n  }\n  return undefined\n}\n/**\n * put image data\n * @export\n * @param {Object} context canvas's context\n * @param {Object} img\n * @param {Number} xx\n * @param {Number} yy\n */\nexport function _putImageData (context, img, xx, yy) {\n  if (context.putImageData) {\n    context.putImageData(img, xx, yy)\n  }\n}\n\n/**\n * set line width\n * @export\n * @param {Object} context canvas's context\n * @param {Number} l line width\n */\nexport function _setLineWidth (context, l) {\n  context.lineWidth = l\n}\n\n/**\n * get line width\n * @export\n * @param {Object} context canvas's context\n * @return {Number} line width\n */\nexport function _getLineWidth (context) {\n  return context.lineWidth\n}\n\n// 画竖线\n/**\n * draw vertical line\n * @export\n * @param {Object} context canvas's context\n * @param {Number} xx\n * @param {Number} yy1\n * @param {Number} yy2\n */\nexport function _drawVline (context, xx, yy1, yy2) {\n  context.moveTo(xx, yy1)\n  context.lineTo(xx, yy2)\n}\n// 画横线\n/**\n * draw horizontal line\n * @export\n * @param {Object} context canvas's context\n * @param {Number} xx1\n * @param {Number} xx2\n * @param {Number} yy\n */\nexport function _drawHline (context, xx1, xx2, yy) {\n  context.moveTo(xx1, yy)\n  context.lineTo(xx2, yy)\n}\n// 画斜线\n/**\n * draw line\n * @export\n * @param {Object} context canvas's context\n * @param {Number} xx1\n * @param {Number} yy1\n * @param {Number} xx2\n * @param {Number} yy2\n */\nexport function _drawline (context, xx1, yy1, xx2, yy2) {\n  context.moveTo(xx1, yy1)\n  context.lineTo(xx2, yy2)\n}\n\n/**\n * move to position\n * @export\n * @param {Object} context canvas's context\n * @param {Number} xx\n * @param {Number} yy\n */\nexport function _drawmoveTo (context, xx, yy) {\n  context.moveTo(xx, yy)\n}\n\n/**\n * draw line to\n * @export\n * @param {Object} context canvas's context\n * @param {Number} xx\n * @param {Number} yy\n */\nexport function _drawlineTo (context, xx, yy) {\n  context.lineTo(xx, yy)\n}\n\n// 画空心长方形\n/**\n * draw empty rect\n * @export\n * @param {Object} context canvas's context\n * @param {Number} xx\n * @param {Number} yy\n * @param {Number} ww\n * @param {Number} hh\n */\nexport function _drawRect (context, xx, yy, ww, hh) {\n  context.strokeRect(xx, yy, ww, hh) // 这里的宽度是指不算xx的起始点的宽度，所以你写宽5，实际出来图形是6个像素，\n}\n// 画实心长方形\n/**\n * draw fill rect\n * @export\n * @param {Object} context canvas's context\n * @param {Number} xx\n * @param {Number} yy\n * @param {Number} ww\n * @param {Number} hh\n * @param {String} fillclr\n */\nexport function _fillRect (context, xx, yy, ww, hh, fillclr) {\n  context.fillStyle = fillclr || context.fillStyle\n  context.fillRect(xx, yy, ww, hh)\n}\n/**\n * clear rect\n * @export\n * @param {Object} context canvas's context\n * @param {Number} xx\n * @param {Number} yy\n * @param {Number} ww\n * @param {Number} hh\n */\nexport function _clearRect (context, xx, yy, ww, hh) {\n  context.clearRect(xx, yy, ww, hh)\n}\n// 画实心长方形\n/**\n * fill by color\n * @export\n * @param {Object} context canvas's context\n * @param {String} fillclr\n */\nexport function _fill (context, fillclr) {\n  context.fillStyle = fillclr\n  context.fill()\n}\n// 开始画线\n/**\n * start draw line\n * @export\n * @param {Object} context canvas's context\n * @param {String} clr\n */\nexport function _drawBegin (context, clr) {\n  context.beginPath()\n  context.strokeStyle = clr || context.strokeStyle\n}\n\n// 结束画线\n/**\n * end draw\n * @export\n * @param {Object} context canvas's context\n */\nexport function _drawEnd (context) {\n  context.stroke()\n}\n\n/**\n * get beveling\n * @private\n * @param {Number} x\n * @param {Number} y\n * @return {Number}\n */\nfunction __getBeveling (x, y) {\n  return Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2))\n}\n/**\n * draw dash line\n * @export\n * @param {Object} context canvas's context\n * @param {Number} x1\n * @param {Number} y1\n * @param {Number} x2\n * @param {Number} y2\n * @param {Number} dashLen\n */\nexport function _drawDashLine (context, x1, y1, x2, y2, dashLen) {\n  dashLen = dashLen === undefined ? 5 : dashLen\n  // 得到斜边的总长度\n  const beveling = __getBeveling(x2 - x1, y2 - y1)\n  // 计算有多少个线段\n  const num = Math.floor(beveling / dashLen)\n\n  for (let i = 0; i < num; i++) {\n    context[i % 2 === 0 ? 'moveTo' : 'lineTo'](x1 + (x2 - x1) / num * i, y1 + (y2 - y1) / num * i)\n  }\n  // context.stroke();\n}\n\n// ////////////////////////////\n// 以下显示文字\n// ///////////////////////////\n/**\n * set font size\n * @export\n * @param {Object} context canvas's context\n * @param {String} font\n * @param {Number} pixel\n */\nexport function _setFontSize (context, font, pixel) {\n  context.font = pixel + 'px ' + font\n}\n/**\n * draw text\n * @export\n * @param {Object} context canvas's context\n * @param {Number} xx\n * @param {Number} yy\n * @param {String} txt\n * @param {String} font\n * @param {Number} pixel\n * @param {String} clr\n * @param {Object} pos\n */\nexport function _drawTxt (context, xx, yy, txt, font, pixel, clr, pos) {\n  _setFontSize(context, font, pixel)\n  context.fillStyle = clr || context.fillStyle\n  context.textBaseline = pos ? pos.y || 'top' : 'top' // top（默认）；middle bottom\n  context.textAlign = pos ? pos.x || 'start' : 'start' // start（默认）;center end\n  // 需要将txt转为string类型，不然gcanvas会报错\n  context.fillText(txt.toString(), xx, yy)\n}\n\n/**\n * get text width from charmap by fontsize\n * @param {Object} charMap\n * @param {String} txt\n * @param {Number} fontSize\n * @return {Number}\n */\nfunction getTxtWith (charMap, txt, fontSize) {\n  const scale = fontSize / 12\n  let allWidth = 0\n  for (let i = 0; i < txt.length; i++) {\n    const element = txt[i].toString()\n    if (charMap && charMap[element]) {\n      allWidth += charMap[element].width\n    } else {\n      allWidth += 12\n    }\n  }\n  return allWidth * scale\n}\n/**\n * get text width\n * @export\n * @param {Object} context canvas's context\n * @param {String} txt\n * @param {String} font\n * @param {Number} pixel\n * @return {Number} string width\n */\nexport function _getTxtWidth (context, txt, font, pixel) {\n  _setFontSize(context, font, pixel)\n  let width\n  if (context.measureText) {\n    try {\n      width = context.measureText(txt).width\n    } catch (error) {\n      width = getTxtWith(context.charMap, txt, pixel)\n    }\n    // 简单的计算尺寸返回，这样子计算存在误差，特别是存在中英文的时候\n  } else {\n    width = getTxtWith(context.charMap, txt, pixel)\n  }\n  return width\n}\n// export function _getTxtWidth (context, txt, font, pixel) {\n//   _setFontSize(context, font, pixel)\n//   let width\n//   if (context.measureText) {\n//     try {\n//       width = context.measureText(txt).width\n//     } catch (error) {\n//       // 简单的计算尺寸返回，这样子计算存在误差，特别是存在中英文的时候\n//       width = pixel * txt.length\n//     }\n//   }\n//   return width\n// }\n\n// 获取文字显示的最适合的Rect\n/**\n * get text bound rect\n * @param {Object} context canvas's context\n * @param {String} txt\n * @param {Object} config\n * @return {Object}\n */\nfunction __getTxtRect (context, txt, config) {\n  const spaceX = config.spaceX || 2\n  const spaceY = config.spaceY || 2\n  const len = _getTxtWidth(context, txt, config.font, config.pixel)\n  return { width: len + 2 * spaceX, height: config.pixel + spaceY * 2 }\n}\n// 把文本画在矩形内\n/**\n * draw text rect\n * @export\n * @param {Object} context canvas's context\n * @param {Number} xx\n * @param {Number} yy\n * @param {String} txt\n * @param {Object} config\n */\nexport function _drawTxtRect (context, xx, yy, txt, config) {\n  const spaceX = config.spaceX || 2\n  const spaceY = config.spaceY || 2\n  const tr = __getTxtRect(context, txt, config)\n\n  let xxx, yyy\n  yyy = yy // top\n  xxx = xx // start\n  if (config.y === 'middle') yyy = yy - Math.floor(tr.height / 2) // middle\n  if (config.x === 'end') xxx = xx - tr.width\n  if (config.x === 'center') xxx = xx - Math.floor(tr.width / 2)\n  _fillRect(context, xxx, yyy, tr.width, tr.height, config.bakclr)\n\n  _drawBegin(context, config.clr)\n  _drawRect(context, xxx, yyy, tr.width, tr.height)\n  xxx = xx\n  yyy = yy\n  if (config.x === 'start') xxx = xx + spaceX // ||config.x==='center'\n  if (config.x === 'end') xxx = xx - spaceX\n  if (config.y === 'top') yyy = yy - spaceY\n  _drawTxt(context, xxx, yyy, txt, config.font, config.pixel, config.clr, {\n    x: config.x,\n    y: config.y\n  })\n  _drawEnd(context)\n}\n\n// 画空心圆\n/**\n * draw circle\n * @export\n * @param {Object} context canvas's context\n * @param {Number} x\n * @param {Number} y\n * @param {Number} r\n */\nexport function _drawCircle (context, x, y, r) {\n  context.moveTo(x + r, y)\n  context.arc(x, y, r, 0, Math.PI * 2, true)\n}\n\n// 画实心圆\n/**\n * draw circle center point\n * @param {Object} context canvas's context\n * @param {Number} x\n * @param {Number} y\n * @param {Number} r\n * @param {String} clr\n */\nfunction _drawCircleAndFilled (context, x, y, r, clr) {\n  context.moveTo(x + r, y)\n  context.arc(x, y, r, 0, Math.PI * 2, true)\n  context.fillStyle = clr\n  context.fill()\n}\n\n// 画一根独立的线，不影响后面的画线颜色\n/**\n * draw a alone lien\n * @export\n * @param {Object} context canvas's context\n * @param {Number} xx\n * @param {Number} yy\n * @param {Number} xx1\n * @param {Number} yy1\n * @param {String} clr\n */\nexport function _drawLineAlone (context, xx, yy, xx1, yy1, clr) {\n  const oldclr = context.strokeStyle\n  _drawBegin(context, clr)\n  context.moveTo(xx, yy)\n  context.lineTo(xx1, yy1)\n  _drawEnd(context)\n  context.strokeStyle = oldclr\n}\n\n// 画一个椭圆\n/**\n * draw a ellipse\n * @export\n * @param {Object} context canvas's context\n * @param {Number} x\n * @param {Number} y\n * @param {Number} a\n * @param {Number} b\n * @param {Number} h\n */\nexport function _BezierEllipse (context, x, y, a, b, h) {\n  const k = 0.5522848\n  const ox = a * k // 水平控制点偏移量\n  const oy = b * k // 垂直控制点偏移量\n\n  context.beginPath()\n  // 从椭圆的左端点开始顺时针绘制四条三次贝塞尔曲线\n  if (!h) {\n    context.moveTo(x - a, y)\n    context.bezierCurveTo(x - a, y - oy, x - ox, y - b, x, y - b)\n    context.bezierCurveTo(x + ox, y - b, x + a, y - oy, x + a, y)\n    context.bezierCurveTo(x + a, y + oy, x + ox, y + b, x, y + b)\n    context.bezierCurveTo(x - ox, y + b, x - a, y + oy, x - a, y)\n    context.closePath()\n  } else {\n    context.moveTo(x, y - b)\n    context.bezierCurveTo(x + ox, y - b, x + a, y - oy, x + a, y)\n    context.bezierCurveTo(x + a, y + oy, x + ox, y + b, x, y + b)\n  }\n  context.stroke()\n}\n\n// 画一个LOGO\n/**\n * draw logo\n * @export\n * @param {any} context\n * @param {any} xx\n * @param {any} yy\n * @param {any} size\n */\nexport function _drawLogo (context, xx, yy, size) {\n  context.beginPath()\n  const lw = size\n\n  context.lineWidth = lw\n  context.strokeStyle = '#efefef'\n\n  context.moveTo(xx - 0.5 * lw, yy) // 创建开始点\n  context.lineTo(xx + 5.5 * lw, yy) // 创建水平线\n  context.moveTo(xx, yy) // 创建开始点\n  context.lineTo(xx, yy + 13 * lw) // 创建水平线\n  context.moveTo(xx - 3 * lw, yy + 13 * lw) // 创建开始点\n  context.lineTo(xx + 5.5 * lw, yy + 13 * lw) // 创建水平线\n\n  context.moveTo(xx + 10 * lw, yy + 3.5 * lw)\n  context.lineTo(xx + 13.5 * lw, yy + 3.5 * lw) // 创建水平线\n  context.moveTo(xx + 10 * lw, yy + 9.5 * lw)\n  context.lineTo(xx + 13.5 * lw, yy + 9.5 * lw) // 创建水平线\n  context.stroke()\n\n  _BezierEllipse(context, xx + 5.5 * lw, yy + 6.5 * lw, 5 * lw, 6.5 * lw, true)\n  _BezierEllipse(context, xx + 9 * lw, yy + 6.5 * lw, 5 * lw, 6.5 * lw)\n  context.fillStyle = '#000'\n  context.fillRect(xx + 8.5 * lw, yy + 4 * lw, 6 * lw, 5 * lw)\n}\n\n// ////////////////////////////////////\n// 以下函数只能调用上面的函数,不能直接画图\n// //////////////////////////////////\n\n// data {o,h,l,c}\n/**\n * draw sign plot\n * @export\n * @param {Object} context canvas's context\n * @param {Number} x\n * @param {Number} y\n * @param {Object} Arc1\n * @param {Object} Arc2\n */\nexport function _drawSignPlot (context, x, y, Arc1, Arc2) {\n  if (Arc1 !== undefined && Arc1.r > 0) {\n    _drawBegin(context, Arc1.clr)\n    _drawmoveTo(context, x - Arc1.r, y)\n    _drawlineTo(context, x + Arc1.r, y)\n    _drawlineTo(context, x, y + 2 * Arc1.r)\n    _drawlineTo(context, x - Arc1.r, y)\n    _fill(context, Arc1.clr)\n    _drawCircleAndFilled(context, x, y, Arc1.r, Arc1.clr)\n    _drawEnd(context)\n  }\n  if (Arc2 !== undefined && Arc2.r > 0) {\n    _drawBegin(context, Arc2.clr)\n    _drawCircleAndFilled(context, x, y, Arc2.r, Arc2.clr)\n    _drawEnd(context)\n  }\n}\n/**\n * draw sign circle\n * @export\n * @param {Object} context canvas's context\n * @param {Number} x\n * @param {Number} y\n * @param {Object} Arc1\n * @param {Object} Arc2\n * @param {Object} Arc3\n */\nexport function _drawSignCircle (context, x, y, Arc1, Arc2, Arc3) {\n  if (Arc1 !== undefined && Arc1.r > 0) {\n    _drawBegin(context, Arc1.clr)\n    _drawCircleAndFilled(context, x, y, Arc1.r, Arc1.clr)\n    _drawEnd(context)\n  }\n  if (Arc2 !== undefined && Arc2.r > 0) {\n    _drawBegin(context, Arc2.clr)\n    _drawCircleAndFilled(context, x, y, Arc2.r, Arc2.clr)\n    _drawEnd(context)\n  }\n  if (Arc3 !== undefined && Arc3.r > 0) {\n    _drawBegin(context, Arc3.clr)\n    _drawCircleAndFilled(context, x, y, Arc3.r, Arc3.clr)\n    _drawEnd(context)\n  }\n}\n/**\n * draw sing horizontal line\n * @export\n * @param {Object} context canvas's context\n * @param {Object} config\n * @param {Object} item\n */\nexport function _drawSignHLine (context, config, item) {\n  _drawBegin(context, config.clr)\n  _drawDashLine(context, config.xx, config.yy, config.right - config.pixel / 2, config.yy, 7)\n  _drawEnd(context)\n\n  const spaceX = config.spaceX || config.linew * 2\n  const spaceY = config.spaceY || config.linew\n\n  config.width = config.right - config.xx\n  for (let i = 0; i < item.length; i++) {\n    if (item[i].display === 'false') continue\n    let xx = config.xx + config.width * item[i].set / 100\n    if (item[i].txt === 'arc') {\n      if ((xx + item[i].maxR) > config.right) xx = config.right - item[i].maxR\n      _drawSignCircle(context, xx, config.yy,\n        { r: item[i].maxR, clr: config.clr },\n        { r: item[i].minR, clr: config.bakclr }\n      )\n    } else {\n      const tr = __getTxtRect(context, item[i].txt, {\n        font: config.font, pixel: config.pixel, spaceX, spaceY\n      })\n      if ((xx + tr.width) > config.right) xx = config.right - tr.width\n      let yy = config.yy\n      if (config.top && yy < config.top + tr.height / 2) {\n        yy = config.top + tr.height / 2\n      }\n      if (config.bottom && yy > config.bottom - tr.height / 2) {\n        yy = config.bottom - tr.height / 2\n      }\n      _drawTxtRect(context, xx, yy, item[i].txt, {\n        font: config.font,\n        pixel: config.pixel,\n        clr: config.clr,\n        bakclr: config.bakclr,\n        x: 'start',\n        y: config.y,\n        spaceX,\n        spaceY\n      })\n    }\n  }\n}\n/**\n * draw sign vertical line\n * @export\n * @param {Object} context canvas's context\n * @param {Object} config\n * @param {Object} item\n */\nexport function _drawSignVLine (context, config, item) {\n  _drawBegin(context, config.clr)\n  _drawDashLine(context, config.xx, config.yy, config.xx, config.bottom - config.pixel / 2, 7)\n  _drawEnd(context)\n\n  const spaceX = config.spaceX || config.linew * 2\n  const spaceY = config.spaceY || config.linew\n  config.height = config.bottom - config.yy\n  for (let i = 0; i < item.length; i++) {\n    if (item[i].display === 'false') continue\n    let yy = config.yy + config.height * item[i].set / 100\n\n    if (item[i].txt === 'arc') {\n      if ((yy + item[i].maxR) > config.bottom) yy = config.bottom - item[i].maxR\n      _drawSignCircle(context, config.xx, yy,\n        { r: item[i].maxR, clr: config.clr },\n        { r: item[i].minR, clr: config.bakclr }\n      )\n    } else {\n      const tr = __getTxtRect(context, item[i].txt, {\n        font: config.font, pixel: config.pixel, spaceX, spaceY\n      })\n      if ((yy + tr.height) > config.bottom) yy = config.bottom - tr.height\n      let xx = config.xx\n      if (config.left && xx < config.left + tr.width / 2) {\n        xx = config.left + tr.width / 2\n      }\n      _drawTxtRect(context, xx, yy, item[i].txt, {\n        font: config.font,\n        pixel: config.pixel,\n        clr: config.clr,\n        bakclr: config.bakclr,\n        x: 'center',\n        y: 'middle',\n        spaceX,\n        spaceY\n      })\n    }\n  }\n}\n// { index:k, unitX: unitX, spaceX:spaceX, unitY:unitY,maxmin:mm},\n// data {o,h,l,c}\n/**\n * draw kbar\n * @export\n * @param {Object} context canvas's context\n * @param {Object} config\n * @param {Object} item\n */\nexport function _drawKBar (context, config, item) {\n  const xx = config.rect.left + config.index * (config.unitX + config.spaceX)\n  const xxm = xx + Math.floor(config.unitX / 2)\n  const yyh = config.rect.top + Math.round((config.maxmin.max - item[1]) * config.unitY)\n  const yyl = config.rect.top + config.rect.height - Math.round((item[2] - config.maxmin.min) * config.unitY)\n  let hh\n\n  const yy = config.rect.top + Math.round((config.maxmin.max - item[0]) * config.unitY)\n\n  if (item[0] === item[3]) {\n    hh = 0\n    _drawHline(context, xx, xx + config.unitX, yy)\n    if (item[1] > item[2]) {\n      _drawVline(context, xxm, yyh, yyl)\n    }\n  } else {\n    hh = Math.round((item[0] - item[3]) * config.unitY)\n    _drawVline(context, xxm, yyh, yy)\n    if (config.filled) {\n      _fillRect(context, xx, yy, config.unitX, hh, config.fillclr)\n    } else {\n      _drawRect(context, xx, yy, config.unitX, hh)\n    }\n    _drawVline(context, xxm, yy + hh, yyl)\n  }\n}\n// data {o,h,l,c}\n/**\n * draw volume bar\n * @export\n * @param {Object} context canvas's context\n * @param {Object} config\n * @param {Object} value\n */\nexport function _drawVBar (context, config, value) {\n  const xx = config.rect.left + config.index * (config.unitX + config.spaceX)\n  const yy = config.rect.top + Math.round((config.maxmin.max - value) * config.unitY)\n  const hh = config.rect.top + config.rect.height - yy\n  if (config.filled) {\n    _fillRect(context, xx, yy, config.unitX, hh, config.fillclr)\n  } else {\n    _drawRect(context, xx, yy, config.unitX, hh)\n  }\n}\n\n// ////////////////////////////////////\n// 以下函数为辅助画图的工具函数\n// Adjust 灰度\n// //////////////////////////////////\n// 为传入的16进制颜色增加透明度 ‘#1F1F2F’ -> rgba(...)\n/**\n * transfer color to rgba\n * @export\n * @param {String} scolor\n * @param {Number} trans\n * @param {String} style\n * @return {String}\n */\nexport function _setTransColor (scolor, trans, style) {\n  const reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/\n  let sColor = scolor.toLowerCase()\n  if (sColor && reg.test(sColor)) {\n    if (sColor.length === 4) {\n      let sColorNew = '#'\n      for (let i = 1; i < 4; i += 1) {\n        sColorNew += sColor.slice(i, i + 1).concat(sColor.slice(i, i + 1))\n      }\n      sColor = sColorNew\n    }\n    // 处理六位的颜色值\n    const sColorChange = []\n    for (let i = 1; i < 7; i += 2) {\n      sColorChange.push(parseInt('0x' + sColor.slice(i, i + 2)))\n    }\n    // 效果处理\n    switch (style) {\n      case 'adjust':\n        const r = sColorChange[0]\n        const g = sColorChange[1]\n        const b = sColorChange[2]\n        sColorChange[0] = (r * 0.272) + (g * 0.534) + (b * 0.131)\n        sColorChange[1] = (r * 0.349) + (g * 0.686) + (b * 0.168)\n        sColorChange[2] = (r * 0.393) + (g * 0.769) + (b * 0.189)\n        break\n    }\n    sColor = sColorChange.join(',')\n    trans = trans || 1\n    return 'rgba(' + sColor + ',' + trans + ')'\n  } else {\n    return sColor\n  }\n}\n","/**\n * Copyright (c) 2018-present clchart Contributors.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport getValue from '../data/cl.data.tools'\n\n// ///////////////////////////////////////\n// 和定位相关基本函数\n// //////////////////////////////////////\n\n/** @module ChartTools */\n\n/**\n * According to the label in the data to find a matching record number\n * @export\n * @param {Object} data\n * @param {Number} findvalue\n * @param {String} label\n * @return {Number}\n */\nexport function findLabelToIndex (data, findvalue, label) {\n  for (let idx = 0; idx <= data.value.length - 1; idx++) {\n    if (findvalue === getValue(data, label, idx)) {\n      return idx\n    }\n  }\n  return -1\n}\n// 查找最匹配time的记录号，direction为forword的时候表示从后面向前开始寻找，\n/**\n * Find the record number that matches the time. When the direction is forword, it means to start looking from behind.\n * @export\n * @param {Object} data\n * @param {Number} findvalue\n * @param {String} label\n * @param {String} direction\n * @return {Number}\n */\nexport function findNearTimeToIndex (data, findvalue, label, direction) {\n  if (label === undefined) label = 'time'\n  if (direction && direction === 'forword') {\n    for (let idx = data.value.length - 1; idx >= 0; idx--) {\n      if (getValue(data, label, idx) > findvalue) continue\n      return idx\n    }\n  } else {\n    for (let idx = 0; idx <= data.value.length - 1; idx++) {\n      if (getValue(data, label, idx) < findvalue) continue\n      return idx\n    }\n  }\n  return -1\n}\n/**\n * Specifically dealing with the time-sharing map and the 5-day map all this data will be smaller than the interface, in this case elementW is generally only one pixel\n * @export\n * @param {Object} info\n * @param {Object} config\n */\nexport function setFixedLineFlags (info, config) {\n  info.showMode = 'fixed'\n  info.fixed = {\n    min: 0,\n    max: config.maxCount - 1,\n    left: 0,\n    right: 0\n  }\n  info.minIndex = 0\n  info.maxIndex = config.size - 1\n  // 5日线时 spaceX初始值设为0\n  info.maxCount = config.maxCount > 1 ? config.maxCount : 2\n  info.unitX = config.scale\n  info.spaceX = config.width / info.maxCount - info.unitX\n}\n/**\n * In this case spaceX requires a minimum of one pixel\n * @export\n * @param {Object} info\n * @param {Object} config\n */\nexport function setMoveLineFlags (info, config) {\n  const spaceX = info.unitX / 4\n  info.spaceX = spaceX < config.scale ? config.scale : spaceX\n  info.maxCount = Math.floor(config.width / (info.unitX + info.spaceX)) // 整个图形区域最大显示记录数\n  const offset = info.maxCount > config.size ? config.size : info.maxCount\n\n  switch (info.showMode) {\n    case 'fixed':\n    // 要根据fixed的最大最小值，合并数据\n      info.maxIndex = config.size - 1\n      info.minIndex = config.size - offset\n      break\n    case 'locked':\n      // info.locked.index = config.index ? config.index : info.locked.index;\n      // 把需要锁定的记录初始化，如果没有值就取当前画面中间的值\n      // info.locked.set = config.set ? config.set : info.locked.set;\n      break\n    case 'move':\n      break\n    default: // case 'last':\n      info.maxIndex = config.size - 1\n      info.minIndex = config.size - offset\n      break\n  }\n}\n","/**\n * Copyright (c) 2018-present clchart Contributors.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @module SystemConfig */\n\nimport {\n  copyJsonOfDeep\n} from '../util/cl.tool'\n\nimport * as drawClass from '../util/cl.draw'\n\n/**\n * @constant\n */\nexport const COLOR_WHITE = {\n  sys: 'white',\n  line: ['#4048cc', '#dd8d2d', '#168ee0', '#ad7eac', '#ff8290', '#ba1215'],\n  back: '#fafafa',\n  txt: '#2f2f2f',\n  baktxt: '#2f2f2f',\n  axis: '#7f7f7f',\n  grid: '#cccccc',\n  red: '#ff6a6c',\n  green: '#32cb47',\n  white: '#7e7e7e',\n  vol: '#dd8d2d',\n  button: '#888888',\n  colume: '#41bfd0',\n  box: '#ddf4df',\n  code: '#3f3f3f'\n}\n/**\n * @constant\n */\nexport const COLOR_BLACK = {\n  sys: 'black',\n  line: ['#efefef', '#fdc104', '#5bbccf', '#ad7eac', '#bf2f2f', '#cfcfcf'],\n  back: '#232323',\n  txt: '#bfbfbf',\n  baktxt: '#2f2f2f',\n  axis: '#afafaf',\n  grid: '#373737',\n  red: '#ff6a6c',\n  green: '#6ad36d',\n  white: '#9f9f9f',\n  vol: '#fdc104',\n  button: '#9d9d9d',\n  colume: '#41bfd0',\n  box: '#373737',\n  code: '#41bfd0'\n}\n/**\n * @constant\n */\nexport const CHART_WIDTH_MAP = {\n  '0': {\n    'width': 7.1999969482421875\n  },\n  '1': {\n    'width': 4.8119964599609375\n  },\n  '2': {\n    'width': 7.1999969482421875\n  },\n  '3': {\n    'width': 7.1999969482421875\n  },\n  '4': {\n    'width': 7.1999969482421875\n  },\n  '5': {\n    'width': 7.1999969482421875\n  },\n  '6': {\n    'width': 7.1999969482421875\n  },\n  '7': {\n    'width': 6.563995361328125\n  },\n  '8': {\n    'width': 7.1999969482421875\n  },\n  '9': {\n    'width': 7.1999969482421875\n  },\n  '.': {\n    'width': 3.167999267578125\n  },\n  ',': {\n    'width': 3.167999267578125\n  },\n  '%': {\n    'width': 11.639999389648438\n  },\n  ':': {\n    'width': 3.167999267578125\n  },\n  ' ': {\n    'width': 3.9959869384765625\n  },\n  'K': {\n    'width': 8.279998779296875\n  },\n  'V': {\n    'width': 7.667999267578125\n  },\n  'O': {\n    'width': 9.203994750976562\n  },\n  'L': {\n    'width': 7.055999755859375\n  },\n  '-': {\n    'width': 7.2599945068359375\n  },\n  '[': {\n    'width': 3.9959869384765625\n  },\n  ']': {\n    'width': 3.9959869384765625\n  }\n}\n\n/**\n * The following several variables must be established when the system is established, which is a common configuration for everyone.\n */\nconst _systemInfo = {\n  runPlatform: 'normal', // 'react-native' | 'mina' | 'web'\n  axisPlatform: 'web', // 'web' | 'phone'\n  eventPlatform: 'web', // 'react-native' | 'mina' | 'web'\n  scale: 1, // Set the zoom ratio according to the dpi of different display devices\n  standard: 'china', // 'usa' | 'china' Drawing standards to support the United States and China\n  sysColor: 'black', // 'white' | 'black'\n  charMap: CHART_WIDTH_MAP, // Used to help degrade font width calculations for some platforms that do not support context measures\n  mainCanvas: {}, // Main canvas\n  cursorCanvas: {} // Cursor canvas\n}\n/**\n * set paint standard\n * @export\n * @param {any} standard\n */\nexport function setStandard (standard) {\n  _systemInfo.standard = standard || 'china'\n}\n/**\n * set system color\n * @export\n * @param {String} syscolor drawing theme\n * @returns system color\n */\nexport function setColor (syscolor) {\n  let color = {}\n  if (syscolor === 'white') {\n    color = copyJsonOfDeep(COLOR_WHITE)\n  } else {\n    color = copyJsonOfDeep(COLOR_BLACK)\n  }\n  // The contrast between the rise and fall of the US market and the Chinese market is opposite\n  if (_systemInfo.standard === 'usa') {\n    const clr = color.red\n    color.red = color.green\n    color.green = clr\n  }\n  // Update the current system color\n  _systemInfo.color = color\n  return color\n}\n/**\n * Used to help those platforms that don't support measureText, degraded calculation font span\n * @export\n * @param {Object} context canvas context\n * @param {String} txt text\n * @param {String} font font family\n * @param {Number} pixel font size\n * @return {Number} text width\n */\nexport function _getOtherTxtWidth (context, txt, font, pixel) {\n  const ww = _systemInfo.other.width\n  const hh = _systemInfo.other.height\n  drawClass._fillRect(0, 0, ww, hh, '#000')\n  drawClass._drawTxt(_systemInfo.other.context, 0, 0, txt, font, pixel, '#fff')\n  const imgData = _systemInfo.other.context.getImageData(0, 0, ww, hh).data\n  let width = 0\n  for (let i = 0; i < imgData.length; /* i += 4 */) {\n    if (imgData.data[i + 0] !== 0 || imgData.data[i + 1] !== 0 ||\n      imgData.data[i + 2] !== 0 || imgData.data[i + 3] !== 255) {\n      i += 4\n      width++\n    } else {\n      i += 4 * ww\n    }\n  }\n  return width\n}\n/**\n * set system scale\n * @export\n * @param {Object} canvas\n * @param {Number} scale\n * @return {Object}\n */\nexport function setScale (canvas, scale) {\n  canvas.width = canvas.clientWidth * scale\n  canvas.height = canvas.clientHeight * scale\n  return {\n    width: canvas.width,\n    height: canvas.height\n  }\n}\n/**\n * init system\n * @export\n * @param {Object} cfg system config\n * @return {Object} all system config\n */\nexport function initSystem (cfg) {\n  if (cfg === undefined) return\n  for (const key in _systemInfo) {\n    _systemInfo[key] = cfg[key] || _systemInfo[key]\n  }\n  _systemInfo.mainCanvas.canvas = cfg.mainCanvas.canvas\n  _systemInfo.mainCanvas.context = cfg.mainCanvas.context\n  _systemInfo.mainCanvas.context.charMap = _systemInfo.charMap\n  _systemInfo.cursorCanvas.canvas = cfg.cursorCanvas.canvas\n  _systemInfo.cursorCanvas.context = cfg.cursorCanvas.context\n  _systemInfo.cursorCanvas.context.charMap = _systemInfo.charMap\n\n  _systemInfo.color = setColor(_systemInfo.sysColor)\n\n  if (_systemInfo.runPlatform === 'normal') {\n    if (_systemInfo.mainCanvas.canvas !== undefined && _systemInfo.scale !== 1) {\n      setScale(_systemInfo.mainCanvas.canvas, _systemInfo.scale)\n      setScale(_systemInfo.cursorCanvas.canvas, _systemInfo.scale)\n    }\n  }\n  return _systemInfo\n}\n\n/**\n * Bind some basic properties when some chart objects are initialized\n * @export\n * @param {Object} chart\n * @param {Object} father\n */\nexport function initCommonInfo (chart, father) {\n  chart.father = father\n  chart.context = father.context\n  chart.scale = _systemInfo.scale\n  chart.color = _systemInfo.color\n  chart.axisPlatform = _systemInfo.axisPlatform\n  chart.eventPlatform = _systemInfo.eventPlatform\n}\n/**\n * checkout layout\n * @export\n * @param {Object} layout\n */\nexport function checkLayout (layout) {\n  const scale = _systemInfo.scale\n  layout.margin.top *= scale\n  layout.margin.left *= scale\n  layout.margin.bottom *= scale\n  layout.margin.right *= scale\n\n  layout.offset.top *= scale\n  layout.offset.left *= scale\n  layout.offset.bottom *= scale\n  layout.offset.right *= scale\n\n  layout.title.pixel *= scale\n  layout.title.height *= scale\n  layout.title.spaceX *= scale\n  layout.title.spaceY *= scale\n\n  if (layout.title.height < (layout.title.pixel + layout.title.spaceY + 2 * scale)) {\n    layout.title.height = layout.title.pixel + layout.title.spaceY + 2 * scale\n  }\n\n  layout.axisX.pixel *= scale\n  layout.axisX.width *= scale\n  layout.axisX.height *= scale\n  layout.axisX.spaceX *= scale\n\n  layout.scroll.pixel *= scale\n  layout.scroll.size *= scale\n  layout.scroll.spaceX *= scale\n\n  layout.digit.pixel *= scale\n  layout.digit.height *= scale\n  layout.digit.spaceX *= scale\n\n  if (layout.digit.height < (layout.digit.pixel + 2 * scale)) {\n    layout.digit.height = layout.digit.pixel + 2 * scale\n  }\n\n  layout.symbol.size *= scale\n  layout.symbol.spaceX *= scale\n  layout.symbol.spaceY *= scale\n}\n/**\n * Change mouse style\n * @export\n * @param {String} style\n */\nexport function changeCursorStyle (style) {\n  if (_systemInfo.eventPlatform === 'html5') {\n    _systemInfo.mainCanvas.canvas.style.cursor = style\n    _systemInfo.cursorCanvas.canvas.style.cursor = style\n  }\n}\n/**\n * Get system line color\n * @export\n * @param {Number} index\n * @return {String}\n */\nexport function getLineColor (index) {\n  if (index === undefined) index = 0\n  return _systemInfo.color.line[index % _systemInfo.color.line.length]\n}\n","/**\n * Copyright (c) 2018-present clchart Contributors.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// //////////////////////////////////////////////////\n// 以下是 ClLineKBar 的实体定义\n// //////////////////////////////////////////////////\n\nimport {\n  _drawBegin,\n  _drawEnd,\n  // _setTransColor,\n  _drawKBar\n} from '../util/cl.draw'\nimport getValue from '../data/cl.data.tools'\nimport {\n  initCommonInfo\n} from '../chart/cl.chart.init'\n\n// 创建时必须带入父类，后面的运算定位都会基于父节点进行；\n// 这个类仅仅是画图, 因此需要把可以控制的rect传入进来\n/**\n * Class representing ClDrawKBar\n * @export\n * @class ClDrawKBar\n */\nexport default class ClDrawKBar {\n  /**\n\n   * Creates an instance of ClDrawKBar.\n   * @param {Object} father\n   * @param {Object} rectMain\n   */\n  constructor (father, rectMain) {\n    initCommonInfo(this, father)\n    this.rectMain = rectMain\n\n    this.linkInfo = father.father.linkInfo\n    this.source = father.father\n    this.maxmin = father.maxmin\n  }\n  /**\n   * paint\n   * @param {String} key\n   * @memberof ClDrawKBar\n   */\n  onPaint (key) {\n    if (key !== undefined) this.hotKey = key\n    this.data = this.source.getData(this.hotKey)\n    this.codeInfo = this.source.getData('INFO')\n\n    let clr = this.color.red\n    // clr = _setTransColor(clr, 1, 'adjust')\n    // clr = _setTransColor(clr, 0.7)\n    _drawBegin(this.context, clr)\n    let open, close\n    let before = getValue(this.codeInfo, 'before', 0)\n    for (let k = 0, idx = this.linkInfo.minIndex; idx <= this.linkInfo.maxIndex; k++, idx++) {\n      if (idx > 0) before = getValue(this.data, 'close', idx - 1)\n      open = getValue(this.data, 'open', idx)\n      close = getValue(this.data, 'close', idx)\n      if (open < close || (open === close && close >= before)) {\n      // getValue(this.data, 'high', idx),\n      // getValue(this.data, 'low', idx));\n        _drawKBar(this.context, {\n          filled: this.color.sys === 'white',\n          index: k,\n          spaceX: this.linkInfo.spaceX,\n          unitX: this.linkInfo.unitX,\n          unitY: this.maxmin.unitY,\n          maxmin: this.maxmin,\n          rect: this.rectMain,\n          fillclr: clr\n        },\n        [close,\n          getValue(this.data, 'high', idx),\n          getValue(this.data, 'low', idx),\n          open\n        ])\n      }\n    }\n    _drawEnd(this.context)\n    clr = this.color.green\n    // clr = _setTransColor(clr, 1, 'adjust')\n    // clr = _setTransColor(clr, 0.7)\n    _drawBegin(this.context, clr)\n    for (let k = 0, idx = this.linkInfo.minIndex; idx <= this.linkInfo.maxIndex; k++, idx++) {\n      if (idx > 0) before = getValue(this.data, 'close', idx - 1)\n      open = getValue(this.data, 'open', idx)\n      close = getValue(this.data, 'close', idx)\n      if (open > close || (open === close && close < before)) {\n        // getValue(this.data, 'high', idx),\n        // getValue(this.data, 'low', idx));\n        _drawKBar(this.context, {\n          filled: true,\n          index: k,\n          spaceX: this.linkInfo.spaceX,\n          unitX: this.linkInfo.unitX,\n          unitY: this.maxmin.unitY,\n          maxmin: this.maxmin,\n          rect: this.rectMain,\n          fillclr: clr\n        },\n        [open,\n          getValue(this.data, 'high', idx),\n          getValue(this.data, 'low', idx),\n          close\n        ])\n      }\n    }\n    _drawEnd(this.context)\n  }\n}\n","/**\n * Copyright (c) 2018-present clchart Contributors.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// //////////////////////////////////////////////////\n// 以下是 ClLineKBar 的实体定义\n// //////////////////////////////////////////////////\n\nimport {\n  _drawBegin,\n  _drawEnd,\n  _drawmoveTo,\n  _drawlineTo\n} from '../util/cl.draw'\nimport getValue from '../data/cl.data.tools'\nimport {\n  initCommonInfo,\n  getLineColor\n} from '../chart/cl.chart.init'\nimport {\n  inRect\n} from '../util/cl.tool'\n\n/**\n * Class representing ClDrawLine\n * @export\n * @class ClDrawLine\n */\nexport default class ClDrawLine {\n  /**\n\n   * Creates an instance of ClDrawLine.\n   * @param {Object} father\n   * @param {Object} rectMain\n   */\n  constructor (father, rectMain) {\n    initCommonInfo(this, father)\n    this.rectMain = rectMain\n\n    this.linkInfo = father.father.linkInfo\n    this.source = father.father\n\n    this.maxmin = father.maxmin\n  }\n  /**\n   * paint\n   * @param {String} key\n   * @memberof ClDrawLine\n   */\n  onPaint (key) {\n    if (key !== undefined) this.hotKey = key\n    this.data = this.source.getData(this.hotKey)\n\n    if (this.info.labelX === undefined) this.info.labelX = 'idx'\n    if (this.info.labelY === undefined) this.info.labelY = 'value'\n    // 分钟线为‘close’\n\n    let xx, yy\n    let isBegin = false\n    let idx\n    let count = 0\n    let clr\n    if (this.info.color === undefined) {\n      clr = getLineColor(this.info.colorIndex)\n    } else {\n      clr = this.color[this.info.color]\n    }\n\n    _drawBegin(this.context, clr)\n    for (let k = this.linkInfo.minIndex, index = 0; k <= this.linkInfo.maxIndex; k++, index++) {\n      if (this.info.showSort === undefined) {\n        idx = index\n      } else {\n        idx = getValue(this.data, this.info.showSort, index)\n      }\n      // if (getValue(this.data, this.info.labelX, index) < 0) continue;\n      xx = this.rectMain.left + idx * (this.linkInfo.unitX + this.linkInfo.spaceX)\n      yy = this.rectMain.top + Math.round((this.maxmin.max - getValue(this.data, this.info.labelY, index)) * this.maxmin.unitY)\n      if (Math.floor(idx / this.info.skips) > count) {\n        count = Math.floor(idx / this.info.skips)\n        isBegin = false\n      }\n      if (!isBegin) {\n        isBegin = inRect(this.rectMain, { x: xx, y: yy })\n        if (isBegin) _drawmoveTo(this.context, xx, yy)\n        continue\n      }\n      _drawlineTo(this.context, xx, yy)\n    }\n    _drawEnd(this.context)\n  }\n}\n","/**\n * Copyright (c) 2018-present clchart Contributors.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// //////////////////////////////////////////////////\n// 以下是 ClLineRight 的实体定义\n// //////////////////////////////////////////////////\n\nimport {\n  _getTxtWidth,\n  _drawTxt\n} from '../util/cl.draw'\nimport {\n  findNearTimeToIndex\n} from './cl.chart.tools'\nimport getValue, {\n  getSize\n} from '../data/cl.data.tools'\nimport {\n  initCommonInfo\n} from '../chart/cl.chart.init'\n// 创建时必须带入父类，后面的运算定位都会基于父节点进行；\n// 这个类仅仅是画图, 因此需要把可以控制的rect传入进来\n/**\n * Class representing ClDrawRight\n * @export\n * @class ClDrawRight\n */\nexport default class ClDrawRight {\n  /**\n\n   * Creates an instance of ClDrawRight.\n   * @param {Object} father\n   * @param {Object} rectMain\n   */\n  constructor (father, rectMain) {\n    initCommonInfo(this, father)\n    this.rectMain = rectMain\n\n    this.linkInfo = father.father.linkInfo\n    this.source = father.father\n    this.symbol = father.layout.symbol\n  }\n  /**\n   * paint\n   * @param {String} key\n   * @memberof ClDrawRight\n   */\n  onPaint (key) {\n    if (key !== undefined) this.hotKey = key\n    this.data = this.source.getData(this.hotKey)\n    this.rightData = this.source.getData('RIGHT')\n    if (getSize(this.rightData) < 1) return\n\n    const len = _getTxtWidth(this.context, '▲', this.symbol.font, this.symbol.pixel)\n    for (let i = 0; i < this.rightData.value.length; i++) {\n      const idx = findNearTimeToIndex(this.data, getValue(this.rightData, 'time', i))\n      const offset = idx - this.linkInfo.minIndex\n      const xx = this.rectMain.left + offset * (this.linkInfo.unitX + this.linkInfo.spaceX) + Math.floor(this.linkInfo.unitX / 2)\n      if (xx < this.rectMain.left) {\n        continue\n      }\n      let clr = this.color.button\n      if (this.linkInfo.rightMode !== 'no') clr = this.color.vol\n      _drawTxt(this.context, xx - Math.floor(len / 2), this.rectMain.top + this.rectMain.height - this.symbol.pixel - this.symbol.spaceY,\n        '▲', this.symbol.font, this.symbol.pixel, clr, { y: 'top' })\n    }\n  }\n}\n","/**\n * Copyright (c) 2018-present clchart Contributors.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// //////////////////////////////////////////////////\n// 以下是 ClLineKBar 的实体定义\n// //////////////////////////////////////////////////\n\nimport {\n  _drawBegin,\n  _drawEnd,\n  _drawLineAlone,\n  _drawmoveTo,\n  _drawlineTo\n} from '../util/cl.draw'\nimport getValue from '../data/cl.data.tools'\nimport {\n  initCommonInfo,\n  getLineColor\n} from '../chart/cl.chart.init'\n/**\n * Class representing ClDrawVLine\n * @export\n * @class ClDrawVLine\n */\nexport default class ClDrawVLine {\n  /**\n\n   * Creates an instance of ClDrawVLine.\n   * @param {Object} father\n   * @param {Object} rectMain\n   */\n  constructor (father, rectMain) {\n    initCommonInfo(this, father)\n    this.rectMain = rectMain\n    // this.rectMain = {\n    //   left:rectMain.left,\n    //   top:rectMain.top,\n    //   width:rectMain.width,\n    //   height:rectMain.height\n    // };\n    this.linkInfo = father.father.linkInfo\n    this.source = father.father\n    this.maxmin = father.maxmin\n  }\n  /**\n   * paint\n   * @param {String} key\n   * @memberof ClDrawVLine\n   */\n  onPaint (key) {\n    if (key !== undefined) this.hotKey = key\n    this.data = this.source.getData(this.hotKey)\n\n    if (this.info.labelX === undefined) this.info.labelX = 'time'\n    if (this.info.labelY === undefined) this.info.labelY = 'vol'\n\n    let xx, yy, value\n    let idx\n    let clr\n    if (this.info.color === undefined) {\n      clr = getLineColor(this.info.colorIndex)\n    } else {\n      clr = this.color[this.info.color]\n    }\n\n    _drawBegin(this.context, clr)\n    for (let k = this.linkInfo.minIndex, index = 0; k <= this.linkInfo.maxIndex; k++, index++) {\n      if (this.info.showSort === undefined) {\n        idx = index\n      } else {\n        idx = getValue(this.data, this.info.showSort, index)\n      }\n      // if (getValue(this.data, this.info.labelX, index) < 0) continue;\n      xx = this.rectMain.left + Math.floor(idx * (this.linkInfo.spaceX + this.linkInfo.unitX))\n      value = getValue(this.data, this.info.labelY, k)\n      if (value < 0) continue\n      yy = this.rectMain.top + Math.round((this.maxmin.max - value) * this.maxmin.unitY)\n      if (yy < this.rectMain.top) {\n        yy = this.rectMain.top + 1\n        _drawLineAlone(this.context, xx, this.rectMain.top + this.rectMain.height - 1, xx, yy, this.color.white)\n        continue\n      }\n      _drawmoveTo(this.context, xx, this.rectMain.top + this.rectMain.height - 1)\n      _drawlineTo(this.context, xx, yy)\n    }\n    _drawEnd(this.context)\n  }\n}\n","/**\n * Copyright (c) 2018-present clchart Contributors.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport ClDrawKBar from './chart/cl.draw.kbar'\nimport ClDrawLine from './chart/cl.draw.line'\nimport ClDrawRight from './chart/cl.draw.right'\nimport ClDrawVBar from './chart/cl.draw.vbar'\nimport ClDrawVLine from './chart/cl.draw.vline'\n\n/** @module ClChartDef */\n\n/**\n * chart main layout config\n */\nexport const CHART_LAYOUT = {\n  margin: {\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0\n  },\n  offset: {\n    left: 2,\n    top: 2,\n    right: 2,\n    bottom: 0\n  },\n  title: {\n    pixel: 12,\n    height: 18,\n    spaceX: 10,\n    spaceY: 2,\n    font: 'sans-serif'\n  },\n  axisX: {\n    pixel: 12,\n    height: 18,\n    width: 50,\n    spaceX: 2,\n    font: 'sans-serif'\n  },\n  scroll: {\n    pixel: 12,\n    size: 15,\n    spaceX: 10,\n    font: 'sans-serif'\n  },\n  digit: {\n    pixel: 12,\n    height: 16,\n    spaceX: 3,\n    font: 'sans-serif'\n  },\n  symbol: {\n    pixel: 10,\n    size: 18,\n    spaceX: 3,\n    font: 'sans-serif'\n  }\n}\n\n/**\n * chart buttons config\n */\nexport const CHART_BUTTONS = [\n  { key: 'zoomin' },\n  { key: 'zoomout' },\n  { key: 'exright' }\n]\n\n/**\n * chart order config\n */\nexport const CHART_ORDER = {\n  style: 'normal', // 'tiny' only shows buy one sell one 'normal' 5 orders\n  title: {\n    display: 'text' // 'text' or 'none','none' does not display btn button text\n  }\n}\n\nconst ZOOM_INFO_DEF = {\n  index: 3,\n  list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n}\n\n/**\n * chart kbar layout config\n */\nexport const CHART_KBAR = {\n  // buttons: ['zoomin', 'exright', 'zoomout'],\n  // title: { display: 'none' },\n  // scroll: {display: 'none'},\n  zoomInfo: ZOOM_INFO_DEF,\n  scroll: {\n    display: 'none' // 'none' does not show\n  },\n  title: {\n    display: 'text', // none does not show btn button text\n    label: 'K线' // label information to be displayed\n  },\n  axisX: {\n    lines: 0,\n    display: 'none', // 'none' | 'both' | 'block', 'none' does not show, 'both': show both, 'block': displays a value for each block based on lines = display coordinates\n    type: 'normal', // 'normal' | 'day1' | 'day5'\n    format: 'date' // date time datetime normal tradetime(9:30)\n  },\n  axisY: {\n    lines: 3,\n    left: {\n      display: 'both', // none不显示, both, noupper 不显示最上面, nofoot不显示最下面 = 显示坐标\n      middle: 'none', // 是否有中间值 'before'=前收盘 ‘zero’ 0为中间值\n      format: 'price' // 输出数据的格式 rate, price 保留一定小数位 vol 没有小数\n    },\n    right: {\n      display: 'both', // none不显示，noupper 不显示最上面, nofoot不显示最下面 = 显示坐标\n      middle: 'none', // 是否有中间值 'before'=前收盘 ‘zero’ 0为中间值\n      format: 'price' // rate, price vol\n    }\n  },\n  lines: [{\n    // type: 'l_kbar',\n    className: ClDrawKBar,\n    extremum: { // 如何取极值\n      method: 'normal', // fixedLeft fixedRight 上下固定,此时需要取axisY.middle的定义\n      maxvalue: ['high'], // 参与计算最大值的标签\n      minvalue: ['low'] // 参与计算最小值的标签\n    }\n    // 第一根线默认的key是跟随chart的hotKey变化而变化的，其他线要么自己有数据，要么根据hotKey加上公式计算出自己的key\n  },\n  {\n    className: ClDrawRight\n  },\n  {\n    className: ClDrawLine,\n    info: { // 输出在信息栏目的数据\n      txt: '5:',\n      labelY: 'value', // 从key中获取对应的数据标签 用于显示信息用\n      format: 'price'\n    },\n    formula: { // 数据生成方式，都需要基于基本数据，没有formula表示取绑定的数据\n      key: 'DAYM1', // 生成和获取数据的key，\n      command: `out = this.MA('close',5)` // 公式只能输出值到out中\n    }\n  },\n  {\n    className: ClDrawLine,\n    info: {\n      txt: '10:',\n      labelY: 'value',\n      format: 'price'\n    },\n    formula: {\n      key: 'DAYM2', // 获取数据的key，\n      command: `out = this.MA('close',10)` // 公式只能输出值到out中\n    }\n  },\n  {\n    className: ClDrawLine,\n    info: {\n      txt: '20:',\n      labelY: 'value',\n      format: 'price'\n    },\n    formula: {\n      key: 'DAYM3', // 获取数据的key，\n      command: `out = this.MA('close',20)` // 公式只能输出值到out中\n    }\n  },\n  {\n    className: ClDrawLine,\n    info: {\n      txt: '60:',\n      labelY: 'value',\n      format: 'price'\n    },\n    formula: {\n      key: 'DAYM4', // 获取数据的key，\n      command: `out = this.MA('close',60)` // 公式只能输出值到out中\n    }\n  }]\n}\n\n/**\n * chart vbar layout config\n */\nexport const CHART_VBAR = {\n  zoomInfo: ZOOM_INFO_DEF,\n  title: {\n    display: 'text', // none 不显示 btn 按钮 text 文字\n    label: 'VOL' // 需要显示的文字信息\n  },\n  axisX: {\n    lines: 0,\n    display: 'both', // 左右两边显示\n    type: 'normal', // 有 day1 day5 和 normal 三种模式\n    format: 'date' // date time datetime normal tradetime：根据交易时间此时label无用 = 显示的信息方式\n  },\n  axisY: {\n    lines: 1,\n    left: {\n      display: 'nofoot',\n      middle: 'none',\n      format: 'vol'\n    },\n    right: {\n      display: 'nofoot',\n      middle: 'none',\n      format: 'vol'\n    }\n  },\n  lines: [{\n    className: ClDrawVBar,\n    extremum: { // 如何取极值\n      method: 'normal', // fixedLeft fixedRight 上下固定,此时需要取axisY.middle的定义\n      maxvalue: ['vol'], // 参与计算最大值的标签\n      minvalue: [0] // 参与计算最小值的标签\n    },\n    info: {\n      labelY: 'vol', // 需要显示的变量，从key中获取对应的数据标签\n      format: 'vol'\n    }\n  },\n  {\n    className: ClDrawLine,\n    info: {\n      txt: '5:',\n      labelY: 'value', // 需要显示的变量，从key中获取对应的数据标签\n      format: 'vol'\n    },\n    formula: {\n      key: 'MVOL1', // 获取数据的key，\n      command: `out = this.MA('vol',5)` // 公式只能输出值到out中\n    }\n  },\n  {\n    className: ClDrawLine,\n    info: {\n      txt: '10:',\n      labelY: 'value', // 需要显示的变量，从key中获取对应的数据标签\n      format: 'vol'\n    },\n    formula: {\n      key: 'MVOL2', // 获取数据的key，\n      command: `out = this.MA('vol',10)` // 公式只能输出值到out中\n    }\n  },\n  {\n    className: ClDrawLine,\n    info: {\n      txt: '20:',\n      labelY: 'value', // 需要显示的变量，从key中获取对应的数据标签\n      format: 'vol'\n    },\n    formula: {\n      key: 'MVOL3', // 获取数据的key，\n      command: `out = this.MA('vol',20)` // 公式只能输出值到out中\n    }\n  }]\n}\n\n/**\n * chart now config\n */\nexport const CHART_NOW = {\n  title: {\n    display: 'none' // none 不显示 btn 按钮 text 文字\n  },\n  axisX: {\n    lines: 3,\n    display: 'none', // none不显示，sides：两边各一个值, block：根据块大小每个块显示一个值 = 显示坐标\n    type: 'day1', // 有 day1 day5 和 normal 三种模式\n    format: 'tradetime'\n  },\n  axisY: {\n    lines: 3,\n    left: {\n      display: 'both', // none不显示，all, noupper不显示最上面, nofoot不显示最下面 = 显示坐标\n      middle: 'before', // 是否有中间值 'before'=前收盘 ‘zero’ 0为中间值\n      format: 'price' // 输出数据的格式 rate, price, vol\n    },\n    right: {\n      display: 'both', // none不显示，noupper不显示最上面, nofoot不显示最下面 = 显示坐标\n      middle: 'before', // 是否有中间值 'before'=前收盘 ‘zero’ 0为中间值\n      format: 'rate' // rate, price vol\n    }\n  },\n  lines: [{\n    className: ClDrawLine,\n    extremum: { // 如何取极值\n      method: 'fixedLeft', // fixedLeft fixedRight 上下固定,此时需要取axisY.middle的定义\n      maxvalue: ['high'], // 参与计算最大值的标签\n      minvalue: ['low'] // 参与计算最小值的标签\n    },\n    info: {\n      labelX: 'idx',\n      labelY: 'close',\n      showSort: 'idx'\n    }\n  },\n  {\n    className: ClDrawLine,\n    info: {\n      showSort: 'idx'\n    },\n    formula: {\n      key: 'NOWM1', // 获取数据的key，\n      command: `out = this.AVGPRC()` // 均价,要根据股票类型做变化\n    }\n  }]\n}\n\n/**\n * min chart volume config\n */\nexport const CHART_NOWVOL = {\n  title: {\n    display: 'none' // none 不显示 btn 按钮 text 文字\n  },\n  axisX: {\n    lines: 3,\n    display: 'both', // 左右两边显示\n    type: 'day1', // 有 day1 day5 和 normal 三种模式\n    format: 'tradetime'\n  },\n  axisY: {\n    lines: 1,\n    left: {\n      display: 'nofoot',\n      middle: 'none',\n      format: 'vol'\n    },\n    right: {\n      display: 'nofoot',\n      middle: 'none',\n      format: 'vol'\n    }\n  },\n  lines: [{\n    className: ClDrawVLine,\n    extremum: { // 如何取极值\n      method: 'normal', // fixedLeft fixedRight 上下固定,此时需要取axisY.middle的定义\n      maxvalue: ['decvol'], // 参与计算最大值的标签\n      minvalue: [0] // 参与计算最小值的标签\n    },\n    info: {\n      showSort: 'idx',\n      labelX: 'idx',\n      labelY: 'decvol',\n      color: 'vol'\n    }\n  }]\n}\n/**\n * 5day chart config\n */\nexport const CHART_DAY5 = {\n  title: {\n    display: 'none' // none 不显示 btn 按钮 text 文字\n  },\n  axisX: {\n    lines: 4,\n    display: 'none', // none不显示，both 边各一个值, block 根据块大小每个块显示一个值 = 显示坐标\n    type: 'day5', // 有 day1 day5 和 normal 三种模式\n    format: 'date' // date time datetime normal tradetime：根据交易时间此时label无用 = 显示的信息方式\n  },\n  axisY: {\n    lines: 3,\n    left: {\n      display: 'both', // none不显示，all, noupper不显示最上面, nofoot不显示最下面 = 显示坐标\n      middle: 'before',\n      format: 'price' // 输出数据的格式 rate, price, vol\n    },\n    right: {\n      display: 'both', // none不显示，noupper不显示最上面, nofoot不显示最下面 = 显示坐标\n      middle: 'before',\n      format: 'rate' // rate, price vol\n    }\n  },\n  lines: [{\n    className: ClDrawLine,\n    extremum: { // 如何取极值\n      method: 'fixedLeft', // fixedLeft fixedRight 上下固定,此时需要取axisY.middle的定义\n      maxvalue: ['close'], // 参与计算最大值的标签\n      minvalue: ['close'] // 参与计算最小值的标签\n    },\n    info: {\n      showSort: 'idx',\n      labelX: 'time',\n      labelY: 'close'\n    }\n  },\n  {\n    className: ClDrawLine,\n    info: {\n      showSort: 'idx'\n    },\n    formula: {\n      key: 'NOWDAY5', // 获取数据的key，\n      command: `out = this.AVGPRC()` // 均价,要根据股票类型做变化\n    }\n  }]\n}\n\n/**\n * 5 days chart volume config\n */\nexport const CHART_DAY5VOL = {\n  title: {\n    display: 'none' // none 不显示 btn 按钮 text 文字\n  },\n  axisX: {\n    lines: 4,\n    display: 'block',\n    type: 'day5', // 有 day1 day5 和 normal 三种模式\n    format: 'date' // date time datetime normal 显示的x轴信息方式\n  },\n  axisY: {\n    lines: 1,\n    left: {\n      display: 'nofoot', // none不显示，all, noupper不显示最上面, nofoot不显示最下面 = 显示坐标\n      middle: 'none',\n      format: 'vol' // 输出数据的格式 rate, price, vol\n    },\n    right: {\n      display: 'nofoot', // none不显示，noupper不显示最上面, nofoot不显示最下面 = 显示坐标\n      middle: 'none',\n      format: 'vol' // rate, price vol\n    }\n  },\n  lines: [{\n    className: ClDrawVLine,\n    extremum: { // 如何取极值\n      method: 'normal', // fixedLeft fixedRight 上下固定,此时需要取axisY.middle的定义\n      maxvalue: ['vol'], // 参与计算最大值的标签\n      minvalue: [0] // 参与计算最小值的标签\n    },\n    info: {\n      showSort: 'idx',\n      labelX: 'time',\n      labelY: 'vol',\n      color: 'vol'\n    }\n  }]\n}\n\nexport const CHART_NORMAL = {\n  title: {\n    display: 'text', // none 不显示 btn 按钮 text 文字\n    label: 'NORMAL'\n  },\n  axisX: {\n    lines: 0,\n    display: 'none',\n    type: 'normal', // 有 day1 day5 和 normal 三种模式\n    format: 'date' // date time datetime normal 显示的x轴信息方式\n  },\n  axisY: {\n    lines: 1,\n    left: {\n      display: 'both',\n      middle: 'none',\n      format: 'price'\n    },\n    right: {\n      display: 'both',\n      middle: 'none',\n      format: 'price'\n    }\n  },\n  lines: [{\n    className: ClDrawLine\n  }]\n}\n","/**\n * Copyright (c) 2018-present clchart Contributors.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// //////////////////////////////////////////////////\n// 以下是 ClLineVBar 的实体定义\n// //////////////////////////////////////////////////\n\nimport {\n  _drawBegin,\n  _drawEnd,\n  _drawVBar\n} from '../util/cl.draw'\nimport getValue from '../data/cl.data.tools'\nimport {\n  initCommonInfo\n} from '../chart/cl.chart.init'\n\n// 创建时必须带入父类，后面的运算定位都会基于父节点进行；\n// 这个类仅仅是画图, 因此需要把可以控制的rect传入进来\n/**\n * Class representing ClDrawVBar\n * @export\n * @class ClDrawVBar\n */\nexport default class ClDrawVBar {\n  /**\n\n   * Creates an instance of ClDrawVBar.\n   * @param {Object} father\n   * @param {Object} rectMain\n   */\n  constructor (father, rectMain) {\n    initCommonInfo(this, father)\n    this.rectMain = rectMain\n\n    this.linkInfo = father.father.linkInfo\n    this.source = father.father\n\n    this.maxmin = father.maxmin\n  }\n  /**\n   * paint\n   * @param {String} key\n   * @memberof ClDrawVBar\n   */\n  onPaint (key) {\n    if (key !== undefined) this.hotKey = key\n    this.data = this.source.getData(this.hotKey)\n\n    _drawBegin(this.context, this.color.red)\n    for (let k = 0, idx = this.linkInfo.minIndex; idx <= this.linkInfo.maxIndex; k++, idx++) {\n      if (parseFloat(getValue(this.data, 'open', idx)) <= parseFloat(getValue(this.data, 'close', idx))) {\n        _drawVBar(this.context, {\n          filled: this.color.sys === 'white',\n          index: k,\n          spaceX: this.linkInfo.spaceX,\n          unitX: this.linkInfo.unitX,\n          unitY: this.maxmin.unitY,\n          maxmin: this.maxmin,\n          rect: this.rectMain,\n          fillclr: this.color.red\n        },\n        getValue(this.data, 'vol', idx))\n      }\n    }\n    _drawEnd(this.context)\n    _drawBegin(this.context, this.color.green)\n    for (let k = 0, idx = this.linkInfo.minIndex; idx <= this.linkInfo.maxIndex; k++, idx++) {\n      if (parseFloat(getValue(this.data, 'open', idx)) > parseFloat(getValue(this.data, 'close', idx))) {\n        _drawVBar(this.context, {\n          filled: true,\n          index: k,\n          spaceX: this.linkInfo.spaceX,\n          unitX: this.linkInfo.unitX,\n          unitY: this.maxmin.unitY,\n          maxmin: this.maxmin,\n          rect: this.rectMain,\n          fillclr: this.color.green\n        },\n        getValue(this.data, 'vol', idx))\n      }\n    }\n    _drawEnd(this.context)\n  }\n}\n","/**\n * Copyright (c) 2018-present clchart Contributors.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport {\n  _drawRect,\n  _drawVline,\n  _drawHline,\n  _drawCircle,\n  _setLineWidth,\n  _drawTxt,\n  _fillRect,\n  _drawBegin,\n  _drawSignCircle,\n  _drawSignPlot,\n  _setTransColor,\n  _drawEnd\n} from '../util/cl.draw'\nimport {\n  initCommonInfo,\n  checkLayout\n} from '../chart/cl.chart.init'\nimport { CHART_LAYOUT } from '../cl.chart.def'\nimport { updateJsonOfDeep } from '../util/cl.tool'\n\nconst DEFAULT_BUTTON = {\n  shape: 'arc', // box range radio checkbox set(位置)\n  hotIdx: 0,\n  visible: true,\n  translucent: true, // 是否透明\n  status: 'enabled' // disable focused : 热点\n}\n\n// ▲▼※★☆○●◎☉√↑←→↓↖↗↘↙‰℃∧∨△□▽♂♀﹡\n/**\n * Class representing ClChartButton\n * @export\n * @class ClChartButton\n */\nexport default class ClChartButton {\n  /**\n\n   * Creates an instance of ClChartButton.\n   * @param {Object} father\n   */\n  constructor (father) {\n    initCommonInfo(this, father)\n  }\n  init (cfg, callback) {\n    this.callback = callback\n    this.rectMain = cfg.rectMain || {\n      left: 0,\n      top: 0,\n      width: 25,\n      height: 25\n    }\n    this.layout = updateJsonOfDeep(cfg.layout, CHART_LAYOUT)\n    this.config = updateJsonOfDeep(cfg.config, DEFAULT_BUTTON)\n\n    // If it is not below '+' '-' 'left' 'right', it means to directly display the string\n    this.info = cfg.info || [{\n      map: '+'\n    }]\n\n    // Make some checks on the configuration\n    this.checkConfig()\n  }\n  /**\n   * Check for conflicting configuration changes\n   * @memberof ClChartButton\n   */\n  checkConfig () {\n    checkLayout(this.layout)\n  }\n  setStatus (status) {\n    if (this.config.status !== status) {\n      this.config.status = status\n    }\n  }\n  /**\n   * handle click event\n   *\n   * @param {Object} event\n   * @memberof ClChartButton\n   */\n  onClick (event) {\n    if (!this.config.visible) return\n    // if (this.config.status === 'disabled') return\n    if (this.info.length > 1) {\n      this.config.hotIdx++\n      this.config.hotIdx %= this.info.length\n      this.onPaint()\n    }\n    if (this.config.hotIdx >= 0 && this.config.hotIdx < this.info.length) {\n      this.callback({\n        self: this,\n        info: this.info[this.config.hotIdx]\n      })\n    } else {\n      this.callback({\n        self: this\n      })\n    }\n    event.break = true\n  }\n  /**\n   * paint buttons\n   * @memberof ClChartButton\n   */\n  onPaint () {\n    if (!this.config.visible) return\n    _setLineWidth(this.context, this.scale)\n\n    let clr = this.color.button\n    if (this.config.status === 'disabled') clr = this.color.grid\n\n    _drawBegin(this.context, clr)\n    const center = {\n      xx: Math.floor(this.rectMain.width / 2),\n      yy: Math.floor(this.rectMain.height / 2),\n      offset: 4 * this.scale\n    }\n\n    const info = this.info[this.config.hotIdx]\n    switch (this.config.shape) {\n      case 'set':\n        if (this.config.status === 'focused') {\n          clr = this.color.red\n          if (this.config.translucent) clr = _setTransColor(clr, 0.95)\n          _drawSignPlot(this.context, this.rectMain.left + center.xx,\n            this.rectMain.top + center.xx, {\n              r: Math.round(this.layout.symbol.size / 2),\n              clr\n            }\n          )\n          center.yy = center.xx\n        } else {\n          clr = this.color.vol\n          if (this.config.translucent) clr = _setTransColor(clr, 0.85)\n          _drawSignCircle(this.context, this.rectMain.left + center.xx, this.rectMain.top + center.xx, {\n            r: Math.round(this.layout.symbol.size / 2),\n            clr\n          })\n        }\n        break\n      case 'arc':\n        _drawCircle(this.context, this.rectMain.left + center.xx, this.rectMain.top + center.xx, center.xx)\n        break\n      case 'box':\n        _fillRect(this.context, this.rectMain.left, this.rectMain.top, this.rectMain.width, this.rectMain.height, this.color.back)\n        _drawRect(this.context, this.rectMain.left, this.rectMain.top, this.rectMain.width, this.rectMain.height)\n        break\n      case 'range':\n        _drawCircle(this.context, this.rectMain.left + center.xx, this.rectMain.top + center.xx, center.xx)\n        break\n      case 'radio':\n        _drawCircle(this.context, this.rectMain.left + center.xx, this.rectMain.top + center.xx, center.xx)\n        break\n      case 'checkbox':\n        _drawCircle(this.context, this.rectMain.left + center.xx, this.rectMain.top + center.xx, center.xx)\n        break\n      default:\n    }\n    _drawEnd(this.context)\n    if (this.config.status === 'disabled') _drawBegin(this.context, this.color.grid)\n    else _drawBegin(this.context, this.color.button)\n    switch (info.map) {\n      case '+':\n        _drawVline(this.context, this.rectMain.left + center.xx, this.rectMain.top + center.offset,\n          this.rectMain.top + this.rectMain.height - center.offset)\n        _drawHline(this.context, this.rectMain.left + center.offset,\n          this.rectMain.left + this.rectMain.width - center.offset, this.rectMain.top + center.yy)\n        break\n      case '-':\n        _drawHline(this.context, this.rectMain.left + center.offset,\n          this.rectMain.left + this.rectMain.width - center.offset, this.rectMain.top + center.yy)\n        break\n      case '0':\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n      case '8':\n      case '9':\n        _drawTxt(this.context, this.rectMain.left + center.xx, this.rectMain.top + center.yy, info.map,\n          this.layout.title.font, this.layout.title.pixel, this.color.baktxt, {\n            x: 'center',\n            y: 'middle'\n          })\n        break\n      case '*':\n        _drawTxt(this.context, this.rectMain.left + center.xx, this.rectMain.top + center.yy - 2 * this.scale, '...',\n          this.layout.title.font, this.layout.title.pixel, this.color.baktxt, {\n            x: 'center',\n            y: 'middle'\n          })\n        break\n      case 'left':\n      case 'right':\n        break\n      default:\n        _drawTxt(this.context, this.rectMain.left + center.xx, this.rectMain.top + center.yy, info.map,\n          this.layout.title.font, this.layout.title.pixel, this.color.button, {\n            x: 'center',\n            y: 'middle'\n          })\n        break\n    }\n    _drawEnd(this.context)\n  }\n}\n","/**\n * Copyright (c) 2018-present clchart Contributors.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// ////////////////////////////////////////////////////////////////\n// 可以拖动的滑动块定义\n// 支持锁定模式和自由模式，锁定模式滑动块固定大小，和传统滑动块类似，自由模式可左右选择范围，并返回值域，\n// 通常定义最大最小值，当前选定的最大最小值，并在鼠标放开后返回当前值域\n// ///////////////////////////////////////////////////////////////\nimport {\n  _getTxtWidth,\n  _setLineWidth,\n  _drawTxt,\n  _fillRect,\n  _drawRect,\n  _drawBegin,\n  _drawEnd\n} from '../util/cl.draw'\nimport {\n  changeCursorStyle,\n  initCommonInfo,\n  checkLayout\n} from '../chart/cl.chart.init'\nimport { CHART_LAYOUT } from '../cl.chart.def'\nimport {\n  updateJsonOfDeep,\n  offsetRect,\n  inRect\n} from '../util/cl.tool'\n\nconst DEFAULT_SCROLL = {\n  // display: 'none', // true\n  shape: 'fixed', // fixed 为固定宽度 free有边界\n  direct: 'horizontal', // ver 竖立 和横\n  range: 100,\n  select: { min: 40, max: 60 }, // min == beginIdx max = pageCount\n  status: 'enabled',\n  txt: {}\n}\n/**\n * Class representing ClChartScroll\n * @export\n * @class ClChartScroll\n */\nexport default class ClChartScroll {\n  /**\n\n   * Creates an instance of ClChartScroll.\n   * @param {Object} father order chart's parent context\n   */\n  constructor (father) {\n    initCommonInfo(this, father)\n  }\n  /**\n   * init\n   * @param {Object} cfg\n   * @param {any} callback initialized callback\n   * @memberof ClChartScroll\n   */\n  init (cfg, callback) {\n    this.callback = callback\n    this.rectMain = cfg.rectMain || { left: 0, top: 0, width: 200, height: 25 }\n    this.layout = updateJsonOfDeep(cfg.layout, CHART_LAYOUT)\n    this.config = updateJsonOfDeep(cfg.config, DEFAULT_SCROLL)\n\n    // 下面对配置做一定的校验\n    this.checkConfig()\n    // 再做一些初始化运算，下面的运算范围是初始化设置后基本不变的数据\n    this.setPublicRect()\n  }\n  /**\n   * check config\n   * @memberof ClChartScroll\n   */\n  checkConfig () {\n    checkLayout(this.layout)\n  }\n  /**\n   * Calculate all rectangular areas\n   * @memberof ClChartScroll\n   */\n  setPublicRect () { // 计算所有矩形区域\n    const count = this.config.range\n    let spaceX\n\n    this.rectChart = offsetRect(this.rectMain, this.layout.margin)\n\n    let start, stop, spaceY\n    if (this.config.direct === 'horizontal') {\n      spaceX = this.rectMain.width / (count - 1)\n      spaceY = this.rectMain.height - this.scale * 2\n      start = this.rectMain.left + spaceX * this.config.select.min\n      stop = this.rectMain.left + spaceX * this.config.select.max\n      if (this.config.shape === 'free') {\n        this.rectMin = {\n          left: start - this.layout.scroll.size / 2,\n          top: this.rectMain.top + this.scale,\n          width: this.layout.scroll.size,\n          height: spaceY\n        }\n        this.rectMax = {\n          left: stop - this.layout.scroll.size / 2,\n          top: this.rectMain.top + this.scale,\n          width: this.layout.scroll.size,\n          height: spaceY\n        }\n        this.rectMid = {\n          left: start + this.layout.scroll.size / 2,\n          top: this.rectMain.top + this.scale,\n          width: stop - start - this.layout.scroll.size,\n          height: spaceY\n        }\n      } else {\n        this.rectMid = {\n          left: start,\n          top: this.rectMain.top + this.scale,\n          width: stop - start,\n          height: spaceY\n        }\n      }\n    } else {\n      // spaceX = this.rectMain.height / (count - 1);\n      // spaceY = this.rectMain.width - this.scale * 2;\n      // start = this.rectMain.top + spaceX * this.config.select;\n      // stop = this.rectMain.top + spaceX * this.config.select;\n    }\n  }\n  /**\n   * paint scroll chart\n   * @memberof ClChartScroll\n   */\n  onPaint () {\n    _setLineWidth(this.context, this.scale)\n\n    this.drawClear()\n    this.drawGridline() // 先画线格\n    this.setPublicRect()\n    this.drawButton()\n  }\n  /**\n   * handle change info\n   * @param {Object} info\n   * @memberof ClChartScroll\n   */\n  onChange (info) {\n    this.config = updateJsonOfDeep(info, this.config)\n    if (this.config.select.max > this.config.range) this.config.select.max = this.config.range - 1\n    if (info.iscall) {\n      this.callback({ self: this, minIndex: this.config.select.min })\n    }\n  }\n  /**\n   * find mouse index\n   * @param {Number} xpos\n   * @return {Number} index\n   * @memberof ClChartScroll\n   */\n  findMouseIndex (xpos) {\n    const count = this.config.range\n    const spaceX = this.rectMain.width / (count - 1)\n    const idx = Math.round((xpos - this.rectMain.left) / spaceX)\n    return idx\n  }\n  /**\n   * check min\n   * @param {Number} min\n   * @return {Number}\n   * @memberof ClChartScroll\n   */\n  checkMin (min) {\n    if (min < 0) return 0\n    if (min > this.config.range - (this.config.select.max - this.config.select.min + 1)) {\n      return this.config.range - (this.config.select.max - this.config.select.min + 1)\n    }\n    return min\n  }\n  /**\n   * on init\n   * @memberof ClChartScroll\n   */\n  onInit () {\n    changeCursorStyle('default')\n    this.who = undefined\n  }\n  /**\n   * handle mouse out\n   * @memberof ClChartScroll\n   */\n  onMouseOut () {\n    changeCursorStyle('default')\n    this.who = undefined\n  }\n  /**\n   * hanlde mouse down\n   * @param {Object} event\n   * @memberof ClChartScroll\n   */\n  onMouseDown (event) {\n    const mousePos = event.mousePos\n    if (inRect(this.rectMin, mousePos)) {\n      this.who = 'min'\n    } else if (inRect(this.rectMax, mousePos)) {\n      this.who = 'max'\n    } else if (inRect(this.rectMid, mousePos)) {\n      this.who = 'mid'\n      this.index = this.findMouseIndex(mousePos.x)\n    } else {\n      this.who = undefined\n    }\n  }\n  /**\n   * handle mouse up\n   * @param {Object} event\n   * @memberof ClChartScroll\n   */\n  onMouseUp (event) {\n    if (this.config.shape !== 'free' && this.who === undefined) {\n      const mousePos = event.mousePos\n      const curIndex = this.findMouseIndex(mousePos.x)\n      let min = curIndex - Math.floor((this.config.select.max - this.config.select.min) / 2)\n      min = this.checkMin(min)\n      this.onChange({ min, iscall: true })\n    }\n    this.who = undefined\n  }\n  /**\n   * handle mouse move\n   * @param {Object} event\n   * @memberof ClChartScroll\n   */\n  onMouseMove (event) {\n    const mousePos = event.mousePos\n    if (inRect(this.rectMin, mousePos) || inRect(this.rectMax, mousePos)) {\n      changeCursorStyle('col-resize')\n    } else if (inRect(this.rectMid, mousePos)) {\n      changeCursorStyle('move')\n    } else {\n      changeCursorStyle('default')\n    }\n    if (this.who !== undefined) {\n      let min, max\n      const curIndex = this.findMouseIndex(mousePos.x)\n      if (this.config.shape === 'free') {\n        if (curIndex < this.config.select.max) {\n          if (this.who === 'max') {\n            max = curIndex\n          } else if (this.who === 'min') {\n            min = curIndex\n          }\n        } else if (curIndex >= this.config.select.max) {\n          if (this.who === 'min') {\n            min = this.config.select.max\n            max = curIndex\n            this.who = 'max'\n          } else if (this.who === 'max') {\n            max = curIndex\n          }\n        }\n        this.onChange({ min, max, iscall: true })\n      } else {\n        min = this.config.select.min + curIndex - this.index\n        this.index = curIndex\n        min = this.checkMin(min)\n        this.onChange({ min, iscall: true })\n      }\n    }\n  }\n  /**\n   * clear chart\n   * @memberof ClChartScroll\n   */\n  drawClear () {\n    _fillRect(this.context, this.rectMain.left, this.rectMain.top, this.rectMain.width, this.rectMain.height, this.color.back)\n  }\n  /**\n   * draw grid line\n   * @memberof ClChartScroll\n   */\n  drawGridline () {\n    _drawBegin(this.context, this.color.grid)\n    _drawRect(this.context, this.rectMain.left, this.rectMain.top, this.rectMain.width + this.scale / 2, this.rectMain.height)\n    _drawEnd(this.context)\n  }\n  drawButton () {\n    if (this.config.direct === 'horizontal') {\n      const spaceY = (this.rectChart.height - this.layout.scroll.height) / 2\n      if (this.config.txt.head !== undefined) {\n        _drawTxt(this.context, this.rectChart.left + this.scale, this.rectChart.top + spaceY,\n          this.config.txt.head,\n          this.layout.scroll.font, this.layout.scroll.pixel, this.color.axis)\n      }\n      if (this.config.txt.tail !== undefined) {\n        _drawTxt(this.context, this.rectChart.left + this.rectChart.width - this.scale,\n          this.rectChart.top + spaceY, this.config.txt.tail,\n          this.layout.scroll.font, this.layout.scroll.pixel, this.color.axis, { x: 'end' })\n      }\n\n      _drawBegin(this.context, this.color.colume)\n      _drawRect(this.context, this.rectMid.left, this.rectMid.top,\n        this.rectMid.width, this.rectMid.height)\n      _fillRect(this.context, this.rectMid.left, this.rectMid.top,\n        this.rectMid.width, this.rectMid.height, this.color.box)\n      if (this.config.shape === 'free') {\n        _fillRect(this.context, this.rectMin.left, this.rectMin.top,\n          this.rectMin.width, this.rectMin.height, this.color.colume)\n        _fillRect(this.context, this.rectMax.left, this.rectMax.top,\n          this.rectMax.width, this.rectMax.height, this.color.colume)\n      }\n      _drawEnd(this.context)\n      const len = _getTxtWidth(this.context, this.config.txt.left, this.layout.scroll.font, this.layout.scroll.pixel) + 2 * this.scale\n      if (this.config.txt.left !== undefined && this.rectMid.width > len) {\n        _drawTxt(this.context, this.rectMid.left + this.scale, this.rectMid.top + spaceY,\n          this.config.txt.left,\n          this.layout.scroll.font, this.layout.scroll.pixel, this.color.axis)\n      }\n      if (this.config.txt.right !== undefined && this.rectMid.width > 2 * len) {\n        _drawTxt(this.context, this.rectMid.left + this.rectMid.width - this.scale,\n          this.rectMid.top + spaceY, this.config.txt.right,\n          this.layout.scroll.font, this.layout.scroll.pixel, this.color.axis, { x: 'end' })\n      }\n    }\n  }\n}\n","/**\n * Copyright (c) 2018-present clchart Contributors.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// //////////////////////////////////////////////////\n// 以下是 ClLineAxisX 的实体定义\n// //////////////////////////////////////////////////\n\nimport {\n  // _drawLineAlone,\n  _drawTxt\n} from '../util/cl.draw'\nimport getValue from '../data/cl.data.tools'\nimport {\n  getDate,\n  formatShowTime\n} from '../util/cl.tool'\nimport {\n  initCommonInfo\n} from '../chart/cl.chart.init'\n\n// 创建时必须带入父类，后面的运算定位都会基于父节点进行；\n// 这个类仅仅是画图, 因此需要把可以控制的rect传入进来\n/**\n * Class representing ClDrawAxisX\n * @export\n * @class ClDrawAxisX\n */\nexport default class ClDrawAxisX {\n  /**\n\n   * Creates an instance of ClDrawAxisX.\n   * @param {Object} father\n   * @param {Object} rectMain\n   */\n  constructor (father, rectMain) {\n    initCommonInfo(this, father)\n    this.rectMain = rectMain\n    this.linkInfo = father.father.linkInfo\n    this.axisX = father.config.axisX\n    this.maxmin = father.maxmin\n    this.text = father.layout.axisX\n  }\n  /**\n   * pain axisx\n   * @memberof ClDrawAxisX\n   */\n  onPaint () {\n    this.data = this.father.data\n    if (this.axisX.display === 'none') return\n\n    let xx, value, spaceX\n    xx = this.rectMain.left + this.text.spaceX\n\n    const yy = this.rectMain.top + this.rectMain.height / 2\n    if (this.axisX.display === 'block') {\n      let count = -1\n      let days = 0\n      const daymins = this.linkInfo.maxCount / (this.axisX.lines + 1)\n      spaceX = this.rectMain.width / (this.axisX.lines + 1)\n      for (let k = this.linkInfo.minIndex; k <= this.linkInfo.maxIndex; k++) {\n        const index = getValue(this.data, 'idx', k)\n        if (index < 0) continue\n        days = Math.floor(index / daymins)\n        if (days > count) {\n          count = days\n          xx = this.rectMain.left + spaceX / 2 + spaceX * count\n          value = getDate(getValue(this.data, 'time', k))\n          _drawTxt(this.context, xx, yy, value,\n            this.text.font, this.text.pixel, this.color.axis, { y: 'middle', x: 'center' })\n        }\n      }\n    } else {\n      if (this.axisX.format === 'tradetime') {\n        this.tradeTime = this.father.father.dataLayer.tradeTime\n        value = formatShowTime(this.data.key, 0, this.tradeTime[0].begin)\n        _drawTxt(this.context, xx, yy, value,\n          this.text.font, this.text.pixel, this.color.axis, {\n            y: 'middle'\n          })\n\n        xx = this.rectMain.left + this.rectMain.width - 3\n        value = formatShowTime(this.data.key, 0, this.tradeTime[this.tradeTime.length - 1].end)\n        _drawTxt(this.context, xx, yy, value,\n          this.text.font, this.text.pixel, this.color.axis, {\n            y: 'middle',\n            x: 'end'\n          })\n      } else {\n        // _drawLineAlone(this.context, this.rectMain.left, this.rectMain.top,\n        //   this.rectMain.left + this.rectMain.width, this.rectMain.top, this.color.red)\n        value = getValue(this.data, 'time', this.linkInfo.minIndex)\n        value = formatShowTime(this.data.key, value, this.maxmin.min)\n        _drawTxt(this.context, xx, yy, value,\n          this.text.font, this.text.pixel, this.color.axis, {\n            y: 'middle'\n          })\n\n        xx = this.rectMain.left + this.rectMain.width - 3\n        value = getValue(this.data, 'time', this.linkInfo.maxIndex)\n        value = formatShowTime(this.data.key, value, this.maxmin.max)\n        _drawTxt(this.context, xx, yy, value,\n          this.text.font, this.text.pixel, this.color.axis, {\n            y: 'middle',\n            x: 'end'\n          })\n      }\n    }\n  }\n}\n","/**\n * Copyright (c) 2018-present clchart Contributors.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// //////////////////////////////////////////////////\n// 以下是 ClLineAxisY 的实体定义\n// //////////////////////////////////////////////////\n\nimport {\n  _drawTxt\n} from '../util/cl.draw'\nimport {\n  initCommonInfo\n} from '../chart/cl.chart.init'\nimport {\n  formatInfo\n} from '../util/cl.tool'\n\n// 创建时必须带入父类，后面的运算定位都会基于父节点进行；\n// 这个类仅仅是画图, 因此需要把可以控制的rect传入进来\n/**\n * Class representing ClDrawAxisY\n * @export\n * @class ClDrawAxisY\n */\nexport default class ClDrawAxisY {\n  /**\n\n   * Creates an instance of ClDrawAxisY.\n   * @param {Object} father\n   * @param {Object} rectMain\n   * @param {Object} align\n   */\n  constructor (father, rectMain, align) {\n    initCommonInfo(this, father)\n    this.rectMain = rectMain\n    this.linkInfo = father.father.linkInfo\n\n    this.static = father.static\n\n    this.align = align\n    this.axisY = father.config.axisY\n\n    this.maxmin = father.maxmin\n    this.text = father.layout.title\n  }\n  /**\n   * paint\n   * @memberof ClDrawAxisY\n   */\n  onPaint () {\n    if (this.axisY[this.align].display === 'none') return\n    if (this.linkInfo.hideInfo) return\n\n    let xx, yy\n    let value, clr\n\n    let posX\n    const offX = this.axisPlatform === 'phone' ? 2 * this.scale : -2 * this.scale\n\n    if (this.align === 'left') {\n      if (this.axisPlatform === 'phone') {\n        posX = 'start'\n        xx = this.rectMain.left + offX\n      } else {\n        posX = 'end'\n        xx = this.rectMain.left + this.rectMain.width + offX\n      }\n    } else {\n      if (this.axisPlatform === 'phone') {\n        posX = 'end'\n        xx = this.rectMain.left + this.rectMain.width - offX\n      } else {\n        posX = 'start'\n        xx = this.rectMain.left - offX\n      }\n    }\n    yy = this.rectMain.top + this.scale // 画最上面的\n\n    // 画不画最上面的坐标\n    if (this.axisY[this.align].display !== 'noupper') {\n      yy = this.rectMain.top + this.scale // 画最上面的\n      clr = this.axisY[this.align].middle !== 'before' ? this.color.axis : this.color.red\n      value = formatInfo(\n        this.maxmin.max,\n        this.axisY[this.align].format,\n        this.static.coinunit,\n        this.static.volzoom,\n        this.static.before)\n      _drawTxt(this.context, xx, yy, value,\n        this.text.font, this.text.pixel, clr,\n        { x: posX, y: 'top' })\n    }\n    // 画不画最下面的坐标\n    if (this.axisY[this.align].display !== 'nofoot') {\n      clr = this.axisY[this.align].middle !== 'before' ? this.color.axis : this.color.green\n      yy = this.rectMain.top + this.rectMain.height - this.scale\n      value = formatInfo(\n        this.maxmin.min,\n        this.axisY[this.align].format,\n        this.static.coinunit,\n        this.static.volzoom,\n        this.static.before)\n      _drawTxt(this.context, xx, yy, value,\n        this.text.font, this.text.pixel, clr,\n        { x: posX, y: 'bottom' })\n    }\n    // 画其他的坐标线\n    const offy = this.rectMain.height / (this.axisY.lines + 1)\n\n    for (let i = 0; i < this.axisY.lines; i++) {\n      value = this.maxmin.max - offy * (i + 1) / this.maxmin.unitY\n      yy = this.rectMain.top + Math.round((i + 1) * offy)\n      clr = this.color.axis\n      if (this.axisY[this.align].middle !== 'none') {\n        if ((i + 1) < Math.round(this.axisY.lines / 2)) clr = this.color.red\n        if ((i + 1) > Math.round(this.axisY.lines / 2)) clr = this.color.green\n        if ((i + 1) === Math.round(this.axisY.lines / 2)) {\n          value = this.axisY[this.align].middle === 'zero' ? 0 : this.static.before\n        }\n      }\n\n      value = formatInfo(\n        value,\n        this.axisY[this.align].format,\n        this.static.coinunit,\n        this.static.volzoom,\n        this.static.before)\n\n      _drawTxt(this.context, xx, yy, value,\n        this.text.font, this.text.pixel, clr,\n        { x: posX, y: 'middle' })\n    }\n  }\n}\n","/**\n * Copyright (c) 2018-present clchart Contributors.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// //////////////////////////////////////////////////\n// 以下是 ClDrawCursor 的实体定义\n// //////////////////////////////////////////////////\n\nimport {\n  _getTxtWidth,\n  _drawTxtRect,\n  _clearRect,\n  _drawLineAlone\n} from '../util/cl.draw'\nimport {\n  initCommonInfo\n} from '../chart/cl.chart.init'\nimport {\n  inRangeX,\n  inRangeY,\n  formatShowTime,\n  formatInfo\n} from '../util/cl.tool'\n// 创建时必须带入父类，后面的运算定位都会基于父节点进行；\n// 这个类仅仅是画图, 因此需要把可以控制的rect传入进来\n/**\n * Class representing ClDrawCursor\n * @export\n * @class ClDrawCursor\n */\nexport default class ClDrawCursor {\n  /**\n\n   * Creates an instance of ClDrawCursor.\n   * @param {Object} father\n   * @param {Object} rectMain\n   * @param {Object} rectChart\n   */\n  constructor (father, rectMain, rectChart) {\n    initCommonInfo(this, father)\n    this.rectFather = father.rectMain\n    this.rectMain = rectMain // 画十字线和边界标签\n    this.rectChart = rectChart // 鼠标有效区域\n\n    this.linkInfo = father.father.linkInfo\n    this.static = father.static\n\n    this.axisXInfo = father.config.axisX\n    this.axisYInfo = father.config.axisY\n\n    this.maxmin = father.maxmin\n    this.axisX = father.layout.axisX\n\n    this.context = father.father.cursorCanvas.context\n  }\n  /**\n   * handle clear\n   * @memberof ClDrawCursor\n   */\n  onClear () {\n    _clearRect(this.context, this.rectFather.left, this.rectFather.top,\n      this.rectFather.left + this.rectFather.width,\n      this.rectFather.top + this.rectFather.height)\n  }\n  /**\n   * paint\n   * @param {Object} mousePos\n   * @param {Number} valueX\n   * @param {Number} valueY\n   * @memberof ClDrawCursor\n   */\n  onPaint (mousePos, valueX, valueY) {\n    if (typeof this.context._beforePaint === 'function') {\n      this.context._beforePaint()\n    }\n    if (inRangeX(this.rectChart, mousePos.x) === false) return\n    this.onClear()\n\n    let txt\n    let xx = mousePos.x\n    let yy = mousePos.y\n    const offX = this.axisPlatform === 'phone' ? 2 * this.scale : -2 * this.scale\n\n    // 如果鼠标在本图区域，就画横线信息\n    if (inRangeY(this.rectChart, mousePos.y)) {\n      if (valueY === undefined) {\n        valueY = this.maxmin.max - (mousePos.y - this.rectChart.top) / this.maxmin.unitY\n      } else {\n        yy = (this.maxmin.max - valueY) * this.maxmin.unitY + this.rectChart.top\n      }\n\n      _drawLineAlone(this.context, this.rectMain.left, yy, this.rectMain.left + this.rectMain.width, yy, this.color.grid)\n      let posX = this.axisPlatform === 'phone' ? 'start' : 'end'\n\n      if (this.axisYInfo.left.display !== 'none') {\n        txt = formatInfo(\n          valueY,\n          this.axisYInfo.left.format,\n          this.static.coinunit,\n          this.static.volzoom,\n          this.static.before)\n        xx = this.rectMain.left + offX\n        _drawTxtRect(this.context, xx, yy, txt, {\n          font: this.axisX.font,\n          pixel: this.axisX.pixel,\n          spaceX: this.axisX.spaceX,\n          clr: this.color.txt,\n          bakclr: this.color.grid,\n          x: posX,\n          y: 'middle'\n        })\n      }\n      if (this.axisYInfo.right.display !== 'none') {\n        txt = formatInfo(\n          valueY,\n          this.axisYInfo.right.format,\n          this.static.coinunit,\n          this.static.volzoom,\n          this.static.before)\n        posX = this.axisPlatform === 'phone' ? 'end' : 'start'\n        xx = this.rectMain.left + this.rectMain.width - offX\n        _drawTxtRect(this.context, xx, yy, txt, {\n          font: this.axisX.font,\n          pixel: this.axisX.pixel,\n          spaceX: this.axisX.spaceX,\n          clr: this.color.txt,\n          bakclr: this.color.grid,\n          x: posX,\n          y: 'middle'\n        })\n      }\n    }\n\n    _drawLineAlone(this.context, mousePos.x, this.rectMain.top, mousePos.x, this.rectMain.top + this.rectMain.height - 1, this.color.grid)\n    if (this.axisXInfo.display !== 'none') {\n      xx = mousePos.x\n      const th = Math.floor((this.axisX.height - this.axisX.pixel - this.scale) / 2)\n      yy = this.rectMain.top + this.rectMain.height + th\n      txt = formatShowTime(this.father.data.key, valueX)\n      const len = Math.round(_getTxtWidth(this.context, txt, this.axisX.font, this.axisX.pixel) / 2)\n      let posX = 'center'\n      if (xx - len < this.rectMain.left + offX) { xx = this.rectMain.left + offX; posX = 'start' }\n      if (xx + len > this.rectMain.left + this.rectMain.width - offX) {\n        xx = this.rectMain.left + this.rectMain.width - offX\n        posX = 'end'\n      }\n      _drawTxtRect(this.context, xx, yy, txt, {\n        font: this.axisX.font,\n        pixel: this.axisX.pixel,\n        spaceX: this.axisX.spaceX,\n        clr: this.color.txt,\n        bakclr: this.color.grid,\n        x: posX,\n        y: 'top'\n      })\n    }\n    if (typeof this.context._afterPaint === 'function') {\n      this.context._afterPaint()\n    }\n  }\n}\n","/**\n * Copyright (c) 2018-present clchart Contributors.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// //////////////////////////////////////////////////\n// 以下是 ClLineKBar 的实体定义\n// //////////////////////////////////////////////////\n\nimport {\n  _drawBegin,\n  _drawEnd,\n  _drawHline,\n  _drawVline\n} from '../util/cl.draw'\nimport {\n  initCommonInfo\n} from '../chart/cl.chart.init'\n\n// 创建时必须带入父类，后面的运算定位都会基于父节点进行；\n// 这个类仅仅是画图, 因此需要把可以控制的rect传入进来\n/**\n * Class representing ClDrawGrid\n * @export\n * @class ClDrawGrid\n */\nexport default class ClDrawGrid {\n  /**\n\n   * Creates an instance of ClDrawGrid.\n   * @param {Object} father\n   * @param {Object} rectMain\n   */\n  constructor (father, rectMain) {\n    initCommonInfo(this, father)\n    this.rectMain = rectMain\n\n    this.axisX = father.config.axisX\n    this.axisY = father.config.axisY\n  }\n  /**\n   * paint\n   * @memberof ClDrawGrid\n   */\n  onPaint () {\n    _drawBegin(this.context, this.color.grid)\n    _drawHline(this.context, this.rectMain.left, this.rectMain.left + this.rectMain.width, this.rectMain.top)\n    if (this.axisY.lines > 0) {\n      const offy = this.rectMain.height / (this.axisY.lines + 1)\n      for (let i = 0; i < this.axisY.lines; i++) {\n        _drawHline(this.context, this.rectMain.left, this.rectMain.left + this.rectMain.width, this.rectMain.top + Math.round((i + 1) * offy))\n      }\n    }\n    if (this.axisX.display !== 'none') {\n      _drawHline(this.context, this.rectMain.left, this.rectMain.left + this.rectMain.width, this.rectMain.top + this.rectMain.height)\n    }\n    // 画纵坐标\n    if (this.axisX.lines > 0) {\n      const offx = this.rectMain.width / (this.axisX.lines + 1)\n      for (let i = 0; i < this.axisX.lines; i++) {\n        _drawVline(this.context, this.rectMain.left + Math.round((i + 1) * offx), this.rectMain.top, this.rectMain.top + this.rectMain.height)\n      }\n    }\n    if (this.axisPlatform !== 'phone') {\n      _drawVline(this.context, this.rectMain.left, this.rectMain.top, this.rectMain.top + this.rectMain.height)\n      _drawVline(this.context, this.rectMain.left + this.rectMain.width, this.rectMain.top, this.rectMain.top + this.rectMain.height)\n    }\n    _drawEnd(this.context)\n  }\n}\n","/**\n * Copyright (c) 2018-present clchart Contributors.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// //////////////////////////////////////////////////\n// 以下是 ClLineKBar 的实体定义\n// //////////////////////////////////////////////////\n\nimport {\n  _fillRect,\n  _getTxtWidth,\n  _drawTxt\n} from '../util/cl.draw'\nimport {\n  initCommonInfo\n} from '../chart/cl.chart.init'\n\n// 创建时必须带入父类，后面的运算定位都会基于父节点进行；\n// 这个类仅仅是画图, 因此需要把可以控制的rect传入进来\n/**\n * Class representing ClDrawInfo\n * @export\n * @class ClDrawInfo\n */\nexport default class ClDrawInfo {\n  /**\n\n   * Creates an instance of ClDrawInfo.\n   * @param {Object} father\n   * @param {Object} rectMain\n   * @param {Object} rectMess\n   */\n  constructor (father, rectMain, rectMess) {\n    initCommonInfo(this, father)\n    this.rectMain = rectMain\n    this.rectMess = rectMess\n\n    this.linkInfo = father.father.linkInfo\n\n    this.title = father.layout.title\n    this.titleInfo = father.config.title\n  }\n  /**\n   * paint\n   * @param {Object} message\n   * @memberof ClDrawInfo\n   */\n  onPaint (message) {\n    if (this.titleInfo.display === 'none' || this.linkInfo.hideInfo) return\n\n    _fillRect(this.context, this.rectMain.left + this.scale, this.rectMain.top + this.scale,\n      this.rectMess.left + this.rectMess.width - 2 * this.scale,\n      this.rectMain.height - 2 * this.scale, this.color.back)\n\n    let clr = this.color.txt\n    const spaceY = Math.round((this.title.height - this.title.pixel) / 2) - this.scale\n    const yy = this.rectMess.top + spaceY\n\n    if (this.titleInfo.label !== undefined) {\n      _drawTxt(this.context, this.rectMain.left + this.scale, yy, this.titleInfo.label,\n        this.title.font, this.title.pixel, clr)\n    }\n    let xx = this.rectMess.left + this.scale\n    for (let i = 0; i < message.length; i++) {\n      clr = this.color.line[i]\n      if (message[i].txt !== undefined) {\n        _drawTxt(this.context, xx, yy, message[i].txt, this.title.font, this.title.pixel, clr)\n        xx += _getTxtWidth(this.context, message[i].txt, this.title.font, this.title.pixel) + this.title.spaceX\n      }\n      if (message[i].value === undefined) continue\n      _drawTxt(this.context, xx, yy, ' ' + message[i].value, this.title.font, this.title.pixel, clr)\n      xx += _getTxtWidth(this.context, ' ' + message[i].value, this.title.font, this.title.pixel) + this.title.spaceX\n    }\n  }\n}\n","/**\n * Copyright (c) 2018-present clchart Contributors.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// //////////////////////////////////////////////////\n// 以下是ClChartLine的实体定义  --- 画线类\n// //////////////////////////////////////////////////\n// 实际上就是获取某种类型数据，然后横坐标 0 开始排序，永远是数值型，但显示出什么要到对应的数组中找\n// 纵坐标根据数据类型，计算最大最小值，然后根据画线类型画出数据线，所有的不同全部在ClChart中处理\n// //////////////////////////////////////////////////\nimport {\n  _fillRect,\n  _drawRect,\n  // _getImageData,\n  // _putImageData,\n  _setLineWidth,\n  _getTxtWidth,\n  _drawBegin,\n  _drawEnd\n} from '../util/cl.draw'\nimport {\n  findLabelToIndex,\n  setFixedLineFlags,\n  setMoveLineFlags\n} from './cl.chart.tools'\nimport {\n  initCommonInfo,\n  checkLayout\n} from '../chart/cl.chart.init'\nimport { CHART_LAYOUT } from '../cl.chart.def'\nimport {\n  updateJsonOfDeep,\n  copyJsonOfDeep,\n  offsetRect,\n  inArray,\n  isEmptyArray,\n  formatShowTime,\n  formatInfo,\n  inRangeX\n} from '../util/cl.tool'\n\nimport {\n  STOCK_TYPE_INDEX\n} from '../data/../cl.data.def'\nimport getValue, {\n  getSize,\n  fromIndexToTradeTime,\n  getMinuteCount\n} from '../data/cl.data.tools'\n\nimport ClChartButton from './cl.chart.button'\nimport ClChartScroll from './cl.chart.scroll'\nimport ClDrawAxisX from './cl.draw.axisX'\nimport ClDrawAxisY from './cl.draw.axisY'\nimport ClDrawCursor from './cl.draw.cursor'\nimport ClDrawGrid from './cl.draw.grid'\nimport ClDrawInfo from './cl.draw.info'\nimport ClDrawLine from './cl.draw.line'\nimport ClDrawVLine from './cl.draw.vline'\n\n/**\n * Class representing ClChartLine\n * @export\n * @class ClChartLine\n */\nexport default class ClChartLine {\n  /**\n\n   * Creates an instance of ClChartLine.\n   * @param {Object} father line chart's parent context\n   */\n  constructor (father) {\n    initCommonInfo(this, father)\n    this.linkInfo = father.linkInfo\n    this.static = this.father.dataLayer.static\n    this.data = {}\n    this.maxmin = {}\n  }\n  /**\n   * init line\n   * @param {Object} cfg line's config\n   * @param {any} callback initialized callback\n   * @memberof ClChartLine\n   */\n  init (cfg, callback) {\n    this.callback = callback\n    this.rectMain = cfg.rectMain || {\n      left: 0,\n      top: 0,\n      width: 400,\n      height: 200\n    }\n\n    this.layout = updateJsonOfDeep(cfg.layout, CHART_LAYOUT)\n    this.config = copyJsonOfDeep(cfg.config)\n    // 这里直接赋值是因为外部已经设置好了配置才会开始初始化\n    this.buttons = cfg.buttons || []\n    this.scroll = cfg.config.scroll || {\n      display: 'none'\n    }\n    this.childCharts = {}\n\n    // 下面对配置做一定的校验\n    this.checkConfig()\n    // 再做一些初始化运算，下面的运算范围是初始化设置后基本不变的数据\n    this.setPublicRect()\n    // 初始化子窗口\n    this.childDraws = {}\n    this.setChildDraw()\n    this.childLines = {}\n    this.setChildLines()\n    // 初始化按钮\n    this.setButtons()\n    // 初始化滚动条\n    this.setScroll()\n  }\n  /**\n   * check config\n   * @memberof ClChartLine\n   */\n  checkConfig () { // 检查配置有冲突的修正过来\n    checkLayout(this.layout)\n    if (this.config.zoomInfo !== undefined) {\n      this.setZoomInfo()\n    }\n  }\n  /**\n   * set public rect\n   * @memberof ClChartLine\n   */\n  setPublicRect () { // 计算所有矩形区域\n    // rectChart 画图区\n    // rectTitle rectMess\n    // rectAxisX\n    // rectScroll\n    // rectAxisYLeft rectAxisYRight\n    // rectGridLine 坐标线区域\n\n    this.rectChart = offsetRect(this.rectMain, this.layout.margin)\n    const axisInfo = {\n      width: this.layout.axisX.width\n    } //\n\n    // 计算title和mess矩形位置\n    this.rectTitle = {\n      left: this.rectMain.left,\n      top: this.rectMain.top,\n      width: 0,\n      height: 0\n    }\n    this.rectMess = {\n      left: this.rectMain.left,\n      top: this.rectMain.top,\n      width: 0,\n      height: 0\n    }\n    if (this.config.title.display !== 'none') {\n      this.rectTitle = {\n        left: this.rectChart.left,\n        top: this.rectChart.top,\n        width: axisInfo.width,\n        height: this.layout.title.height\n      }\n      this.rectMess = {\n        left: this.rectChart.left + axisInfo.width + this.scale,\n        top: this.rectChart.top,\n        width: this.rectChart.width - axisInfo.width * 2,\n        height: this.layout.title.height\n      }\n    }\n\n    // 计算rectAxisX和rectScroll矩形位置\n    axisInfo.left = this.rectChart.left\n    axisInfo.right = this.rectChart.left + this.rectChart.width\n    axisInfo.top = this.rectTitle.top + this.rectTitle.height\n    axisInfo.bottom = this.rectChart.top + this.rectChart.height\n\n    if (this.axisPlatform !== 'phone') {\n      if (this.config.axisY.left.display !== 'none') axisInfo.left += this.layout.axisX.width\n      if (this.config.axisY.right.display !== 'none') axisInfo.right -= this.layout.axisX.width\n    }\n    if (this.config.axisX.display !== 'none') {\n      axisInfo.bottom -= this.layout.axisX.height\n    }\n    if (this.scroll.display !== 'none') {\n      axisInfo.bottom -= this.layout.scroll.size\n    }\n    // 此时已经可以得出画坐标线的区域了\n    this.rectGridLine = {\n      left: axisInfo.left,\n      top: axisInfo.top,\n      width: axisInfo.right - axisInfo.left,\n      height: axisInfo.bottom - axisInfo.top\n    }\n    this.rectAxisYLeft = {\n      left: this.rectChart.left,\n      top: axisInfo.top,\n      width: axisInfo.width,\n      height: axisInfo.bottom - axisInfo.top\n    }\n    this.rectAxisYRight = {\n      left: this.rectChart.left + this.rectChart.width - axisInfo.width,\n      top: axisInfo.top,\n      width: axisInfo.width,\n      height: axisInfo.bottom - axisInfo.top\n    }\n\n    this.rectChart = offsetRect(this.rectGridLine, this.layout.offset)\n\n    this.rectAxisX = {\n      left: 0,\n      top: axisInfo.bottom,\n      width: 0,\n      height: 0\n    }\n    if (this.config.axisX.display !== 'none') {\n      this.rectAxisX = {\n        left: axisInfo.left,\n        top: axisInfo.bottom + this.scale,\n        width: axisInfo.right - axisInfo.left,\n        height: this.layout.axisX.height\n      }\n    }\n    if (this.scroll.display !== 'none') {\n      this.rectScroll = {\n        left: axisInfo.left,\n        top: this.rectAxisX.top + this.rectAxisX.height + this.scale,\n        width: axisInfo.right - axisInfo.left,\n        height: this.layout.scroll.size\n      }\n    }\n  }\n  /**\n   * get line by data key\n   * @param {String} line\n   * @return {Object} line instance\n   * @memberof ClChartLine\n   */\n  getLineDataKey (line) {\n    if (line.formula === undefined) return this.hotKey\n    return line.formula.key\n  }\n  /**\n   * set child line instance\n   * @memberof ClChartLine\n   */\n  setChildLines () {\n    // l_kbar，l_line，l_nowvol，l_vbar l_nowline\n    let line\n    let clr = 0\n    for (let i = 0; i < this.config.lines.length; i++) {\n      const ClassName = this.config.lines[i].className\n      line = new ClassName(this, this.rectChart)\n\n      this.childLines['NAME' + i] = line\n      line.name = 'NAME' + i\n      line.hotKey = this.getLineDataKey(this.config.lines[i])\n      if (inArray(ClassName, [ClDrawLine, ClDrawVLine])) {\n        line.info = {\n          labelX: 'idx',\n          labelY: 'value'\n        }\n        if (this.config.lines[i].info !== undefined) line.info = this.config.lines[i].info\n        if (this.config.axisX.type === 'day5') {\n          // 专用于5日线跨天的连线问题\n          line.info.skips = getMinuteCount(this.father.dataLayer.tradeTime)\n        }\n        line.info.colorIndex = clr\n        clr++\n      }\n    }\n  }\n  /**\n   * set child draw instance\n   * @memberof ClChartLine\n   */\n  setChildDraw () {\n    let draw\n    draw = new ClDrawCursor(this, this.rectGridLine, this.rectChart)\n    this.childDraws['CURSOR'] = draw\n\n    if (this.config.title.display !== 'none') {\n      draw = new ClDrawInfo(this, this.rectTitle, this.rectMess)\n      this.childDraws['TITLE'] = draw\n    }\n    if (this.config.axisY.left.display !== 'none') {\n      draw = new ClDrawAxisY(this, this.rectAxisYLeft, 'left')\n      this.childDraws['AXISY_LEFT'] = draw\n    }\n    if (this.config.axisY.right.display !== 'none') {\n      draw = new ClDrawAxisY(this, this.rectAxisYRight, 'right')\n      this.childDraws['AXISY_RIGHT'] = draw\n    }\n    if (this.config.axisX.display !== 'none') {\n      draw = new ClDrawAxisX(this, this.rectAxisX)\n      this.childDraws['AXISX'] = draw\n    }\n    draw = new ClDrawGrid(this, this.rectGridLine)\n    this.childDraws['GRID'] = draw\n    // 下面是line的定义\n  }\n  /**\n   * set scroll instance\n   * @memberof ClChartLine\n   */\n  setScroll () {\n    if (this.scroll.display === 'none') return\n    const chart = new ClChartScroll(this)\n    chart.name = 'HSCROLL'\n    // this.father.bindEvent(chart);\n    this.childCharts[chart.name] = chart\n\n    chart.init({\n      rectMain: this.rectScroll,\n      config: {\n        width: 8\n      }\n    },\n    result => {\n      const self = result.self.father\n      if (self.father.linkInfo.minIndex !== result.minIndex) {\n        self.father.linkInfo.minIndex = result.minIndex\n        self.father.onPaint()\n      }\n    })\n  }\n  /**\n   * create button\n   * @param {String} name button name\n   * @return {Object} button instacne\n   * @memberof ClChartLine\n   */\n  createButton (name) {\n    if (this.childCharts[name] !== undefined) return this.childCharts[name]\n    const chart = new ClChartButton(this)\n    chart.name = name\n    // this.father.bindEvent(chart);\n    this.childCharts[name] = chart\n    return chart\n  }\n  /**\n   * check has button by key\n   * @param {String} key button key\n   * @param {Array} buttons buttons array\n   * @return {Boolean}\n   * @memberof ClChartLine\n   */\n  hasButton (key, buttons) {\n    for (let k = 0; k < buttons.length; k++) {\n      if (key === buttons[k].key) return true\n    }\n    return false\n  }\n  /**\n   * set buttons\n   * @memberof ClChartLine\n   */\n  setButtons () {\n    let chart\n    let xx, yy\n    let ww = 25 * this.scale\n    if (this.hasButton('zoomin', this.buttons) || this.hasButton('zoomout', this.buttons)) {\n      chart = this.createButton('zoomin')\n      xx = Math.floor((this.rectChart.width - (ww + ww) * 2) / 4)\n      yy = this.rectChart.top + this.rectChart.height * 0.95 - ww\n      chart.init({\n        rectMain: {\n          left: xx,\n          top: yy,\n          width: ww,\n          height: ww\n        },\n        info: [{\n          map: '-'\n        }]\n      },\n      (/* result */) => {\n        // const self = result.self.father;\n        if (this.config.zoomInfo.index > 0) {\n          this.config.zoomInfo.index--\n          this.setZoomInfo()\n          this.father.onPaint()\n        }\n      })\n      chart = this.createButton('zoomout')\n      xx += 2 * ww\n      chart.init({\n        rectMain: {\n          left: xx,\n          top: yy,\n          width: ww,\n          height: ww\n        },\n        info: [{\n          map: '+'\n        }]\n      },\n      (/* result */) => {\n        // const self = result.self.father;\n        if (this.config.zoomInfo.index < this.config.zoomInfo.list.length - 1) {\n          this.config.zoomInfo.index++\n          this.setZoomInfo()\n          this.father.onPaint()\n        }\n      })\n    }\n    if (this.hasButton('exright', this.buttons)) {\n      chart = this.createButton('exright')\n      ww = _getTxtWidth(this.context, '前复权', this.layout.title.font, this.layout.title.pixel)\n      xx = this.rectMain.left + this.rectMain.width - ww - this.layout.title.spaceX\n      if (this.config.title.display !== 'none') {\n        yy = (this.rectMess.height - this.layout.title.pixel - 2 * this.layout.title.spaceY) / 2\n      } else {\n        yy = this.rectMain.top + this.layout.title.spaceY\n      }\n      chart.init({\n        rectMain: {\n          left: xx,\n          top: this.rectMess.top + yy,\n          width: ww + this.layout.title.spaceX,\n          height: this.layout.title.pixel + 2 * this.layout.title.spaceY\n        },\n        config: {\n          shape: 'box'\n        },\n        info: [{\n          map: '不除权',\n          value: 'no'\n        },\n        {\n          map: '前复权',\n          value: 'forword'\n        }\n          // , {\n          //   map: '后复权',\n          //   value: 'back'\n          // }\n        ]\n      },\n      result => {\n        // const self = result.self.father;\n        this.father.linkInfo.rightMode = result.info.value\n        this.father.fastDrawEnd()\n        this.father.onPaint()\n      })\n      chart.hotIdx = 0\n    }\n  }\n  // //////////////////////////////////////\n  // 下面开始是功能性函数 主要用于简化主函数的结构\n  // //////////////////////////////////////\n\n  addLine (line) {\n    // this.removeLine(line.name);\n    this.config.lines.push(line)\n  }\n  /**\n   * remove line by name\n   * @param {String} name line name\n   * @memberof ClChartLine\n   */\n  removeLine (name) {\n    for (let i = 0; i < this.config.lines.length; i++) {\n      if (this.config.lines[i].name === undefined) continue\n      if (this.config.lines[i].name === name) {\n        this.config.lines.splice(i, 1)\n      }\n    }\n  }\n  /**\n   * set zoom info\n   * @memberof ClChartLine\n   */\n  setZoomInfo () {\n    const info = this.config.zoomInfo\n    info.index = info.index > info.list.length - 1 ? info.list.length - 1 : info.index\n    info.index = info.index < 0 ? 0 : info.index\n    const value = info.list[info.index]\n\n    this.linkInfo.unitX = value * this.scale\n    if (this.linkInfo.unitX < this.scale) this.linkInfo.unitX = this.scale\n    this.linkInfo.spaceX = this.linkInfo.unitX / 4\n    if (this.linkInfo.spaceX < this.scale) this.linkInfo.spaceX = this.scale\n\n    if (this.childCharts['zoomin']) {\n      if (info.index === 0) this.childCharts['zoomin'].setStatus('disabled')\n      else this.childCharts['zoomin'].setStatus('enabled')\n    }\n    if (this.childCharts['zoomout']) {\n      if (info.index === info.list.length - 1) this.childCharts['zoomout'].setStatus('disabled')\n      else this.childCharts['zoomout'].setStatus('enabled')\n    }\n    this.father.fastDrawEnd()\n  }\n  /**\n   * set hot button\n   * @param {Object} chart chart instance\n   * @memberof ClChartLine\n   */\n  setHotButton (chart) {\n    for (const name in this.childCharts) {\n      if (this.childCharts[name] === chart) {\n        this.childCharts[name].focused = true\n      } else {\n        this.childCharts[name].focused = false\n      }\n    }\n  }\n  /**\n   * clear chart\n   * @memberof ClChartLine\n   */\n  drawClear () {\n    _fillRect(this.context, this.rectMain.left, this.rectMain.top, this.rectMain.width, this.rectMain.height, this.color.back)\n    _drawBegin(this.context, this.color.grid)\n    _drawRect(this.context, this.rectMain.left, this.rectMain.top, this.rectMain.width, this.rectMain.height)\n    _drawEnd(this.context)\n  }\n  /**\n   * draw child charts\n   * @memberof ClChartLine\n   */\n  drawChildCharts () {\n    let top\n    for (const name in this.childCharts) {\n      if (!this.childCharts[name].focused) {\n        this.childCharts[name].onPaint()\n      } else {\n        top = this.childCharts[name]\n      }\n    }\n    if (top) top.onPaint()\n  }\n  /**\n   * before location\n   * @memberof ClChartLine\n   */\n  beforeLocation () {\n    for (const name in this.childLines) {\n      if (this.childLines[name].beforeLocation) {\n        this.childLines[name].beforeLocation()\n      }\n    }\n  }\n  /**\n   * draw child lines\n   * @memberof ClChartLine\n   */\n  drawChildLines () {\n    for (const name in this.childLines) {\n      if (this.childLines[name].hotKey !== undefined) {\n        this.childLines[name].onPaint(this.childLines[name].hotKey)\n      } else {\n        this.childLines[name].onPaint(this.hotKey)\n      }\n    }\n  }\n  /**\n   * According to the record index to obtain a set of data according to the keys, the data is {MA:[]...} is mainly provided for mouse movement\n   * @param {Number} index\n   * @return {Array}\n   * @memberof ClChartLine\n   */\n  getMoveData (index) {\n    let lines = this.config.lines\n    const out = []\n    if (!Array.isArray(lines)) return out\n\n    let value, info\n    for (let k = 0; k < lines.length; k++) {\n      if (lines[k].info === undefined) continue\n      if (lines[k].info.labelY !== undefined) {\n        if (lines[k].formula === undefined) {\n          value = getValue(this.data, lines[k].info.labelY, index)\n        } else {\n          value = getValue(this.father.getData(lines[k].formula.key), lines[k].info.labelY,\n            index - this.linkInfo.minIndex)\n        }\n        info = formatInfo(value, lines[k].info.format, this.static.coinunit, this.static.volzoom)\n        out.push({\n          index: k,\n          txt: lines[k].info.txt,\n          value: info\n        })\n      } else {\n        out.push({\n          index: k,\n          txt: lines[k].info.txt\n        })\n      }\n    }\n    return out\n  }\n  /**\n   * draw title info\n   * @param {Number} index title index\n   * @memberof ClChartLine\n   */\n  drawTitleInfo (index) {\n    if (this.config.title.display === 'none') return\n    if (index === undefined || index < 0 || index > this.linkInfo.maxIndex) index = this.linkInfo.maxIndex\n    this.childDraws['TITLE'].onPaint(this.getMoveData(index))\n  }\n  /**\n   * draw child\n   * @param {String} name child draw's name\n   * @memberof ClChartLine\n   */\n  drawChildDraw (name) {\n    if (this.childDraws[name] !== undefined) {\n      if (name === 'TITLE') {\n        this.drawTitleInfo(this.linkInfo.moveIndex)\n      } else {\n        this.childDraws[name].onPaint()\n      }\n    }\n  }\n  /**\n   * draw all the layers contained in this area\n   * @memberof ClChartLine\n   */\n  onPaint () {\n    this.beforeLocation() // 数据定位前需要做的事情\n\n    this.data = this.father.getData(this.hotKey)\n    this.locationData()\n    this.father.readyData(this.data, this.config.lines)\n\n    _setLineWidth(this.context, this.scale)\n    this.drawClear() // 清理画图区\n\n    this.drawChildDraw('GRID') // 先画线格\n\n    // 为画图做准备工作\n    this.readyDraw()\n    this.drawChildDraw('AXISX')\n    this.drawChildDraw('AXISY_LEFT')\n    this.drawChildDraw('AXISY_RIGHT')\n\n    this.drawChildLines() // 画出所有的线\n\n    this.drawChildDraw('TITLE')\n    this.drawChildCharts()\n\n    // this.img = _getImageData(this.context, this.rectMain.left, this.rectMain.top, this.rectMain.width, this.rectMain.height)\n  }\n\n  // ///////////////////////////////////////////////////////////\n  // 画图前的准备工作\n  // ////////////////////////////////////////////////////////////\n  /**\n   * get middle\n   * @param {String} method\n   * @return {Number}\n   * @memberof ClChartLine\n   */\n  getMiddle (method) {\n    let middle = this.config.axisY.left.middle\n    if (method === 'fixedRight') middle = this.config.axisY.right.middle\n    if (middle === 'before') return this.static.before\n    if (middle === 'zero') return 0\n    return 0\n  }\n  /**\n   * calc max and min data\n   * @param {Array} data\n   * @param {Object} extremum\n   * @param {Number} start\n   * @param {Number} stop\n   * @return {Object}\n   * @memberof ClChartLine\n   */\n  calcMaxMin (data, extremum, start, stop) {\n    const mm = {\n      max: 0.0,\n      min: 0.0\n    }\n    if (extremum.method === 'fixedLeft' || extremum.method === 'fixedRight') {\n      const middle = this.getMiddle(extremum.method)\n      mm.min = middle * (1 - 0.01)\n      mm.max = middle * (1 + 0.01)\n    }\n    if (data === undefined || isEmptyArray(data.value)) return mm\n\n    let value\n    if (start === undefined) start = 0\n    if (stop === undefined) stop = data.value.length - 1\n\n    for (let k = start; k <= stop; k++) {\n      if (!isEmptyArray(extremum.maxvalue)) {\n        for (let m = 0; m < extremum.maxvalue.length; m++) {\n          if (typeof (extremum.maxvalue[m]) !== 'string') continue\n          value = getValue(data, extremum.maxvalue[m], k)\n          if (value > 0 && value > mm.max) {\n            mm.max = value\n          }\n        }\n      }\n      if (!isEmptyArray(extremum.minvalue)) {\n        for (let m = 0; m < extremum.minvalue.length; m++) {\n          if (typeof (extremum.minvalue[m]) !== 'string') continue\n          value = getValue(data, extremum.minvalue[m], k)\n          if (mm.min === 0.0) mm.min = value\n          if (value > 0 && value < mm.min) {\n            mm.min = value\n          }\n        }\n      }\n    }\n    // //////////////////\n    if (!isEmptyArray(extremum.maxvalue)) {\n      for (let m = 0; m < extremum.maxvalue.length; m++) {\n        if (typeof (extremum.maxvalue[m]) === 'number') {\n          mm.max = extremum.maxvalue[m]\n          break\n        }\n      }\n    }\n    if (!isEmptyArray(extremum.minvalue)) {\n      for (let m = 0; m < extremum.minvalue.length; m++) {\n        if (typeof (extremum.minvalue[m]) === 'number') {\n          mm.min = extremum.minvalue[m]\n          break\n        }\n      }\n    }\n\n    if (extremum.method === 'fixedLeft' || extremum.method === 'fixedRight') {\n      const middle = this.getMiddle(extremum.method)\n      if (mm.max === mm.min) {\n        if (mm.max > middle) mm.min = middle\n        if (mm.min < middle) mm.max = middle\n      }\n      const maxrate = Math.abs(mm.max - middle) / middle\n      const minrate = Math.abs(middle - mm.min) / middle\n      if (maxrate < 0.01 && minrate < 0.01 &&\n        this.static.stktype !== STOCK_TYPE_INDEX) {\n        mm.min = middle * (1 - 0.01)\n        mm.max = middle * (1 + 0.01)\n      } else {\n        if (maxrate > minrate) {\n          // mm.min = middle / (1 + maxrate)\n          mm.min = middle * (1 - maxrate)\n        } else {\n          mm.max = middle * (1 + minrate)\n        }\n      }\n      if (mm.min < 0) mm.min = 0\n    }\n\n    return mm\n  }\n  /**\n   * ready for draw scroll\n   * @memberof ClChartLine\n   */\n  readyScroll () {\n    if (this.scroll.display === 'none') return\n    if (this.childCharts['HSCROLL'] !== undefined) {\n      let left = getValue(this.data, 'time', this.linkInfo.minIndex)\n      left = formatShowTime(this.data.key, left, this.father.dataLayer.tradeTime[0].begin)\n      let right = getValue(this.data, 'time', this.linkInfo.maxIndex)\n      right = formatShowTime(this.data.key, right,\n        this.father.dataLayer.tradeTime[this.father.dataLayer.tradeTime.length - 1].end)\n      let head = getValue(this.data, 'time', 0)\n      head = formatShowTime(this.data.key, head, this.father.dataLayer.tradeTime[0].begin)\n      let tail = getValue(this.data, 'time', this.data.value.length - 1)\n      tail = formatShowTime(this.data.key, tail,\n        this.father.dataLayer.tradeTime[this.father.dataLayer.tradeTime.length - 1].end)\n\n      this.childCharts['HSCROLL'].onChange({\n        head,\n        tail,\n        left,\n        right,\n        min: this.linkInfo.minIndex,\n        max: this.linkInfo.maxIndex,\n        range: this.data.value.length\n      })\n    }\n  }\n  /**\n   * get data range\n   * @param {Array} data\n   * @return {Object}\n   * @memberof ClChartLine\n   */\n  getDataRange (data) {\n    const out = {\n      minIndex: -1,\n      maxIndex: -1\n    }\n    if (isEmptyArray(data.value) || isEmptyArray(this.data.value)) return out\n    const start = getValue(this.data, 'time', this.linkInfo.minIndex)\n    const stop = getValue(this.data, 'time', this.linkInfo.maxIndex)\n    for (let k = 0; k <= data.value.length - 1; k++) {\n      const tt = getValue(data, 'time', k)\n      if (tt >= start) {\n        out.minIndex = k\n        break\n      }\n    }\n    for (let k = data.value.length - 1; k >= 0; k--) {\n      const tt = getValue(data, 'time', k)\n      if (tt <= stop) {\n        out.maxIndex = k\n        break\n      }\n    }\n    return out\n  }\n  /**\n   * location data\n   * @memberof ClChartLine\n   */\n  locationData () {\n    if (this.data === undefined) return\n    const size = getSize(this.data)\n    if (this.config.axisX.type === 'day1') {\n      setFixedLineFlags(\n        this.linkInfo, {\n          width: this.rectChart.width,\n          size,\n          scale: this.scale,\n          maxCount: getMinuteCount(this.father.dataLayer.tradeTime)\n        }\n      )\n    } else if (this.config.axisX.type === 'day5') {\n      setFixedLineFlags(\n        this.linkInfo, {\n          width: this.rectChart.width,\n          size,\n          scale: this.scale,\n          maxCount: 5 * getMinuteCount(this.father.dataLayer.tradeTime)\n        }\n      )\n    } else {\n      setMoveLineFlags(\n        this.linkInfo, {\n          width: this.rectChart.width,\n          scale: this.scale,\n          size\n        }\n      )\n    }\n  }\n  /**\n   * set ready for draw\n   * @memberof ClChartLine\n   */\n  readyDraw () { // 计算最大最小值等\n    // 画滚动块\n    this.readyScroll()\n\n    // 求最大最小值\n    let mm, maxmin\n    // const force = true;   // 由于定义了没有在后面使用，因此注释掉\n    for (let i = 0; i < this.config.lines.length; i++) {\n      if (this.config.lines[i].extremum === undefined) continue\n      if (isEmptyArray(this.config.lines[i].extremum.maxvalue) &&\n        isEmptyArray(this.config.lines[i].extremum.minvalue)) continue\n      // 只对第一个线和有需要的线计算最大最小值\n      // const ds = this.getLineDS(this.config.lines[i]);\n      const formula = this.config.lines[i].formula\n      if (formula !== undefined) {\n        const newdata = this.father.getData(formula.key)\n        const range = this.getDataRange(newdata)\n        mm = this.calcMaxMin(newdata, this.config.lines[i].extremum,\n          range.minIndex, range.maxIndex)\n      } else {\n        mm = this.calcMaxMin(this.data, this.config.lines[i].extremum,\n          this.linkInfo.minIndex, this.linkInfo.maxIndex)\n      }\n      if (maxmin === undefined) maxmin = mm\n      else {\n        maxmin.max = maxmin.max > mm.max ? maxmin.max : mm.max\n        maxmin.min = maxmin.min < mm.min ? maxmin.min : mm.min\n      }\n    } // for\n    this.maxmin.max = maxmin.max\n    this.maxmin.min = maxmin.min\n    this.maxmin.unitY = (this.rectChart.height - 2) / (this.maxmin.max - this.maxmin.min) // 一个单位价位多少像素\n  }\n\n  /**\n   * handle click event\n   * @param {Object} event\n   * @memberof ClChartLine\n   */\n  onClick (event) {\n    if (this.axisPlatform !== 'phone1') {\n      this.linkInfo.showCursorLine = !this.linkInfo.showCursorLine\n      if (this.linkInfo.showCursorLine) {\n        this.father.eventLayer.boardEvent(this.father, 'onMouseMove', event)\n      } else {\n        event.reDraw = true // 需要重画\n        this.father.eventLayer.boardEvent(this.father, 'onMouseOut', event)\n      }\n    }\n  }\n  /**\n   * handle long press\n   * @param {Object} event\n   * @memberof ClChartLine\n   */\n  onLongPress (event) {\n    this.linkInfo.showCursorLine = true\n    this.father.eventLayer.boardEvent(this.father, 'onMouseMove', event)\n  }\n  /**\n   * handle pinch\n   * @param {Object} event\n   * @memberof ClChartLine\n   */\n  onPinch (event) {\n    if (!this.config.zoomInfo) {\n      return\n    }\n    if (event.scale > 0) {\n      this.config.zoomInfo.index++\n    } else {\n      this.config.zoomInfo.index--\n    }\n    if (this.config.zoomInfo.index < 0) {\n      this.config.zoomInfo.index = 0\n      return\n    }\n    // this.setZoomInfo(Math.pow(2, this.config.zoomInfo.index) + 1)\n    this.setZoomInfo(this.config.zoomInfo.index * 2 + 1)\n    this.father.onPaint()\n  }\n  /**\n   * handle mouse out\n   * @param {Object} event\n   * @memberof ClChartLine\n   */\n  onMouseOut (event) {\n    if (this.linkInfo.showCursorLine || event.reDraw) {\n      this.linkInfo.moveIndex = this.linkInfo.maxIndex\n      this.drawTitleInfo(this.linkInfo.moveIndex)\n      // this.father.onPaint(this)\n    }\n    this.childDraws['CURSOR'].onClear()\n  }\n  /**\n   * handle mouse wheel\n   * @param {Object} event\n   * @memberof ClChartLine\n   */\n  onMouseWheel (event) {\n    if (this.config.zoomInfo === undefined) return\n\n    let step = Math.floor(event.deltaY / 10)\n    if (step === 0) step = event.deltaY > 0 ? 1 : -1\n    let newIndex\n    if (step > 0) newIndex = this.config.zoomInfo.index - 1\n    else newIndex = this.config.zoomInfo.index + 1\n    if (newIndex >= 0 && newIndex <= this.config.zoomInfo.list.length - 1) {\n      this.config.zoomInfo.index = newIndex\n      this.setZoomInfo()\n      this.father.onPaint()\n    }\n  }\n  /**\n   * handle key down\n   * @param {Object} event\n   * @memberof ClChartLine\n   */\n  onKeyDown (event) {\n    switch (event.keyCode) {\n      case 38: // up\n        break\n      case 40: // down\n        break\n      case 37: // left\n        break\n      case 39: // right\n        break\n    }\n  }\n  /**\n   * handle mouse move\n   * @param {Object} event\n   * @memberof ClChartLine\n   */\n  onMouseMove (event) {\n    if (this.linkInfo.hideInfo) return\n    if (!this.linkInfo.showCursorLine) return\n    // this.draw_clear();\n    // 找到X坐标对应的数据索引\n    const mousePos = event.mousePos\n    // if (this.img !== undefined) {\n    //   _putImageData(this.context, this.img, this.rectMain.left, this.rectMain.top)\n    // }\n\n    const mouseIndex = this.getMouseMoveData(mousePos.x)\n    let idx, valueY\n    let valueX = mouseIndex\n    if (mouseIndex > 0) {\n      if (this.config.axisX.type === 'day1' || this.config.axisX.type === 'day5') {\n        valueX = valueX % 240\n        valueX = fromIndexToTradeTime(valueX, this.father.dataLayer.tradeTime, this.father.dataLayer.tradeDate)\n        idx = findLabelToIndex(this.data, mouseIndex, 'idx')\n      } else {\n        valueX = getValue(this.data, 'time', mouseIndex)\n        idx = mouseIndex\n      }\n      if (inRangeX(this.rectChart, mousePos.x)) {\n        this.drawTitleInfo(idx)\n      }\n      if (this.linkInfo.moveIndex !== mouseIndex) {\n        this.linkInfo.moveIndex = mouseIndex\n        this.callback({\n          event: 'mousemove',\n          before: mouseIndex > 0 ? getValue(this.data, 'close', mouseIndex - 1) : getValue(this.data, 'open', 0),\n          data: this.data.value[mouseIndex]\n        })\n      }\n    }\n    this.childDraws['CURSOR'].onPaint(mousePos, valueX, valueY)\n  }\n  /**\n   * get mouse move data\n   * @param {Number} xpos\n   * @return {Number}\n   * @memberof ClChartLine\n   */\n  getMouseMoveData (xpos) {\n    const idx = Math.round((xpos - this.rectChart.left) / (this.linkInfo.unitX + this.linkInfo.spaceX) - 0.5)\n    if (this.config.axisX.type === 'day1') {\n      return idx\n    } else if (this.config.axisX.type === 'day5') {\n      return idx\n    } else {\n      return this.linkInfo.minIndex + idx\n    }\n  }\n\n  // /// ClChart end.\n}\n","/**\n * Copyright (c) 2018-present clchart Contributors.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// ////////////////////////////////////////////////////////////////\n//   画买卖盘\n// ///////////////////////////////////////////////////////////////\n// 画买卖盘和Tick\n\nimport {\n  _fillRect,\n  _drawRect,\n  _drawHline,\n  _setLineWidth,\n  _drawTxt,\n  _getTxtWidth,\n  _drawBegin,\n  _drawEnd\n} from '../util/cl.draw'\nimport {\n  fromTTimeToStr,\n  formatVolume,\n  formatPrice,\n  updateJsonOfDeep,\n  offsetRect\n} from '../util/cl.tool'\nimport {\n  initCommonInfo,\n  checkLayout\n} from '../chart/cl.chart.init'\nimport {\n  CHART_LAYOUT,\n  CHART_ORDER\n} from '../cl.chart.def'\nimport getValue from '../data/cl.data.tools'\nimport {\n  FIELD_NOW,\n  FIELD_NOW_IDX,\n  FIELD_TICK\n} from '../data/../cl.data.def'\n\n/**\n * Class representing ClChartOrder\n * @export\n * @class ClChartOrder\n */\nexport default class ClChartOrder {\n  /**\n\n   * Creates an instance of ClChartOrder.\n   * @param {Object} father order chart's parent context\n   */\n  constructor (father) {\n    initCommonInfo(this, father)\n    this.linkInfo = father.linkInfo\n    this.static = this.father.dataLayer.static\n  }\n  /**\n   * init order chart\n   * @param {Object} cfg\n   * @memberof ClChartOrder\n   */\n  init (cfg) {\n    this.rectMain = cfg.rectMain || { left: 0, top: 0, width: 200, height: 300 }\n    this.layout = updateJsonOfDeep(cfg.layout, CHART_LAYOUT)\n\n    this.config = updateJsonOfDeep(cfg.config, CHART_ORDER)\n\n    this.style = cfg.config.style || 'normal'\n    // 下面对配置做一定的校验\n    this.checkConfig()\n    // 再做一些初始化运算，下面的运算范围是初始化设置后基本不变的数据\n    this.setPublicRect()\n  }\n  /**\n   * check config\n   * @memberof ClChartOrder\n   */\n  checkConfig () { // 检查配置有冲突的修正过来\n    checkLayout(this.layout)\n    this.txtLen = _getTxtWidth(this.context, '涨', this.layout.digit.font, this.layout.digit.pixel)\n    this.timeLen = _getTxtWidth(this.context, '15:30', this.layout.digit.font, this.layout.digit.pixel)\n    this.volLen = _getTxtWidth(this.context, '888888', this.layout.digit.font, this.layout.digit.pixel)\n    this.closeLen = _getTxtWidth(this.context, '888.88', this.layout.digit.font, this.layout.digit.pixel)\n  }\n  /**\n   * Calculate all rectangular areas\n   * @memberof ClChartOrder\n   */\n  setPublicRect () {\n    this.rectChart = offsetRect(this.rectMain, this.layout.margin)\n  }\n  /**\n   * handle click event\n   * @memberof ClChartOrder\n   */\n  onClick (/* e */) {\n    if (this.isIndex) return // 如果是指数就啥也不干\n    if (this.style === 'normal') {\n      this.style = 'tiny'\n    } else {\n      this.style = 'normal'\n    }\n    this.father.onPaint(this)\n  }\n  /**\n   * paint order chart\n   * @memberof ClChartOrder\n   */\n  onPaint () {\n    this.codeInfo = this.father.getData('INFO')\n    this.orderData = this.father.getData('NOW')\n    this.tickData = this.father.getData('TICK')\n    if (this.orderData === undefined || this.tickData === undefined) return\n    this.orderData.coinunit = this.static.coinunit\n    this.tickData.coinunit = this.static.coinunit\n    this.isIndex = getValue(this.codeInfo, 'type') === 0\n\n    _setLineWidth(this.context, this.scale)\n    this.drawClear() // 清理画图区\n    this.drawReady() // 数据准备\n\n    if (this.isIndex) {\n      this.drawIndex()\n    } else {\n      this.drawOrder()\n    }\n    this.drawTick()\n  }\n  /**\n   * clear chart\n   * @memberof ClChartOrder\n   */\n  drawClear () {\n    _fillRect(this.context, this.rectMain.left, this.rectMain.top, this.rectMain.width, this.rectMain.height, this.color.back)\n  }\n  /**\n   * set ready for draw\n   * @memberof ClChartOrder\n   */\n  drawReady () {\n    if (this.tickData === undefined) {\n      this.tickData = {\n        key: 'TICK',\n        fields: FIELD_TICK,\n        value: []\n      }\n    }\n    if (this.orderData === undefined) {\n      this.orderData = {\n        key: 'NOW',\n        fields: FIELD_NOW,\n        value: []\n      }\n    }\n    let yy\n    if (this.style === 'normal') {\n      yy = this.rectChart.top + (this.layout.digit.height + this.layout.digit.spaceX) * 10\n    } else {\n      yy = this.rectChart.top + (this.layout.digit.height + this.layout.digit.spaceX) * 2\n    }\n    if (this.isIndex) {\n      yy = this.rectChart.top + (this.layout.digit.height + this.layout.digit.spaceX) * 4\n      this.rectOrder = {\n        left: this.rectChart.left,\n        top: this.rectChart.top,\n        width: this.rectChart.width,\n        height: yy\n      }\n    } else {\n      this.rectOrder = {\n        left: this.rectChart.left,\n        top: this.rectChart.top,\n        width: this.rectChart.width,\n        height: yy\n      }\n    }\n    if (this.config.title.display !== 'none') {\n      this.rectTitle = {\n        left: this.rectChart.left,\n        top: yy,\n        width: this.rectChart.width,\n        height: this.layout.title.height\n      }\n    } else {\n      this.rectTitle = {\n        left: 0,\n        top: 0,\n        width: 0,\n        height: 0\n      }\n    }\n    yy += this.rectTitle.height\n    this.rectTick = {\n      left: this.rectChart.left,\n      top: yy,\n      width: this.rectChart.width,\n      height: this.rectChart.height - yy - this.layout.digit.height / 2\n    }\n  }\n  /**\n   * get color by close and before data\n   * @param {Number} close\n   * @param {Number} before\n   * @return {String} color\n   * @memberof ClChartOrder\n   */\n  getColor (close, before) {\n    if (close > before) {\n      return this.color.red\n    } else if (close < before) {\n      return this.color.green\n    } else {\n      return this.color.white\n    }\n  }\n  /**\n   * draw index\n   * @memberof ClChartOrder\n   */\n  drawIndex () {\n    _drawBegin(this.context, this.color.grid)\n    _drawRect(this.context, this.rectMain.left, this.rectMain.top, this.rectMain.width, this.rectMain.height)\n\n    const offy = this.rectOrder.height / 3\n    const offx = this.rectOrder.width / 3\n    let xx, yy, len\n    let value\n\n    yy = this.rectOrder.top + Math.floor((offy - this.layout.digit.height) / 2) // 画最上面的\n\n    xx = this.rectOrder.left + (offx - this.txtLen) / 2\n    _drawTxt(this.context, xx, yy, '涨', this.layout.digit.font, this.layout.digit.pixel, this.color.txt)\n    xx = this.rectOrder.left + offx + (offx - this.txtLen) / 2\n    _drawTxt(this.context, xx, yy, '跌', this.layout.digit.font, this.layout.digit.pixel, this.color.txt)\n    xx = this.rectOrder.left + 2 * offx + (offx - this.txtLen) / 2\n    _drawTxt(this.context, xx, yy, '平', this.layout.digit.font, this.layout.digit.pixel, this.color.txt)\n\n    const inow = {\n      key: 'NOW',\n      fields: FIELD_NOW_IDX,\n      value: this.orderData.value\n    }\n    yy = this.rectOrder.top + offy + Math.floor((offy - this.layout.digit.height) / 2) // 画最上面的\n    value = formatVolume(getValue(inow, 'ups'), 1)\n    len = _getTxtWidth(this.context, value, this.layout.digit.font, this.layout.digit.pixel)\n    xx = this.rectOrder.left + (offx - len) / 2\n    _drawTxt(this.context, xx, yy, value, this.layout.digit.font, this.layout.digit.pixel, this.color.txt)\n\n    value = formatVolume(getValue(inow, 'downs'), 1)\n    len = _getTxtWidth(this.context, value, this.layout.digit.font, this.layout.digit.pixel)\n    xx = this.rectOrder.left + offx + (offx - len) / 2\n    _drawTxt(this.context, xx, yy, value, this.layout.digit.font, this.layout.digit.pixel, this.color.txt)\n\n    value = formatVolume(getValue(inow, 'mids'), 1)\n    len = _getTxtWidth(this.context, value, this.layout.digit.font, this.layout.digit.pixel)\n    xx = this.rectOrder.left + 2 * offx + (offx - len) / 2\n    _drawTxt(this.context, xx, yy, value, this.layout.digit.font, this.layout.digit.pixel, this.color.txt)\n\n    yy = this.rectOrder.top + 2 * offy + Math.floor((offy - this.layout.digit.height) / 2)\n\n    value = formatVolume(getValue(inow, 'upvol'), 1)\n    len = _getTxtWidth(this.context, value, this.layout.digit.font, this.layout.digit.pixel)\n    xx = this.rectOrder.left + (offx - len) / 2\n    _drawTxt(this.context, xx, yy, value, this.layout.digit.font, this.layout.digit.pixel, this.color.txt)\n\n    value = formatVolume(getValue(inow, 'downvol'), 1)\n    len = _getTxtWidth(this.context, value, this.layout.digit.font, this.layout.digit.pixel)\n    xx = this.rectOrder.left + offx + (offx - len) / 2\n    _drawTxt(this.context, xx, yy, value, this.layout.digit.font, this.layout.digit.pixel, this.color.txt)\n\n    if (this.config.title.display !== 'none') {\n      _drawHline(this.context, this.rectTitle.left, this.rectTitle.left + this.rectTitle.width, this.rectTitle.top)\n      _drawHline(this.context, this.rectTitle.left, this.rectTitle.left + this.rectTitle.width, this.rectTitle.top + this.rectTitle.height)\n      const ticklen = _getTxtWidth(this.context, '分时成交', this.layout.title.font, this.layout.digit.pixel)\n      xx = this.rectTitle.left + (this.rectTitle.width - ticklen) / 2\n      yy = this.rectTitle.top + 3 * this.scale\n      _drawTxt(this.context, xx, yy, '分时成交',\n        this.layout.digit.font, this.layout.digit.pixel, this.color.txt)\n    }\n    _drawEnd(this.context)\n  }\n  /**\n   * draw order\n   * @memberof ClChartOrder\n   */\n  drawOrder () {\n    const xpos = this.drawGridLine() // 先画线格\n    if (this.orderData === undefined || this.orderData.value.length < 1) {\n      return\n    }\n    const offx = (this.rectOrder.width - xpos - 2 * this.layout.digit.spaceX - this.closeLen - this.volLen) / 2\n\n    let mmpCount = 1\n    if (this.style === 'normal') {\n      mmpCount = 5\n    }\n    const offy = this.rectOrder.height / (mmpCount * 2)\n\n    let xx, yy\n    let value, clr\n\n    yy = this.rectOrder.top + Math.floor((offy - this.layout.digit.height) / 2) // 画最上面的\n    for (let idx = mmpCount; idx >= 1; idx--) {\n      xx = this.rectOrder.left + xpos + offx + this.closeLen\n      if (!this.linkInfo.hideInfo) {\n        value = getValue(this.orderData, 'sell' + idx)\n        clr = this.getColor(value, this.static.before)\n        _drawTxt(this.context, xx, yy, formatPrice(value, this.static.coinunit),\n          this.layout.digit.font, this.layout.digit.pixel, clr, {\n            x: 'end'\n          })\n      }\n\n      xx += offx + this.volLen + this.layout.digit.spaceX\n      value = getValue(this.orderData, 'sellvol' + idx)\n      clr = this.color.vol\n      _drawTxt(this.context, xx, yy, formatVolume(value, this.static.volzoom),\n        this.layout.digit.font, this.layout.digit.pixel, clr, {\n          x: 'end'\n        })\n\n      yy += offy\n    }\n    for (let idx = 1; idx <= mmpCount; idx++) {\n      xx = this.rectOrder.left + xpos + offx + this.closeLen\n      if (!this.linkInfo.hideInfo) {\n        value = getValue(this.orderData, 'buy' + idx)\n        clr = this.getColor(value, this.static.before)\n        _drawTxt(this.context, xx, yy, formatPrice(value, this.static.coinunit),\n          this.layout.digit.font, this.layout.digit.pixel, clr, {\n            x: 'end'\n          })\n      }\n      xx += offx + this.volLen + this.layout.digit.spaceX\n      value = getValue(this.orderData, 'buyvol' + idx)\n      clr = this.color.vol\n      _drawTxt(this.context, xx, yy, formatVolume(value, this.static.volzoom),\n        this.layout.digit.font, this.layout.digit.pixel, clr, {\n          x: 'end'\n        })\n\n      yy += offy\n    }\n  }\n  /**\n   * draw tick\n   * @memberof ClChartOrder\n   */\n  drawTick () {\n    if (this.tickData === undefined || this.tickData.value.length < 1) return\n    const maxlines = Math.floor(this.rectTick.height / this.layout.digit.height) - 1 // 屏幕最大能显示多少条记录\n    const recs = this.tickData.value.length\n    const beginIndex = recs > maxlines ? recs - maxlines : 0\n    const offy = this.rectTick.height / maxlines\n\n    let xx, yy\n    let value, clr\n    let offx = (this.rectTick.width - 4 * this.layout.digit.spaceX - this.timeLen - this.closeLen - this.volLen) / 2\n    if (this.isIndex) offx = (this.rectTick.width - 3 * this.layout.digit.spaceX - this.timeLen - this.closeLen) / 2\n\n    yy = this.rectTick.top + 2 + Math.floor((offy - this.layout.digit.pixel) / 2) // 画最上面的\n    for (let idx = recs - 1; idx >= beginIndex; idx--) {\n      // for (let idx = beginIndex; idx < recs; idx++) {\n      xx = this.rectTick.left + this.layout.digit.spaceX + this.timeLen\n      value = getValue(this.tickData, 'time', idx)\n      clr = this.color.txt\n      let str\n      if (idx === 0) {\n        str = fromTTimeToStr(value, 'minute')\n      } else {\n        str = fromTTimeToStr(value, 'minute', getValue(this.tickData, 'time', idx - 1))\n      }\n      _drawTxt(this.context, xx, yy, str,\n        this.layout.digit.font, this.layout.digit.pixel, clr, {\n          x: 'end'\n        })\n\n      if (this.isIndex) {\n        xx = this.rectTick.left + this.rectTick.width - this.layout.digit.spaceX\n\n        value = getValue(this.tickData, 'close', idx)\n        clr = this.getColor(value, this.static.before)\n        _drawTxt(this.context, xx, yy, formatPrice(value, this.static.coinunit),\n          this.layout.digit.font, this.layout.digit.pixel, clr, {\n            x: 'end'\n          })\n        yy += offy\n        continue\n      }\n      xx += offx + this.closeLen + this.layout.digit.spaceX\n\n      if (!this.linkInfo.hideInfo) {\n        value = getValue(this.tickData, 'close', idx)\n        clr = this.getColor(value, this.static.before)\n        _drawTxt(this.context, xx, yy, formatPrice(value, this.static.coinunit),\n          this.layout.digit.font, this.layout.digit.pixel, clr, {\n            x: 'end'\n          })\n      }\n      xx += offx + this.volLen + this.layout.digit.spaceX\n\n      value = getValue(this.tickData, 'decvol', idx)\n      clr = this.color.vol\n      _drawTxt(this.context, xx, yy, formatVolume(value, this.static.volzoom),\n        this.layout.digit.font, this.layout.digit.pixel, clr, {\n          x: 'end'\n        })\n\n      yy += offy\n    }\n  }\n  /**\n   * draw grid line\n   * @return {Number}\n   * @memberof ClChartOrder\n   */\n  drawGridLine () {\n    _drawBegin(this.context, this.color.grid)\n    _drawRect(this.context, this.rectMain.left, this.rectMain.top, this.rectMain.width, this.rectMain.height)\n\n    let mmpCount = 1\n    if (this.style === 'normal') {\n      mmpCount = 5\n    }\n    let len = 0\n    _drawHline(this.context, this.rectOrder.left, this.rectOrder.left + this.rectOrder.width, this.rectOrder.top + Math.floor(this.rectOrder.height / 2))\n\n    let xx, yy, value\n    const strint = ['①', '②', '③', '④', '⑤']\n    const offy = this.rectOrder.height / (mmpCount * 2)\n\n    len = _getTxtWidth(this.context, '卖①', this.layout.title.font, this.layout.digit.height)\n    yy = this.rectOrder.top + Math.floor((offy - this.layout.digit.pixel) / 2) // 画最上面的\n    for (let idx = mmpCount - 1; idx >= 0; idx--) {\n      xx = this.rectOrder.left + this.layout.digit.spaceX\n      value = '卖' + strint[idx]\n      _drawTxt(this.context, xx, yy, value,\n        this.layout.digit.font, this.layout.digit.pixel, this.color.txt)\n      yy += offy\n    }\n    for (let idx = 0; idx < mmpCount; idx++) {\n      xx = this.rectOrder.left + this.layout.digit.spaceX\n      value = '买' + strint[idx]\n      _drawTxt(this.context, xx, yy, value,\n        this.layout.digit.font, this.layout.digit.pixel, this.color.txt)\n      yy += offy\n    }\n    if (this.config.title.display !== 'none') {\n      _drawHline(this.context, this.rectTitle.left, this.rectTitle.left + this.rectTitle.width, this.rectTitle.top)\n      _drawHline(this.context, this.rectTitle.left, this.rectTitle.left + this.rectTitle.width, this.rectTitle.top + this.rectTitle.height)\n      if (this.style === 'normal') {\n        value = '分时成交 △'\n      } else {\n        value = '分时成交 ▽'\n      }\n      const ticklen = _getTxtWidth(this.context, value, this.layout.title.font, this.layout.digit.pixel)\n      xx = this.rectTitle.left + (this.rectTitle.width - ticklen) / 2\n      yy = this.rectTitle.top + 3 * this.scale\n      _drawTxt(this.context, xx, yy, value,\n        this.layout.digit.font, this.layout.digit.pixel, this.color.txt)\n    }\n    _drawEnd(this.context)\n    return len\n  }\n}\n","/**\n * Copyright (c) 2018-present clchart Contributors.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// Following is the entity definition of ClChart\n// generally only use this class to implement the function\n// A ClChart class is just a drawing of the chart belonging to the dispatch framework, mouse and keyboard events, and does not store data\n// When multiple maps are linked, the subgraphs are all here to get relevant information.\n\nimport {\n  copyJsonOfDeep\n} from '../util/cl.tool'\nimport ClChartLine from './cl.chart.line'\nimport ClChartOrder from './cl.chart.order'\nimport { setColor, setStandard } from '../chart/cl.chart.init'\n\nconst DEFAULT_LINKINFO = {\n  showMode: 'last',\n  // 'last' Targeted by the latest data, maxIndex=-1 shows the latest data\n  // 'move' Set this parameter when the move occurs, -- may not be required\n  // 'fixed' Fixed display of a certain range of time-shared charts and 5-day lines.\n  // 'locked' Specify a record in the middle\n  fixed: { // 对应fixed模式\n    min: -1, // 最小记录, 为-1表示最小记录加上left\n    max: -1, // 最大记录, 为-1表式最大记录减去right\n    left: 20,\n    right: 20\n  },\n  locked: { // 只有当showMode==‘locked’模式才有作用\n    index: -1, // 当前锁定的记录号，\n    set: 0.5 // 表示锁定在中间，1表示锁定在最后一条记录，当前记录的百分比\n  },\n  minIndex: -1, // 当前画面的起始记录号 -1 表示第一次\n  maxIndex: -1, // 当前画面的最大记录号 -1 表示第一次\n  hotIndex: -1, // 循环时需要定位当前数据的指针定位\n  showCursorLine: false, // 是否显示光标信息\n  moveIndex: -1, // 当前鼠标所在位置的记录号 -1 表示没有鼠标事件或第一次\n  spaceX: 2, // 每个数据的间隔像素，可以根据实际情况变化，但不能系统参数里设定的spaceX小\n  unitX: 5, // 每天数据的宽度 默认为5， 可以在1..50之间切换\n  rightMode: 'no', // 除权模式\n  hideInfo: false // 是否显示价格\n}\n/**\n * Class representing ClChart\n * @export\n * @class ClChart\n */\nexport default class ClChart {\n  /**\n\n   * Creates an instance of ClChart.\n   * @param {Object} syscfg\n   */\n  constructor (syscfg) {\n    this.context = syscfg.mainCanvas.context\n    this.cursorCanvas = syscfg.cursorCanvas\n    this.sysColor = syscfg.sysColor\n    // Use this to determine if it is the root element\n    this.father = undefined\n  }\n  /**\n   * Re-initialize Chart to clean up all charts and data\n   * @param {any} dataLayer data layer\n   * @param {any} eventLayer event layer\n   * @memberof ClChart\n   */\n  initChart (dataLayer, eventLayer) {\n    // linkInfo 是所有子chart公用的参数集合，也是dataLayer应用的集合\n    this.linkInfo = copyJsonOfDeep(DEFAULT_LINKINFO)\n    // this.checkConfig();\n    // 初始化子chart为空\n    this.childCharts = {}\n    // 设置数据层，同时对外提供设置接口\n    this.setDataLayer(dataLayer)\n    // 设置事件层，同时对外提供设置接口\n    this.setEventLayer(eventLayer)\n  }\n  /**\n   * clear current data and recharge linkinfo\n   *\n   * @memberof ClChart\n   */\n  clear () {\n    this.childCharts = {}\n    this.fastDraw = false\n    this.dataLayer.clearData()\n    // this.eventLayer.clear();\n    this.linkInfo = copyJsonOfDeep(DEFAULT_LINKINFO)\n  }\n  /**\n   * get child chart by key\n   * @param {String} key child chart key\n   * @return {Object} child chart\n   * @memberof ClChart\n   */\n  getChart (key) {\n    return this.childCharts[key]\n  }\n  // //////////////////////////////////////////////\n  // 以下是设置chart的事件关联接口，element表示映射的chart类\n  // 所有事件由外部获取事件后传递到eventLayer后，再统一分发给相应的图表\n  // eventLayer中有针对html5的鼠标键盘事件处理接口，其他事件处理接口另外再做\n  // ////////////////////////////////////////////\n  /**\n   * get event layer\n   * @return {Object} event layer\n   * @memberof ClChart\n   */\n  getEventLayer () {\n    return this.eventLayer\n  }\n  setEventLayer (layer) {\n    if (layer === undefined) return\n    this.eventLayer = layer\n    this.eventLayer.bindChart && this.eventLayer.bindChart(this) // 把chart绑定到事件处理层\n  }\n  // bindEvent (chart) {\n  //   this.eventLayer.bindEvent(chart);\n  // }\n\n  /**\n   * get data layer\n   * @return {Object} data layer\n   * @memberof ClChart\n   */\n  getDataLayer () {\n    return this.dataLayer\n  }\n  /**\n   * set data layer\n   * @param {Object} layer\n   * @memberof ClChart\n   */\n  setDataLayer (layer) {\n    if (layer === undefined) return\n    this.dataLayer = layer\n    layer.father = this\n    this.static = this.dataLayer.static\n  }\n  /**\n   * Set the corresponding basic data key of the chart\n   * @param {Object} chart\n   * @param {String} key\n   * @memberof ClChart\n   */\n  bindData (chart, key) {\n    if (chart.hotKey !== key) {\n      this.linkInfo.showMode = 'last' // 切换数据后需要重新画图\n      this.linkInfo.minIndex = -1\n      chart.hotKey = key // hotKey 针对chart的数据都调用该数据源\n      this.fastDrawEnd() // 热点数据改变，就重新计算\n    }\n  }\n  /**\n   * init data\n   * @param {Number} tradeDate trade date\n   * @param {Number} tradetime  trade time\n   * @memberof ClChart\n   */\n  initData (tradeDate, tradetime) {\n    this.dataLayer.initData(tradeDate, tradetime)\n  }\n  /**\n   * set data\n   * @param {String} key data key\n   * @param {Object} fields data field definition\n   * @param {any} value\n   * @memberof ClChart\n   */\n  setData (key, fields, value) {\n    let info = value\n    if (typeof value === 'string') info = JSON.parse(value)\n    this.dataLayer.setData(key, fields, info)\n    this.fastDrawEnd() // 新的数据被设置，就重新计算\n  }\n  /**\n   * get data from datalayer by key\n   * @param {String} key\n   * @return {Array}\n   * @memberof ClChart\n   */\n  getData (key) {\n    if (this.fastDraw) {\n      if (this.fastBuffer[key] !== undefined) {\n        return this.fastBuffer[key]\n      }\n    }\n    const out = this.dataLayer.getData(key, this.linkInfo.rightMode)\n    if (this.fastDraw) {\n      this.fastBuffer[key] = out\n    }\n    return out\n  }\n  /**\n   * init line data\n   * @param {Array} data\n   * @param {Array} lines\n   * @memberof ClChart\n   */\n  readyData (data, lines) {\n    for (let k = 0; k < lines.length; k++) {\n      if (lines[k].formula === undefined) continue\n      if (!this.fastDraw || (this.fastDraw && this.fastBuffer[lines[k].formula.key] === undefined)) {\n        this.dataLayer.makeLineData(\n          { data, minIndex: this.linkInfo.minIndex, maxIndex: this.linkInfo.maxIndex },\n          lines[k].formula.key,\n          lines[k].formula.command\n        )\n      }\n    }\n  }\n  /**\n   * create chart\n   * @param {String} name name is a unique name, the same name will override the previous class with the same name\n   * @param {String} className class name\n   * @param {Object} usercfg user custom config\n   * @param {Function} callback callback\n   * @return {Object} chart instance\n   * @memberof ClChart\n   */\n  createChart (name, className, usercfg, callback) {\n    let chart\n    switch (className) {\n      case 'CHART.ORDER': chart = new ClChartOrder(this); break\n      case 'CHART.LINE': chart = new ClChartLine(this); break\n      default : chart = new ClChartLine(this); break\n    }\n\n    chart.name = name\n    this.childCharts[name] = chart\n\n    // this.bindEvent(chart);\n    chart.init(usercfg, callback) // 根据用户配置初始化信息框\n\n    return chart\n  }\n\n  /**\n   * draw all the layers contained in this area\n   * @param {Object} chart\n   * @memberof ClChart\n   */\n  onPaint (chart) {\n    if (typeof this.context._beforePaint === 'function') {\n      this.context._beforePaint()\n    }\n    this.fastDrawBegin()\n\n    for (const key in this.childCharts) {\n      if (chart !== undefined) {\n        if (this.childCharts[key] === chart) {\n          this.childCharts[key].onPaint()\n        }\n      } else {\n        this.childCharts[key].onPaint()\n      }\n    }\n    // this.fastDrawEnd();\n    if (typeof this.context._afterPaint === 'function') {\n      this.context._afterPaint()\n    }\n  }\n  /**\n   * Used for the same group of multi-graph only take data once, this can speed up the display, the program structure will not be chaotic\n   * @memberof ClChart\n   */\n  fastDrawBegin () {\n    if (!this.fastDraw) {\n      this.fastBuffer = []\n      this.fastDraw = true\n    }\n  }\n  /**\n   * set whether to turn on quick drawing\n   * @memberof ClChart\n   */\n  fastDrawEnd () {\n    this.fastDraw = false\n  }\n\n  /**\n   * Set whether to hide the information bar\n   * @param {String} isHideInfo\n   * @memberof ClChart\n   */\n  setHideInfo (isHideInfo) {\n    if (isHideInfo === undefined) return\n    if (isHideInfo !== this.linkInfo.hideInfo) {\n      this.linkInfo.hideInfo = isHideInfo\n      this.onPaint()\n    }\n  }\n  /**\n   * Set the background color\n   * @param {String} sysColor\n   * @param {Object | null} chart\n   * @memberof ClChart\n   */\n  setColor (sysColor, chart) {\n    this.color = setColor(sysColor)\n    if (chart === undefined) chart = this\n    for (const key in chart.childCharts) {\n      chart.childCharts[key].color = this.color\n      this.setColor(sysColor, chart.childCharts[key])\n    }\n    // 需要将其子配置的颜色也一起改掉\n    for (const key in chart.childDraws) {\n      chart.childDraws[key].color = this.color\n      this.setColor(sysColor, chart.childDraws[key])\n    }\n    for (const key in chart.childLines) {\n      chart.childLines[key].color = this.color\n      this.setColor(sysColor, chart.childLines[key])\n    }\n    this.sysColor = sysColor\n  }\n  /**\n   * setting drafting standards\n   * @param {String} standard\n   * @memberof ClChart\n   */\n  setStandard (standard) {\n    setStandard(standard)\n    this.setColor(this.sysColor)\n    this.onPaint()\n  }\n  // this.makeLineData = function(data, key, formula, punit) {\n  //   return this.dataLayer.makeLineData(data, key, this.linkInfo.minIndex, this.linkInfo.maxIndex, formula);\n  // }\n}\n","/**\n * Copyright (c) 2018-present clchart Contributors.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/*\n  The canvas needs to have two methods\n  eventCanvas: {\n    addEventListener: () => {},\n    removeEventListener: () => {}\n  }\n*/\n\n/*\n  // Event object required attributes\n  event: {\n    touches: [\n      pageX: 0,\n      pageY: 0,\n      offsetX: 0,\n      offsetY: 0,\n    ],\n    changedTouches: [],\n    target: {\n      getBoundingClientRect: () => {}\n    },\n    preventDefault: () => {}\n  }\n*/\n\n/**\n * Get distance\n * @param {Number} xLen\n * @param {Number} yLen\n * @return {Number}\n */\nfunction _getDistance (xLen, yLen) {\n  return Math.sqrt(xLen * xLen + yLen * yLen)\n}\n/**\n * Get the rotation direction of the vector\n */\nfunction _getRotateDirection (vector1, vector2) {\n  return vector1.x * vector2.y - vector2.x * vector1.y\n}\n\nfunction _getRotateAngle (vector1, vector2) {\n  let direction = _getRotateDirection(vector1, vector2)\n  direction = direction > 0 ? -1 : 1\n  const len1 = _getDistance(vector1.x, vector1.y)\n  const len2 = _getDistance(vector2.x, vector2.y)\n  const mr = len1 * len2\n  if (mr === 0) return 0\n  const dot = vector1.x * vector2.x + vector1.y * vector2.y\n  let r = dot / mr\n  if (r > 1) r = 1\n  if (r < -1) r = -1\n  return Math.acos(r) * direction * 180 / Math.PI\n}\n\nfunction _getTouchInfo (point, element) {\n  const mouseInfo = {\n    name: 'touch'\n  }\n  if (point.offsetX && point.offsetX === 0) {\n    mouseInfo.offsetX = point.offsetX\n    mouseInfo.offsetY = point.offsetY\n  } else {\n    let srcRect = {\n      left: 0,\n      top: 0\n    }\n    if (element && typeof element.getBoundingClientRect === 'function') srcRect = element.getBoundingClientRect()\n    mouseInfo.offsetX = point.pageX - srcRect.left\n    mouseInfo.offsetY = point.pageY - srcRect.top\n  }\n  return mouseInfo\n}\n\nfunction _getEventInfo (event) {\n  return {\n    offsetX: event.offsetX,\n    offsetY: event.offsetY\n  }\n}\n\n/**\n * Class representing ClEventHandler\n * @export\n * @class ClEventHandler\n */\nexport default class ClEventHandler {\n  /**\n   * Creates an instance of ClEventHandler.\n   * @param {Object} {\n   * father,\n   * eventBuild,\n   * isTouch\n   * }\n   * @constructor\n   */\n  constructor ({father, eventBuild, isTouch}) {\n    this.father = father\n    this.eventCanvas = father.eventCanvas\n    if (typeof eventBuild === 'function') {\n      this.eventBuild = eventBuild\n    } else {\n      this.eventBuild = (e) => e\n    }\n    // Determine whether touch event is supported\n    this.isTouch = !!isTouch\n\n    // Remove long press popup button\n    this.eventCanvas.addEventListener && this.eventCanvas.addEventListener('contextmenu', e => {\n      e.preventDefault()\n    })\n  }\n  /**\n   * bind evnet\n   * @memberof ClEventHandler\n   */\n  bindEvent () {\n    if (this.isTouch) {\n      this.addHandler('touchstart', this.touchstart.bind(this))\n      this.addHandler('touchend', this.touchend.bind(this))\n      this.addHandler('touchmove', this.touchmove.bind(this))\n    } else {\n      this.addHandler('mousemove', this.mousemove.bind(this))\n      // this.addHandler('mousein', this.mousein.bind(this));\n      this.addHandler('mouseout', this.mouseout.bind(this))\n      this.addHandler('mousewheel', this.mousewheel.bind(this))\n      this.addHandler('mouseup', this.mouseup.bind(this))\n      this.addHandler('mousedown', this.mousedown.bind(this))\n      this.addHandler('keyup', this.keyup.bind(this))\n      this.addHandler('keydown', this.keydown.bind(this))\n\n      this.addHandler('click', this.click.bind(this))\n    }\n  }\n  /**\n   * clear event listener\n   * @memberof ClEventHandler\n   */\n  clearEvent () {\n    if (this.isTouch) {\n      this.clearHandler('touchstart', this.touchstart.bind(this))\n      this.clearHandler('touchend', this.touchend.bind(this))\n      this.clearHandler('touchmove', this.touchmove.bind(this))\n    } else {\n      this.clearHandler('mousemove', this.mousemove.bind(this))\n      // this.clearHandler('mousein', this.mousein.bind(this));\n      this.clearHandler('mouseout', this.mouseout.bind(this))\n      this.clearHandler('mousewheel', this.mousewheel.bind(this))\n      this.clearHandler('mouseup', this.mouseup.bind(this))\n      this.clearHandler('mousedown', this.mousedown.bind(this))\n      this.clearHandler('keyup', this.keyup.bind(this))\n      this.clearHandler('keydown', this.keydown.bind(this))\n\n      this.clearHandler('click', this.click.bind(this))\n    }\n  }\n  /**\n   * add handle for events\n   * @param {String} eventName\n   * @param {Function} handler\n   * @memberof ClEventHandler\n   */\n  addHandler (eventName, handler) {\n    if (this.eventCanvas.addEventListener) {\n      this.eventCanvas.addEventListener(eventName, handler, false)\n    } else if (this.eventCanvas.attachEvent) {\n      this.eventCanvas.attachEvent('on' + eventName, handler)\n    } else {\n      this.eventCanvas['on' + eventName] = handler\n    }\n  }\n  /**\n   * Clean up all binding events\n   * @param {String} eventName\n   * @param {Function} handler\n   * @memberof ClEventHandler\n   */\n  clearHandler (eventName, handler) {\n    if (this.eventCanvas.removeEventListener) {\n      this.eventCanvas.removeEventListener(eventName, handler, false)\n    } else if (this.eventCanvas.deattachEvent) {\n      this.eventCanvas.deattachEvent('on' + eventName, handler)\n    } else {\n      this.eventCanvas['on' + eventName] = null\n    }\n  }\n  // The following is an event handler\n  /**\n   * mouse move\n   * @param {Object} event\n   * @memberof ClEventHandler\n   */\n  mousemove (event) {\n    this.father.emitEvent('onMouseMove', _getEventInfo(event))\n  }\n  /**\n   * mouse in\n   * @param {Object} event\n   * @memberof ClEventHandler\n   */\n  mousein (event) {\n    this.father.emitEvent('onMouseIn', _getEventInfo(event))\n  }\n  /**\n   * mouse out\n   * @param {Object} event\n   * @memberof ClEventHandler\n   */\n  mouseout (event) {\n    this.father.emitEvent('onMouseOut', _getEventInfo(event))\n  }\n  /**\n   * mouse whell\n   * @param {Object} event\n   * @memberof ClEventHandler\n   */\n  mousewheel (event) {\n    const info = _getEventInfo(event)\n    info.deltaY = event.deltaY\n    this.father.emitEvent('onMouseWheel', info)\n  }\n  /**\n   * mouse up\n   * @param {Object} event\n   * @memberof ClEventHandler\n   */\n  mouseup (event) {\n    this.father.emitEvent('onMouseUp', _getEventInfo(event))\n  }\n  /**\n   * mouse down\n   * @param {Object} event\n   * @memberof ClEventHandler\n   */\n  mousedown (event) {\n    this.father.emitEvent('onMouseDown', _getEventInfo(event))\n  }\n  // keyboard event\n  /**\n   * key up\n   * @param {Object} event\n   * @memberof ClEventHandler\n   */\n  keyup (event) {\n    const info = _getEventInfo(event)\n    info.keyCode = event.keyCode\n    this.father.emitEvent('onKeyUp', info)\n  }\n  /**\n   * key down\n   * @param {Object} event\n   * @memberof ClEventHandler\n   */\n  keydown (event) {\n    const info = _getEventInfo(event)\n    info.keyCode = event.keyCode\n    this.father.emitEvent('onKeyDown', info)\n  }\n  /**\n   * click event\n   * @param {Object} event\n   * @memberof ClEventHandler\n   */\n  click (event) {\n    this.father.emitEvent('onClick', _getEventInfo(event))\n  }\n  /**\n   * touchstart\n   * @param {Object} e\n   * @memberof ClEventHandler\n   */\n  touchstart (e) {\n    const event = this.eventBuild(e)\n    this.__timestamp = new Date()\n    const point = event.touches ? event.touches[0] : event\n    this.startX = point.pageX\n    this.startY = point.pageY\n    clearTimeout(this.longTapTimeout)\n    this.startTime = Date.now()\n    // Two-point touch\n    if (event.touches.length > 1) {\n      const point2 = event.touches[1]\n      const xLen = Math.abs(point2.pageX - this.startX)\n      const yLen = Math.abs(point2.pageY - this.startY)\n      this.touchDistance = _getDistance(xLen, yLen)\n      this.touchVector = {\n        x: point2.pageX - this.startX,\n        y: point2.pageY - this.startY\n      }\n    } else {\n      this.longTapTimeout = setTimeout(() => {\n        this.father.emitEvent('onLongPress', _getTouchInfo(point, event.target))\n      }, 600)\n      if (this.previousTouchPoint) {\n        if (Math.abs(this.startX - this.previousTouchPoint.startX) < 10 &&\n          Math.abs(this.startY - this.previousTouchPoint.startY) < 10 &&\n          Math.abs(this.startTime - this.previousTouchTime) < 300) {\n          this.father.emitEvent('onDoubleClick', _getTouchInfo(point, event.target))\n        }\n      }\n      this.previousTouchTime = this.startTime\n      this.previousTouchPoint = {\n        startX: this.startX,\n        startY: this.startY\n      }\n    }\n  }\n  /**\n   * touchedn\n   * @param {Object} e\n   * @memberof ClEventHandler\n   */\n  touchend (e) {\n    const event = this.eventBuild(e)\n    clearTimeout(this.longTapTimeout)\n    const point = event.changedTouches ? event.changedTouches[0] : event\n    const timestamp = Date.now()\n    if ((this.moveX !== null && Math.abs(this.moveX - this.startX) > 10) ||\n      (this.moveY !== null && Math.abs(this.moveY - this.startY) > 10)) {\n      if (timestamp - this.startTime < 500) {\n        this.father.emitEvent('onSwipe', _getTouchInfo(point, event.target))\n      }\n    } else if (timestamp - this.startTime < 2000) {\n      if (timestamp - this.startTime < 500) {\n        this.father.emitEvent('onClick', _getTouchInfo(point, event.target))\n      }\n      if (timestamp - this.startTime > 500) {\n        this.father.emitEvent('onLongPress', _getTouchInfo(point, event.target))\n      }\n    }\n    this.startX = this.startY = this.moveX = this.moveY = null\n    this.previousPinchScale = 1\n    this.father.emitEvent('onMouseOut', _getTouchInfo(point, event.target))\n  }\n  /**\n   * touchmove\n   * @param {Object} e\n   * @memberof ClEventHandler\n   */\n  touchmove (e) {\n    const event = this.eventBuild(e)\n    if (new Date() - this.__timestamp < 150) {\n      return event\n    }\n    const timestamp = Date.now()\n    if (event.touches.length > 1) {\n      const xLen = Math.abs(event.touches[0].pageX - event.touches[1].pageX)\n      const yLen = Math.abs(event.touches[0].pageY - event.touches[1].pageY)\n      const touchDistance = _getDistance(xLen, yLen)\n      // Calculate scaling events\n      if (this.touchDistance) {\n        const pinchScale = touchDistance / this.touchDistance\n        const point = event.touches ? event.touches[0] : event\n        // this._emitEvent('onPinch', { scale: pinchScale - this.previousPinchScale }); // 缩放\n        const mouseinfo = _getTouchInfo(point, event.target)\n        if ((timestamp - this.startTime) > 90 && this.previousPinchScale) {\n          mouseinfo.scale = pinchScale - this.previousPinchScale\n          if (Math.abs(mouseinfo.scale) > 0.01) {\n            this.father.emitEvent('onPinch', mouseinfo)\n          }\n          this.startTime = Date.now()\n        }\n        this.previousPinchScale = pinchScale\n      }\n      // Calculating rotation events\n      if (this.touchVector) {\n        const vector = {\n          x: event.touches[1].pageX - event.touches[0].pageX,\n          y: event.touches[1].pageY - event.touches[0].pageY\n        }\n        const angle = _getRotateAngle(vector, this.touchVector)\n        // this._emitEvent('onRotate', {\n        //   angle\n        // })\n        this.father.emitEvent('onRotate', {\n          angle\n        })\n        this.touchVector.x = vector.x\n        this.touchVector.y = vector.y\n      }\n    } else {\n      clearTimeout(this.longTapTimeout)\n      const point = event.touches ? event.touches[0] : event\n      const deltaX = this.moveX === null ? 0 : point.pageX - this.moveX\n      const deltaY = this.moveY === null ? 0 : point.pageY - this.moveY\n      // this._emitEvent('onMove', { deltaX, deltaY });\n      const config = _getTouchInfo(point, event.target)\n      config.deltaX = deltaX\n      config.deltaY = deltaY\n      this.father.emitEvent('onMouseMove', config)\n      this.moveX = point.pageX\n      this.moveY = point.pageY\n    }\n    if (typeof event.preventDefault === 'function') event.preventDefault()\n  }\n}\n","/**\n * Copyright (c) 2018-present clchart Contributors.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// /////////////////////////////////////////////////\n// 定义事件监听接口\n// ////////////////////////////////////////////////\n// 鼠标事件\n//  onMouseMove // 移动\n//  onMouseIn  // 进入\n//  monMouseOut // 离开\n//  onMousewheel // 滚动\n//  onMouseUp  //\n//  onMouseDown //\n// 键盘事件\n//  onKeyUp\n//  onKeyDown\n// 触摸事件\n//  onTouchStart // 触摸开始\n//  onTouchEnd   // 触摸结束\n//  onTouchMove  // 触摸移动\n// 其他事件\n//  onClick // 点击\n//  onLongPress // 长按\n//  onPinch // 两指放大或缩小\n//  onRotate // 旋转\n//  onSwipe //左滑或右滑\nimport {\n  copyJsonOfDeep,\n  inRect\n} from '../util/cl.tool'\nimport ClEventHandler from './cl.event.handler'\n\nexport const EVENT_DEFINE = [\n  'onMouseMove',\n  // 'onMouseIn',\n  'onMouseOut',\n  'onMousewheel',\n  'onMouseUp',\n  'onMouseDown',\n  'onKeyUp',\n  'onKeyDown',\n  'onClick',\n  'onDoubleClick',\n  'onLongPress',\n  'onPinch',\n  'onRotate',\n  'onSwipe'\n]\n\nexport function buildMinaTouchEvent (e) {\n  const eventObj = {}\n  if (e && Array.isArray(e.touches)) {\n    eventObj.touches = []\n    for (let i = 0; i < e.touches.length; i++) {\n      const point = e.touches[i]\n      eventObj.touches.push({\n        pageX: point.x,\n        pageY: point.y,\n        offsetX: point.x,\n        offsetY: point.y\n      })\n    }\n  }\n  if (e && Array.isArray(e.changedTouches)) {\n    eventObj.changedTouches = []\n    for (let i = 0; i < e.changedTouches.length; i++) {\n      const point = e.changedTouches[i]\n      eventObj.changedTouches.push({\n        pageX: point.x,\n        pageY: point.y,\n        offsetX: point.x,\n        offsetY: point.y\n      })\n    }\n  }\n  return eventObj\n}\n\n/**\n * Class representing ClEvent\n * @export\n * @class ClEvent\n */\nexport default class ClEvent {\n  /**\n   * Creates an instance of ClEvent.\n   * @param {Object} syscfg\n   * @constructor\n   */\n  constructor (syscfg) {\n    // this.eventCanvas = syscfg.mainCanvas.canvas // 对web来说就是虚拟接收事件的canvas\n    this.eventCanvas = syscfg.cursorCanvas.canvas\n    this.eventPlatform = syscfg.eventPlatform || 'web'\n    this.scale = syscfg.scale\n\n    const eventCfg = {\n      father: this\n    }\n    if (this.eventPlatform === 'react-native') {\n      eventCfg.isTouch = true\n    } else if (this.eventPlatform === 'web') {\n      eventCfg.isTouch = 'ontouchend' in document\n    } else if (this.eventPlatform === 'mina') {\n      eventCfg.isTouch = true\n      eventCfg.eventBuild = buildMinaTouchEvent\n    }\n    this.eventSource = new ClEventHandler(eventCfg)\n    this.eventSource.bindEvent()\n  }\n  // 只需要绑定一个原始ClChart就可以了，子图的事件通过childCharts来判断获取\n  // 每个chart如果自己定义了对应事件就会分发，未定义不分发，分发后以返回值判断是否继续传递到下一个符合条件的chart\n  /**\n   * bind event\n   * @param {Object} source\n   * @memberof ClEvent\n   */\n  bindChart (source) {\n    this.firstChart = source\n    this.HotWin = undefined\n  }\n  /**\n   * clear event\n   * @memberof ClEvent\n   */\n  clearEvent () {\n    this.eventSource.clearEvent()\n  }\n  // 下面是接收事件后,根据热点位置来判断归属于哪一个chart,并分发事件;\n  // config 必须包含鼠标位置 {offsetX:offsetY:}\n  /**\n   * emit event\n   * @param {String} eventName\n   * @param {Object} config\n   * @memberof ClEvent\n   */\n  emitEvent (eventName, config) {\n    // .....这里需要特殊分解处理Out的事件\n    if (eventName === 'onMouseOut' || eventName === 'onMouseMove') {\n      this.boardEvent(this.firstChart, eventName, config)\n      this.HotWin = undefined\n      return\n    }\n    const mousePos = this.getMousePos(config)\n    const chartPath = []\n    for (const name in this.firstChart.childCharts) {\n      // 判断鼠标在哪个区域\n      if (inRect(this.firstChart.childCharts[name].rectMain, mousePos)) {\n        // 取得事件冒泡顺序\n        this.findEventPath(chartPath, this.firstChart.childCharts[name], mousePos)\n        // 只处理符合条件的一个区域，重叠区域不考虑\n        break\n      }\n    }\n    if (chartPath.length < 1) return\n    // 继承最初始的传入参数,从最顶层开始处理\n    const event = copyJsonOfDeep(config)\n    for (let k = chartPath.length - 1; k >= 0; k--) {\n      if (chartPath[k][eventName] !== undefined) {\n        // 这里生成一个相对鼠标位置\n        event.mousePos = {\n          // x: mousePos.x - chartPath[k].rectMain.left,\n          // y: mousePos.y - chartPath[k].rectMain.top\n          x: mousePos.x,\n          y: mousePos.y\n        }\n        // 执行事件函数\n        chartPath[k][eventName](event)\n        if (event.break) break // 跳出循环\n      }\n    }\n  }\n  // 用于鼠标联动时，向childCharts同一级别画图区域广播事件\n  //\n  /**\n   * board event\n   * @param {Object} chart\n   * @param {String} eventName\n   * @param {Object} config\n   * @param {Object} ignore\n   * @memberof ClEvent\n   */\n  boardEvent (chart, eventName, config, ignore) {\n    const event = copyJsonOfDeep(config)\n    const mousePos = this.getMousePos(config)\n\n    for (const name in chart.childCharts) {\n      if (chart.childCharts[name] === ignore) continue\n      if (chart.childCharts[name][eventName] === undefined) continue\n\n      event.mousePos = {\n        // x: mousePos.x - chart.childCharts[name].rectMain.left,\n        // y: mousePos.y - chart.childCharts[name].rectMain.top\n        x: mousePos.x,\n        y: mousePos.y\n      }\n      chart.childCharts[name][eventName](event)\n      if (event.break) break\n    }\n  }\n  /**\n   * find event path\n   * @param {Array} path\n   * @param {Object} chart\n   * @param {Object} mousePos\n   * @memberof ClEvent\n   */\n  findEventPath (path, chart, mousePos) {\n    path.push(chart)\n    if (chart.childCharts === undefined) return\n\n    for (const name in chart.childCharts) {\n      if (inRect(chart.childCharts[name].rectMain, mousePos)) {\n        this.findEventPath(path, chart.childCharts[name], mousePos)\n      }\n    }\n  }\n  /**\n   * get mouse position info\n   * @param {Object} event\n   * @return {Object} mouse position info\n   * @memberof ClEvent\n   */\n  getMousePos (event) {\n    const mouseX = event.offsetX * this.scale\n    const mouseY = event.offsetY * this.scale\n    return {\n      x: mouseX,\n      y: mouseY\n    }\n  }\n}\n","/**\n * Copyright (c) 2018-present clchart Contributors.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// //////////////////////////////////////////////////\n// 以下是ClData的实体定义\n// 一般只用操作这个类就可以获取单个股票的所有数据\n// 不支持多个股票的数据，对于列表来说，这里只保存ID列表，其他的数据由实际画图自行获取，\n// //////////////////////////////////////////////////\n\nimport {\n  fromTradeTimeToIndex,\n  fromIndexToTradeTime,\n  checkZero,\n  getSize,\n  checkDayZero,\n  checkDay5,\n  updateStatic,\n  findDateInDay,\n  findIndexInMin,\n  matchDayToWeek,\n  matchDayToMon,\n  getMinuteCount,\n  transExrightMin,\n  transExrightDay\n} from './cl.data.tools'\nimport {\n  FIELD_INFO,\n  FIELD_DAY,\n  FIELD_MIN,\n  FIELD_TICK,\n  FIELD_DAY5,\n  FIELD_NOW,\n  FIELD_ILINE,\n  FIELD_ENOW\n} from '../cl.data.def'\nimport {\n  getDate,\n  isEmptyArray,\n  copyArrayOfDeep\n} from '../util/cl.tool'\nimport {\n  ClFormula\n} from '../formula/cl.formula'\n// 只保存一只股票的信息，当前日期，开收市时间\n\n/**\n * Class representing ClData\n * data layer\n * @export\n * @class ClData\n */\nexport default class ClData {\n  /**\n   * Creates an instance of ClData.\n\n   */\n  constructor () {\n    // this.formula = new ClFormula();\n    this.static = {\n      stktype: 1,\n      volunit: 100,\n      coinunit: 100,\n      decimal: 2,\n      before: 1000,\n      stophigh: 1100,\n      stoplow: 900\n    }\n  }\n\n  // 只保存一只股票的信息，当前日期，开收市时间\n  /**\n   * init data\n   * @param {Number} tradeDate\n   * @param {Number} tradetime\n   * @memberof ClData\n   */\n  initData (tradeDate, tradetime) {\n    this.formula = new ClFormula()\n    this.clearData()\n    if (tradetime === undefined) {\n      this.tradeTime = [{\n        begin: 930,\n        end: 1130\n      },\n      {\n        begin: 1300,\n        end: 1500\n      }\n      ]\n    } else {\n      this.tradeTime = tradetime\n    }\n\n    if (tradeDate === undefined) {\n      this.tradeDate = getDate() // 得到当天的日期\n    } else {\n      this.tradeDate = tradeDate // 最近一个交易日期，并不一定等于今天的日期，比如节假日期间\n    }\n  }\n  // 包含一个股票所有的数据,以便于以后做公式系统也使用这个数据定义\n  /**\n   * clear data\n   * @memberof ClData\n   */\n  clearData () {\n    this.InData = [] // 数据 json格式数据 {key:..,fields:.., value:[[],[]...]}\n    this.OutData = [] // 专门用于获取数据时临时产生的数据\n  }\n  // //////////////////////\n  // 下面是设置数据的方法\n  // ////////////////////\n  /**\n   * set data\n   * @param {String} key\n   * @param {Object} fields\n   * @param {Array} value\n   * @memberof ClData\n   */\n  setData (key, fields, value) {\n    if (value === undefined) value = []\n    if (this.InData[key] === undefined) this.InData[key] = {}\n    switch (key) {\n      case 'DAY5':\n        value = checkDay5(value, this.static.coinzoom, this.tradeDate, this.tradeTime)\n        break\n      case 'NOW':\n      case 'ENOW':\n        this.flushNowData(key, value)\n        break\n      case 'MIN':\n      case 'DAY':\n        value = checkDayZero(value, this.tradeDate)\n        break\n      case 'INFO':\n        this.static = updateStatic(FIELD_INFO, value)\n        break\n    }\n    // // 设置了CODE或者INFO后，把一些常用的数取出来放到static中\n    // 仅仅接收以上和 MIN5 RIGHT 等原始数据，周月年和其他周期分钟线，全部通过计算获取\n    this.InData[key] = {\n      key,\n      fields\n    }\n    this.InData[key].value = copyArrayOfDeep(value)\n  }\n  /**\n   * flush tick\n   * @param {Array} nowdata\n   * @param {Array} fields\n   * @memberof ClData\n   */\n  flushTick (nowdata, fields) {\n    // if (this.static.stktype == 0) return ;\n    if (getSize(this.InData['TICK']) < 1) {\n      if (nowdata[fields.vol] > 0) {\n        this.InData['TICK'] = {\n          key: 'TICK',\n          fields: FIELD_TICK,\n          value: [nowdata[fields.time], nowdata[fields.close], nowdata[fields.vol]]\n        }\n      }\n    } else {\n      if (this.InData['TICK'].value[this.InData['TICK'].value.length - 1][FIELD_TICK.vol] < nowdata[fields.vol] ||\n        this.InData['TICK'].value[this.InData['TICK'].value.length - 1][FIELD_TICK.close] !== nowdata[fields.close]) {\n        // 成交量变化才生成tick,或收盘价不一样\n        this.InData['TICK'].value.push([nowdata[fields.time], nowdata[fields.close], nowdata[fields.vol]])\n      }\n    }\n  }\n  /**\n   * flush min data\n   * @param {Array} nowdata\n   * @param {Array} fields\n   * @memberof ClData\n   */\n  flushMin (nowdata, fields) {\n    if (this.InData['MIN'] === undefined) {\n      this.InData['MIN'] = {\n        key: 'MIN',\n        fields: FIELD_MIN,\n        value: [\n          fromTradeTimeToIndex(nowdata[fields.time], this.tradeTime),\n          nowdata[fields.open],\n          nowdata[fields.high],\n          nowdata[fields.low],\n          nowdata[fields.close],\n          nowdata[fields.vol],\n          nowdata[fields.money]\n        ]\n      }\n    } else {\n      const index = fromTradeTimeToIndex(nowdata[fields.time], this.tradeTime)\n      const checked = findIndexInMin(this.InData['MIN'], index)\n      if (checked.status === 'old') {\n        if (this.InData['MIN'].value[checked.index][fields.high] < nowdata[fields.close]) {\n          this.InData['MIN'].value[checked.index][fields.high] = nowdata[fields.close]\n        }\n        if (this.InData['MIN'].value[checked.index][fields.low] > nowdata[fields.close]) {\n          this.InData['MIN'].value[checked.index][fields.low] = nowdata[fields.close]\n        }\n        this.InData['MIN'].value[checked.index][fields.close] = nowdata[fields.close]\n        this.InData['MIN'].value[checked.index][fields.vol] = nowdata[fields.vol]\n        this.InData['MIN'].value[checked.index][fields.money] = nowdata[fields.money]\n      } else if (checked.status === 'new') {\n        this.InData['MIN'].value.push([index, nowdata[fields.close], nowdata[fields.close],\n          nowdata[fields.close], nowdata[fields.close], nowdata[fields.vol], nowdata[fields.money]\n        ])\n      }\n    }\n  }\n  // 当有新的NOW进来时，需要对TICK和当日MIN线进行更新，\n  /**\n   * flush now data\n   * @param {String} key\n   * @param {Array} nowdata\n   * @memberof ClData\n   */\n  flushNowData (key, nowdata) {\n    if (nowdata.length < 1) return\n    let fields = FIELD_NOW\n    if (key === 'ENOW') fields = FIELD_ENOW\n    if (checkZero(nowdata, fields)) return\n\n    // 先处理TICK\n    this.flushTick(nowdata, fields)\n\n    // 再处理Min\n    this.flushMin(nowdata, fields)\n  }\n\n  // //////////////////////\n  // 下面是获取数据的方法,先从OutData获取，没有数据就从InData数据中获取\n  // ////////////////////\n  /**\n   * get data\n   * @param {String} key\n   * @param {String} rightMode\n   * @return {Array}\n   * @memberof ClData\n   */\n  getData (key, rightMode) {\n    switch (key) {\n      case 'DAY':\n        this.OutData['DAY'] = {\n          key,\n          fields: FIELD_DAY\n        }\n        this.OutData['DAY'].value = this.mergeDay(this.InData['DAY'], this.InData['NOW'], rightMode)\n        // 对原始数据不做变更\n        break\n      case 'WEEK':\n        this.OutData['WEEK'] = {\n          key,\n          fields: FIELD_DAY\n        }\n        this.OutData['WEEK'].value = this.mergeWeek(this.InData['DAY'], this.InData['NOW'], rightMode)\n        // 每次都从日线计算生成 -- 避免除权数据无法正确显示的错误\n        break\n      case 'MON':\n        this.OutData['MON'] = {\n          key,\n          fields: FIELD_DAY\n        }\n        this.OutData['MON'].value = this.mergeMon(this.InData['DAY'], this.InData['NOW'], rightMode)\n        // 每次都从日线计算生成 -- 避免除权数据无法正确显示的错误\n        break\n      case 'DAY5':\n        this.OutData['DAY5'] = {\n          key,\n          fields: FIELD_DAY5\n        }\n        this.OutData['DAY5'].value = this.mergeDay5(this.InData['DAY5'], this.InData['MIN'])\n        // 每次都从日线计算生成\n        break\n      case 'M5':\n      case 'M15':\n      case 'M30':\n      case 'M60':\n        this.OutData[key] = {\n          key,\n          fields: FIELD_DAY\n        }\n        this.OutData[key].value = this.makeMinute(key, this.InData[key], this.InData['MIN'], rightMode)\n        break\n      case 'MIN':\n        this.OutData[key] = {\n          key,\n          fields: FIELD_MIN\n        }\n        this.OutData[key].value = this.updateMinute(this.InData[key])\n        break\n    }\n    // 先找Out中的数据，没有就找In的数据\n    return this.OutData[key] ? this.OutData[key] : this.InData[key]\n  }\n  /**\n   * update minute\n   * @param {Object} source\n   * @return {Array}\n   * @memberof ClData\n   */\n  updateMinute (source) {\n    let out = copyArrayOfDeep(source.value)\n\n    let allmoney\n    for (let k = 0; k < out.length; k++) {\n      if (this.static.stktype === 0) {\n        if (k === 0) {\n          allmoney = out[k][FIELD_MIN.vol] * out[k][FIELD_MIN.close]\n        } else {\n          allmoney += (out[k][FIELD_MIN.vol] - out[k - 1][FIELD_MIN.vol]) * out[k][FIELD_MIN.close]\n        }\n        out[k][FIELD_MIN.allmoney] = allmoney\n      } else {\n        // value[k][fields.allmoney] = value[k][fields.money];\n      }\n    }\n    return out\n  }\n  /**\n   * merge day\n   * @param {Object} source\n   * @param {Array} now\n   * @param {String} rightMode\n   * @return {Array}\n   * @memberof ClData\n   */\n  mergeDay (source, now, rightMode) {\n    let out = copyArrayOfDeep(source.value)\n    if (now !== undefined && !checkZero(now.value, now.fields)) {\n      const checked = findDateInDay(source, getDate(now.value[now.fields.time]))\n      if (checked.finded) {\n        out[checked.index] = [\n          getDate(now.value[now.fields.time]),\n          now.value[now.fields.open],\n          now.value[now.fields.high],\n          now.value[now.fields.low],\n          now.value[now.fields.close],\n          now.value[now.fields.vol],\n          now.value[now.fields.money]\n        ]\n      } else {\n        out.push([\n          getDate(now.value[now.fields.time]),\n          now.value[now.fields.open],\n          now.value[now.fields.high],\n          now.value[now.fields.low],\n          now.value[now.fields.close],\n          now.value[now.fields.vol],\n          now.value[now.fields.money]\n        ])\n      }\n    }\n    if (this.InData['RIGHT'] && rightMode !== 'none') {\n      out = transExrightDay(out, this.InData['RIGHT'].value, rightMode,\n        0, out.length - 1)\n    }\n    // this.config.start,this.config.stop);\n\n    return out\n  }\n  /**\n   * merge week data\n   * @param {Object} source\n   * @param {Array} now\n   * @param {String} rightmode\n   * @return {Array}\n   * @memberof ClData\n   */\n  mergeWeek (source, now, rightmode) {\n    const out = this.mergeDay(source, now, rightmode)\n    return matchDayToWeek(out)\n    // 合并周线\n  }\n  /**\n   * merge month data\n   * @param {Object} source\n   * @param {Array} now\n   * @param {String} rightmode\n   * @return {Array}\n   * @memberof ClData\n   */\n  mergeMon (source, now, rightmode) {\n    const out = this.mergeDay(source, now, rightmode)\n    return matchDayToMon(out)\n    // 合并月线\n  }\n  /**\n   * merge 5 day data\n   * @param {Object} source\n   * @param {Array} min\n   * @return {Array}\n   * @memberof ClData\n   */\n  mergeDay5 (source, min) {\n    let out = []\n\n    if (source !== undefined && !isEmptyArray(source.value)) {\n      out = copyArrayOfDeep(source.value)\n      const lastDate = getDate(source.value[source.value.length - 1][source.fields.time])\n      if (lastDate === this.tradeDate) {\n        return out\n      }\n    }\n    if (min === undefined || isEmptyArray(min.value)) {\n      return out\n    }\n    const daymins = getMinuteCount(this.tradeTime) * 4\n    let money\n    for (let k = 0; k < min.value.length; k++) {\n      if (this.static.stktype === 0) {\n        if (k === 0) {\n          money = min.value[k][min.fields.vol] * min.value[k][min.fields.close]\n        } else {\n          money += (min.value[k][min.fields.vol] - min.value[k - 1][min.fields.vol]) * min.value[k][min.fields.close]\n        }\n      } else {\n        money = min.value[k][min.fields.money]\n      }\n      out.push([\n        fromIndexToTradeTime(min.value[k][min.fields.idx], this.tradeTime, this.tradeDate),\n        min.value[k][min.fields.close],\n        k === 0 ? min.value[k][min.fields.vol] : min.value[k][min.fields.vol] - min.value[k - 1][min.fields.vol],\n        daymins + min.value[k][min.fields.idx],\n        min.value[k][min.fields.vol],\n        money\n      ])\n    }\n    return out\n  }\n  // source历史分钟线 nowmin当日分钟线\n  /**\n   * make minute data\n   * @param {String} outkey\n   * @param {Object} source\n   * @param {Array} nowmin\n   * @param {String} rightMode\n   * @return {Array}\n   * @memberof ClData\n   */\n  makeMinute (outkey, source, nowmin, rightMode) {\n    let out = []\n    if (source !== undefined && !isEmptyArray(source.value)) {\n      out = copyArrayOfDeep(source.value)\n      out = transExrightMin(out, this.static.coinzoom, this.InData['RIGHT'].value, rightMode,\n        // this.config.start,this.config.stop);\n        0, out.length - 1)\n\n      const lastDate = getDate(source.value[source.value.length - 1][source.fields.time])\n      if (lastDate === this.tradeDate) {\n        // 已经是最新的数据了\n        return out\n      }\n    }\n    // 没有原始数据或者未收市，需要把当日的nowmin合并\n    if (nowmin !== undefined && !isEmptyArray(nowmin.value)) {\n      let offset = 5\n      if (outkey === 'M15') offset = 15\n      if (outkey === 'M30') offset = 30\n      if (outkey === 'M60') offset = 60\n      out = this.mergeNowMinToMin(out, nowmin, offset) // 当日的分钟线转成分钟线，索引转时间的问题\n    }\n    // out = matchMinToMinute(out, outkey);\n    return out\n  }\n  /**\n   * merge now's min data to min data\n   * @param {Object} source\n   * @param {Array} min\n   * @param {Number} offset\n   * @return {Array}\n   * @memberof ClData\n   */\n  mergeNowMinToMin (source, min, offset) {\n    const curMin = []\n    let sumVol = 0\n    let sumMoney = 0\n\n    let hasData = false\n    let stopIdx = 4\n\n    for (let k = 0; k < min.value.length; k++) {\n      const curIndex = min.value[k][min.fields.idx]\n      if (curIndex < 0) continue\n      if (curIndex > stopIdx) {\n        if (hasData) {\n          curMin[min.fields.vol] = min.value[k][min.fields.vol] - sumVol\n          curMin[min.fields.money] = min.value[k][min.fields.money] - sumMoney\n          sumVol = min.value[k][min.fields.vol]\n          sumMoney = min.value[k][min.fields.money]\n\n          curMin[min.fields.time] = fromIndexToTradeTime(stopIdx, this.tradeTime, this.tradeDate)\n          source.push(copyArrayOfDeep(curMin))\n        }\n        stopIdx = (Math.floor(curIndex / offset) + 1) * offset - 1\n        curMin[min.fields.open] = min.value[k][min.fields.open]\n        curMin[min.fields.high] = min.value[k][min.fields.high]\n        curMin[min.fields.low] = min.value[k][min.fields.low]\n        curMin[min.fields.close] = min.value[k][min.fields.close]\n        hasData = true\n      } else { // curIndex 在0-5之间\n        if (hasData) {\n          curMin[min.fields.high] = curMin[min.fields.high] > min.value[k][min.fields.high]\n            ? curMin[min.fields.high] : min.value[k][min.fields.high]\n          curMin[min.fields.low] = curMin[min.fields.low] < min.value[k][min.fields.low] ||\n            min.value[k][min.fields.low] === 0\n            ? curMin[min.fields.low] : min.value[k][min.fields.low]\n          curMin[min.fields.close] = min.value[k][min.fields.close]\n        } else {\n          curMin[min.fields.open] = min.value[k][min.fields.open]\n          curMin[min.fields.high] = min.value[k][min.fields.high]\n          curMin[min.fields.low] = min.value[k][min.fields.low]\n          curMin[min.fields.close] = min.value[k][min.fields.close]\n          hasData = true\n        }\n      }\n    } // for i\n    if (hasData) {\n      curMin[min.fields.vol] = min.value[min.value.length - 1][min.fields.vol] - sumVol\n      curMin[min.fields.money] = min.value[min.value.length - 1][min.fields.money] - sumMoney\n      curMin[min.fields.time] = fromIndexToTradeTime(stopIdx, this.tradeTime, this.tradeDate)\n      source.push(copyArrayOfDeep(curMin))\n    }\n    return source\n  }\n\n  // /////////////////////////////////////////\n  //  以下为公式系统，自由计算的定义\n  // /////////////////////////////////////////\n  /**\n   * make lien data\n   * @param {Object} source\n   * @param {String} outkey\n   * @param {String} formula\n   * @return {Array}\n   * @memberof ClData\n   */\n  makeLineData (source, outkey, formula) {\n    const value = this.formula.runSingleStock(source, formula)\n    if (this.OutData[outkey] === undefined) {\n      this.OutData[outkey] = {\n        outkey,\n        fields: FIELD_ILINE,\n        value\n      }\n    } else {\n      this.OutData[outkey].value = value\n      // 返回的值都是真实的值，不用再除单位了，具体显示几个小数点，由坐标的类别来定，\n    }\n    return this.OutData[outkey]\n  }\n} // end.\n","/**\n * Copyright (c) 2018-present clchart Contributors.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// //////////////////////////////////////////////////\n// 以下是 ClDrawSeer 的实体定义\n// //////////////////////////////////////////////////\n// case 1: return '未生效';\n// case 2: return '股票停牌';\n// case 20: return '股东增持';\n// case 100: return '已生效(1 -> 100)';\n// case 101: return '已成功(100 -> 101)';\n// case 102: return '已失败(100 -> 102)';\n// case 200: return '未成功已结束(100 -> 200)';\n// case 201: return '成功已结束(101 -> 201)';\n// case 202: return '失败已结束(102 -> 202)';\n// case 300: return '未生效已结束(1/2 -> 300)';\n// case 400: return '错误';\n\nimport {\n  _drawSignCircle,\n  _setTransColor,\n  _fillRect,\n  _drawSignHLine,\n  _drawSignVLine\n} from '../util/cl.draw'\nimport {\n  findNearTimeToIndex\n} from '../chart/cl.chart.tools'\nimport getValue, {\n  // getZipDay,\n  getExrightPriceRange\n} from '../data/cl.data.tools'\nimport {\n  initCommonInfo\n} from '../chart/cl.chart.init'\nimport {\n  inArray,\n  inRangeY,\n  intersectArray,\n  // copyArrayOfDeep,\n  formatPrice,\n  copyArrayOfDeep\n} from '../util/cl.tool'\nimport {\n  FIELD_DAY\n} from '../cl.data.def'\n\n// 预测信息定义\nexport const FIELD_SEER = {\n  // code: 0,\n  start: 1, // 开始日期\n  period: 2, // 预期周期\n  buy: 3, // 买入价\n  target: 4, // 目标价\n  stoploss: 5, // 止损价\n  status: 6, // 当前状态\n  // stopdate: 7, // 停止日期 正在进行的为0\n  // highdate: 8,  // 最高价格日期\n  // lowdate: 9,    // 最低价格日期\n  // surplus: 10, // 剩余天数\n  uid: 11, // 预测的id\n  focused: 12 // 是否热点\n}\n\nexport const FIELD_SEER_HOT = {\n  uid: 0\n}\n\n// 创建时必须带入父类，后面的运算定位都会基于父节点进行；\n// 这个类仅仅是画图, 因此需要把可以控制的rect传入进来\n/**\n * Class representing ClDrawSeer\n * @export\n * @class ClDrawSeer\n */\nexport default class ClDrawSeer {\n  /**\n   * Creates an instance of ClDrawSeer.\n   * @param {Object} father\n   * @param {Object} rectMain\n   * @constructor\n   */\n  constructor (father, rectMain) {\n    initCommonInfo(this, father)\n    this.rectMain = rectMain\n\n    this.linkInfo = father.father.linkInfo\n\n    this.source = father.father\n\n    this.static = father.father.static\n\n    this.maxmin = father.maxmin\n    this.layout = father.layout\n  }\n\n  /**\n   * get seer position\n   * @param {Number} index\n   * @param {Number} nowprice\n   * @return {Object}\n   * @memberof ClDrawSeer\n   */\n  getSeerPos (index, nowprice) {\n    const offset = index - this.linkInfo.minIndex\n    if (offset < 0 || index > this.linkInfo.maxIndex) {\n      return {\n        visible: false\n      }\n    }\n    // 不在视线内就不画\n    const xx = this.rectMain.left + offset * (this.linkInfo.unitX + this.linkInfo.spaceX) + Math.floor(this.linkInfo.unitX / 2)\n    let price = nowprice\n    if (nowprice === undefined) {\n      price = getValue(this.data, 'close', index)\n    }\n    const yy = this.rectMain.top + Math.round((this.maxmin.max - price) * this.maxmin.unitY)\n    return {\n      visible: true,\n      xx,\n      yy\n    }\n  }\n  /**\n   * draw hot seer\n   * @param {Number} no\n   * @memberof ClDrawSeer\n   */\n  drawHotSeer (no) {\n    let idx = findNearTimeToIndex(this.data, getValue(this.sourceSeer, 'start', no), 'time', 'forword')\n    if (idx === -1) idx = this.linkInfo.maxIndex\n    const offset = idx - this.linkInfo.minIndex\n    if (offset < 0) return // 不在视线内就不画\n\n    const xx = this.rectMain.left + offset * (this.linkInfo.unitX + this.linkInfo.spaceX) + Math.floor(this.linkInfo.unitX / 2)\n\n    const status = getValue(this.sourceSeer, 'status', no)\n    const startPrice = getValue(this.sourceSeer, 'buy', no)\n    let price = startPrice\n\n    let yy = this.rectMain.top + Math.round((this.maxmin.max - price) * this.maxmin.unitY)\n\n    let startTxt = this.linkInfo.hideInfo ? '买点' : '买点:' + formatPrice(price, this.static.coinunit)\n    if (startPrice === 0) {\n      startTxt = '停牌中' // 停牌期间预测的股票\n      price = getValue(this.data, 'close', idx)\n      yy = this.rectMain.top + Math.round((this.maxmin.max - price) * this.maxmin.unitY)\n    }\n    let color = this.color.vol\n    if (inArray(status, [1, 20, 300])) {\n      color = this.color.txt\n    } else if (inArray(status, [2])) {\n      startTxt = '停牌中'\n    }\n    _drawSignHLine(this.context, {\n      linew: this.scale,\n      xx,\n      yy,\n      right: this.rectMain.left + this.rectMain.width + this.layout.offset.right - 2 * this.scale,\n      clr: color,\n      bakclr: this.color.back,\n      font: this.layout.title.font,\n      pixel: this.layout.title.pixel,\n      spaceX: 4 * this.scale,\n      spaceY: 3 * this.scale,\n      x: 'start',\n      y: 'middle'\n    }, [{\n      txt: startTxt,\n      set: 100,\n      display: !this.linkInfo.hideInfo\n    }])\n\n    const period = getValue(this.sourceSeer, 'period', no)\n    const surplus = period - (this.linkInfo.maxIndex - idx)\n\n    let txt = ' 周期:[' + period + '天]'\n    if (surplus > 0) txt += ' 剩余:[' + surplus + '天]'\n\n    _drawSignVLine(this.context, {\n      linew: this.scale,\n      xx,\n      yy,\n      left: this.rectMain.left,\n      bottom: this.rectMain.top + this.rectMain.height + this.layout.offset.bottom + 2 * this.scale,\n      clr: color,\n      bakclr: this.color.back,\n      font: this.layout.title.font,\n      pixel: this.layout.title.pixel,\n      spaceX: 2 * this.scale,\n      paceY: 2 * this.scale\n    }, [{\n      txt: 'arc',\n      set: 0,\n      minR: 0,\n      maxR: 3 * this.scale,\n      display: true\n    },\n    {\n      txt: getValue(this.sourceSeer, 'start', no) + txt,\n      set: 100,\n      display: true\n    }\n    ])\n    this.drawTransRect(this.rectMain.left, xx)\n    const xxRight = xx + period * (this.linkInfo.spaceX + this.linkInfo.unitX)\n    this.drawTransRect(xxRight, this.rectMain.left + this.rectMain.width)\n    if (startPrice === 0) return\n    // ///////////////////////////////\n    let infos\n    price = getValue(this.sourceSeer, 'stoploss', no)\n    let yl = this.rectMain.top + Math.round((this.maxmin.max - price) * this.maxmin.unitY)\n    if (yl - yy > 1.5 * this.layout.title.pixel) {\n      infos = [{\n        txt: 'arc',\n        set: 0,\n        minR: 0,\n        maxR: 2 * this.scale,\n        display: true\n      },\n      {\n        txt: this.linkInfo.hideInfo ? '止损' : '止损:' + formatPrice(price, this.static.coinunit),\n        set: 100,\n        display: !this.linkInfo.hideInfo\n      }\n      ]\n    } else {\n      infos = [{\n        txt: 'arc',\n        set: 0,\n        minR: 0,\n        maxR: 2 * this.scale,\n        display: true\n      },\n      {\n        txt: 'arc',\n        set: 100,\n        minR: 0,\n        maxR: 1 * this.scale,\n        display: true\n      }\n      ]\n    }\n    if (inRangeY(this.rectMain, yy)) {\n      _drawSignHLine(this.context, {\n        linew: this.scale,\n        xx,\n        yy: yl,\n        right: this.rectMain.left + this.rectMain.width + this.layout.offset.right - 2 * this.scale,\n        clr: this.color.green,\n        bakclr: this.color.back,\n        font: this.layout.title.font,\n        pixel: this.layout.title.pixel,\n        spaceX: 4 * this.scale,\n        spaceY: 3 * this.scale,\n        x: 'start',\n        y: 'middle'\n      }, infos)\n    }\n\n    price = getValue(this.sourceSeer, 'target', no)\n    yl = this.rectMain.top + Math.round((this.maxmin.max - price) * this.maxmin.unitY)\n    if (yy - yl > 1.5 * this.layout.title.pixel) {\n      infos = [{\n        txt: 'arc',\n        set: 0,\n        minR: 0,\n        maxR: 2 * this.scale,\n        display: true\n      },\n      {\n        txt: this.linkInfo.hideInfo ? '目标' : '目标:' + formatPrice(price, this.static.coinunit),\n        set: 100,\n        display: !this.linkInfo.hideInfo\n      }\n      ]\n    } else {\n      infos = [{\n        txt: 'arc',\n        set: 0,\n        minR: 0,\n        maxR: 2 * this.scale,\n        display: true\n      },\n      {\n        txt: 'arc',\n        set: 100,\n        minR: 0,\n        maxR: 2 * this.scale,\n        display: true\n      }\n      ]\n    }\n    if (inRangeY(this.rectMain, yy)) {\n      _drawSignHLine(this.context, {\n        linew: this.scale,\n        xx,\n        yy: yl,\n        right: this.rectMain.left + this.rectMain.width + this.layout.offset.right - 2 * this.scale,\n        clr: this.color.red,\n        bakclr: this.color.back,\n        font: this.layout.title.font,\n        pixel: this.layout.title.pixel,\n        spaceX: 4 * this.scale,\n        spaceY: 3 * this.scale,\n        x: 'start',\n        y: 'middle'\n      }, infos)\n    }\n    // ///////////显示预测结束的信息///////////////////\n    const stop = getValue(this.sourceSeer, 'stop', no)\n    // 100 进行中\n    if (inArray(status, [101, 102, 200, 201, 202, 300])) {\n      const stopIdx = findNearTimeToIndex(this.data, stop, 'time', 'forword')\n      const stopOffset = stopIdx - this.linkInfo.minIndex\n      const stopX = this.rectMain.left + stopOffset * (this.linkInfo.unitX + this.linkInfo.spaceX) + Math.floor(this.linkInfo.unitX / 2)\n      if (stopX > this.rectMain.left && stopX < this.rectMain.left + this.rectMain.width - 4 * this.scale) {\n        color = this.color.vol\n        price = getValue(this.sourceSeer, 'buy', no)\n        yl = this.rectMain.top + Math.round((this.maxmin.max - price) * this.maxmin.unitY)\n        if (inArray(status, [102, 202])) {\n          color = this.color.green\n          price = getValue(this.sourceSeer, 'stoploss', no)\n          yl = this.rectMain.top + Math.round((this.maxmin.max - price) * this.maxmin.unitY)\n        } else if (inArray(status, [101, 201])) {\n          color = this.color.red\n          price = getValue(this.sourceSeer, 'target', no)\n          yl = this.rectMain.top + Math.round((this.maxmin.max - price) * this.maxmin.unitY)\n        } else if (inArray(status, [300])) {\n          color = this.color.txt\n        }\n        _drawSignCircle(this.context, stopX, yl, {\n          r: 3 * this.scale,\n          clr: color\n        }\n          // { r: 2 * this.scale, clr: this.color.back },\n        )\n      }\n    }\n  }\n  /**\n   * filter seer\n   * @return {Array}\n   * @memberof ClDrawSeer\n   */\n  filterSeer () {\n    const out = {}\n    for (let i = 0; i < this.sourceSeer.value.length; i++) {\n      const curDate = getValue(this.sourceSeer, 'start', i)\n      let index = findNearTimeToIndex(this.data, curDate, 'time', 'forword')\n      if (index === -1) index = this.linkInfo.maxIndex\n      if (out[index] === undefined) {\n        out[index] = {\n          nos: [],\n          uids: []\n        }\n      }\n      out[index].name = 'SEER' + index\n      out[index].date = getValue(this.data, 'time', index)\n      out[index].nos.push(i)\n      out[index].uids.push(getValue(this.sourceSeer, 'uid', i))\n      // 这里判断当前节点是否存在热点\n      if (inArray(getValue(this.sourceSeer, 'uid', i), this.hotSeer.value)) {\n        out[index].focused = true\n        out[index].hotIdx = i\n      }\n    }\n    return out\n  }\n  /**\n   * before location\n   * @return {Number}\n   * @memberof ClDrawSeer\n   */\n  beforeLocation () {\n    this.linkInfo.rightMode = 'forword'\n    this.data = this.source.getData(this.father.hotKey)\n    const lastDate = this.data.value[this.data.value.length - 1][this.data.fields.time]\n\n    this.sourceSeer = this.source.getData('SEER')\n    this.hotSeer = this.source.getData('SEERHOT')\n\n    if (this.sourceSeer.value.length < 1) return 0\n    if (this.hotSeer === undefined) {\n      this.hotSeer = {\n        value: [getValue(this.sourceSeer, 'uid', 0)]\n      }\n    }\n    if (this.sourceSeer.value.length < 1) return 0\n    // 求最大最小日期\n    const maxmin = {\n      max: getValue(this.sourceSeer, 'start', 0),\n      min: getValue(this.sourceSeer, 'start', this.sourceSeer.value.length - 1)\n    }\n    // 除权处理\n    const rights = this.source.getData('RIGHT')\n    if (rights !== undefined) {\n      const lastval = copyArrayOfDeep(this.sourceSeer.value)\n      for (let i = 0; i < lastval.length; i++) {\n        lastval[i][FIELD_SEER.buy] =\n          getExrightPriceRange(maxmin.min, lastDate, lastval[i][FIELD_SEER.buy], rights.value)\n        lastval[i][FIELD_SEER.target] =\n          getExrightPriceRange(maxmin.min, lastDate, lastval[i][FIELD_SEER.target], rights.value)\n        lastval[i][FIELD_SEER.stoploss] =\n          getExrightPriceRange(maxmin.min, lastDate, lastval[i][FIELD_SEER.stoploss], rights.value)\n      }\n      // 这里必须重新指向，否则会重复除权\n      this.sourceSeer = {\n        key: 'SEER',\n        fields: FIELD_SEER,\n        value: lastval\n      }\n    }\n    // 整理标记点\n    this.showSeer = this.filterSeer() // name,date,[该按钮对应的id列表],chart按钮\n    // 创建标记点\n    for (const k in this.showSeer) {\n      this.showSeer[k].chart = this.father.createButton(this.showSeer[k].name)\n      maxmin.max = maxmin.max < this.showSeer[k].date ? this.showSeer[k].date : maxmin.max\n      maxmin.min = maxmin.min > this.showSeer[k].date ? this.showSeer[k].date : maxmin.min\n    }\n    // ???\n    // 下面开始压缩数据\n    // let out = copyArrayOfDeep(this.data.value)\n\n    this.hotKey = 'SEERDAY'\n    this.data = {key: 'SEERDAY', fields: FIELD_DAY, value: this.data.value}\n\n    this.linkInfo.showMode = 'fixed'\n    // this.linkInfo.fixed.left = 20\n    // this.linkInfo.fixed.right = 20\n    this.linkInfo.fixed.min = maxmin.min\n    this.linkInfo.fixed.max = maxmin.max\n  }\n  /**\n   * draw transfer react\n   * @param {Number} left\n   * @param {Number} right\n   * @memberof ClDrawSeer\n   */\n  drawTransRect (left, right) {\n    if (right < left) return\n    const clr = _setTransColor(this.color.grid, 0.5)\n    _fillRect(this.context, left, this.rectMain.top, right - left, this.rectMain.height, clr)\n  }\n  /**\n   * paint seer chart\n   * @param {Number} key\n   * @memberof ClDrawSeer\n   */\n  onPaint (key) {\n    // if (key !== undefined) this.hotKey = key\n    // this.data = this.source.getData(this.hotKey)\n    // 设置可见\n    for (const k in this.showSeer) {\n      let showPrice\n      if (this.showSeer[k].uids.length < 1) continue\n      // 如果只有一条记录就以买入价为定位，否则以收盘价为定位\n      if (this.showSeer[k].uids.length === 1) {\n        showPrice = getValue(this.sourceSeer, 'buy', this.showSeer[k].nos[0])\n      }\n      if (this.showSeer[k].focused === true) {\n        this.father.setHotButton(this.showSeer[k].chart)\n        if (this.hotSeer.value.length === 1) {\n          showPrice = getValue(this.sourceSeer, 'buy', this.showSeer[k].hotIdx)\n        }\n      }\n      const seerPos = this.getSeerPos(k, showPrice)\n\n      let num = '*'\n      if (this.showSeer[k].uids.length < 10) {\n        num = this.showSeer[k].uids.length.toString()\n      }\n      const acrR = this.layout.symbol.size / 2\n\n      this.showSeer[k].chart.init({\n        rectMain: {\n          left: seerPos.xx - acrR,\n          top: this.showSeer[k].focused ? seerPos.yy - acrR - 2 * acrR : seerPos.yy - acrR,\n          width: 2 * acrR,\n          height: this.showSeer[k].focused ? 2 * acrR + 2 * acrR : 2 * acrR\n        },\n        config: {\n          translucent: true,\n          visible: seerPos.visible,\n          status: this.showSeer[k].focused ? 'focused' : 'enabled',\n          shape: 'set'\n        },\n        info: [{\n          map: num\n        }]\n      },\n      result => {\n        // const self = result.self.father\n        const hotInfo = intersectArray(this.showSeer[k].uids, this.hotSeer.value)\n        if (hotInfo.length > 0) {\n          this.hotSeer.value = []\n          this.father.callback({\n            event: 'seerclick',\n            data: []\n          })\n          this.source.onPaint()\n        } else {\n          this.hotSeer.value = this.showSeer[k].uids\n          this.father.callback({\n            event: 'seerclick',\n            data: this.showSeer[k].uids\n          })\n          this.source.onPaint()\n        }\n      })\n    }\n    if (this.hotSeer.value.length === 1) {\n      for (let k = 0; k < this.sourceSeer.value.length; k++) {\n        if (getValue(this.sourceSeer, 'uid', k) === this.hotSeer.value[0]) {\n          this.drawHotSeer(k)\n        }\n      }\n    }\n  }\n}\n","/**\n * Copyright (c) 2018-present clchart Contributors.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { CHART_SEER } from './cl.seer.def'\nimport { FIELD_SEER } from './cl.seer'\nexport default {\n  CHART_SEER,\n  FIELD_SEER\n}\n","/**\n * Copyright (c) 2018-present clchart Contributors.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// //////////////////////////////////////////////////\n// 以下是 ClDrawSeer 的实体定义\n// //////////////////////////////////////////////////\n// case 1: return '未生效';\n// case 2: return '股票停牌';\n// case 20: return '股东增持';\n// case 100: return '已生效(1 -> 100)';\n// case 101: return '已成功(100 -> 101)';\n// case 102: return '已失败(100 -> 102)';\n// case 200: return '未成功已结束(100 -> 200)';\n// case 201: return '成功已结束(101 -> 201)';\n// case 202: return '失败已结束(102 -> 202)';\n// case 300: return '未生效已结束(1/2 -> 300)';\n// case 400: return '错误';\n// 预定义参数\n\nimport ClDrawKBar from '../chart/cl.draw.kbar'\nimport ClDrawRight from '../chart/cl.draw.right'\nimport ClDrawSeer from './cl.seer'\n\n/** @module SeerConfig */\n\nexport const CHART_SEER = {\n  zoomInfo: {\n    index: 3,\n    list: [1, 2, 4, 5, 7, 9, 12, 15, 19]\n  },\n  // zoomInfo: {\n  //   min: 1,\n  //   max: 26,\n  //   index: 2, // value = index*index + 1 [1,2,5,10,17,26]\n  //   value: 7 // 实际的值，如果超过10，就会index=3，如果为4，index=1 index = sqrt（value - 1）\n  // },\n  scroll: {\n    display: 'none' // none不显示\n  },\n  title: {\n    display: 'none' // none 不显示 btn 按钮 text 文字\n  },\n  axisX: {\n    lines: 0,\n    display: 'both', // none不显示， both 两边各一个值, block ：根据lines每个块显示一个值 = 显示坐标\n    type: 'normal', // 有 day1 当日 day5 5日线 和 normal:日线 三种模式\n    format: 'date' // date time datetime normal tradetime(9:30) 根据交易时间此时 = 输出的信息格式    width: 50       // 显示宽度，web下\n  },\n  axisY: {\n    lines: 3,\n    left: {\n      display: 'both', // none不显示, both, noupper 不显示最上面, nofoot不显示最下面 = 显示坐标\n      middle: 'none', // 是否有中间值 'before'=前收盘 ‘zero’ 0为中间值\n      format: 'price' // 输出数据的格式 rate, price 保留一定小数位 vol 没有小数\n    },\n    right: {\n      display: 'both', // none不显示，noupper 不显示最上面, nofoot不显示最下面 = 显示坐标\n      middle: 'none', // 是否有中间值 'before'=前收盘 ‘zero’ 0为中间值\n      format: 'price' // rate, price vol\n    }\n  },\n  lines: [{\n    // type: 'l_kbar',\n    className: ClDrawKBar,\n    extremum: { // 如何取极值\n      method: 'normal', // fixedLeft fixedRight 上下固定,此时需要取axisY.middle的定义\n      maxvalue: ['high'], // 参与计算最大值的标签\n      minvalue: ['low'] // 参与计算最小值的标签\n    }\n    // 第一根线默认的key是跟随chart的hotKey变化而变化的，其他线要么自己有数据，要么根据hotKey加上公式计算出自己的key\n  },\n  {\n    className: ClDrawRight\n  },\n  {\n    className: ClDrawSeer\n  }]\n}\n","/**\n * Copyright (c) 2018-present clchart Contributors.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport ClChart from './chart/cl.chart'\nimport ClEvent from './event/cl.event'\nimport ClData from './data/cl.data'\n\nimport * as ClChartDef from './cl.chart.def'\nimport * as ClDataDef from './cl.data.def'\nimport ClPlugins from './plugins/cl.register'\n\nimport {\n  initSystem\n} from './chart/cl.chart.init'\n\nimport EV from './util/cl.ev'\n\n/** @module ClChart */\n\n/**\n * chart default defined\n * @export\n */\nexport const DEF_CHART = ClChartDef\n/**\n * data default defined\n * @export\n */\nexport const DEF_DATA = ClDataDef\n/**\n * plugins\n * @export\n */\nexport const PLUGINS = ClPlugins\n\n/**\n * utils\n * @export\n */\nexport const util = {\n  EV\n}\n\n/**\n * create single stock chart\n * @export\n * @param {Object} cfg SystemConfig\n * @returns chart instance\n */\nexport function createSingleChart (cfg) {\n  const sysInfo = initSystem(cfg)\n  const chart = new ClChart(sysInfo)\n  const event = new ClEvent(sysInfo)\n  const data = new ClData()\n\n  chart.initChart(data, event)\n  return chart\n}\n/**\n * create mulit stocks chart\n * processing\n * @export\n * @param {any} cfg SystemConfig\n * @returns charts instance\n */\nexport function createMulChart (cfg) {\n  const sysInfo = initSystem(cfg)\n  const event = new ClEvent(sysInfo)\n  const chartList = {}\n  for (const key in cfg.charts) {\n    const chart = new ClChart(sysInfo)\n    const data = new ClData()\n    chart.initChart(data, event)\n    chartList[key] = chart\n  }\n  return chartList\n}\n","/**\n * Copyright (c) 2018-present clchart Contributors.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * Class representing a event\n * @export\n * @class EV\n */\nexport default class EV {\n  constructor () {\n    this.handlers = {}\n  }\n\n  /**\n   * emit an event\n   * @param {String} event event name\n   * @param {any} args event params\n   * @memberof EV\n   */\n  emit (event, ...args) {\n    if (this.handlers[event]) {\n      this\n        .handlers[event]\n        .forEach((handler) => handler.apply(this, args))\n    }\n  }\n  /**\n   * emit with special scope\n   * @param {any} event event name\n   * @param {any} scope scope\n   * @param {any} args event params\n   * @memberof EV\n   */\n  emitWithScope (event, scope, ...args) {\n    if (this.handlers[event]) {\n      this\n        .handlers[event]\n        .forEach((handler) => handler.apply(scope, args))\n    }\n  }\n\n  /**\n   * listen event\n   * @param {any} event event name\n   * @param {any} callback listen callback\n   * @memberof EV\n   */\n  addEventListener (event, callback) {\n    if (!this.handlers[event]) {\n      this.handlers[event] = []\n    }\n    this\n      .handlers[event]\n      .push(callback)\n  }\n  /**\n   * listen only once\n   * @param {any} event event name\n   * @param {any} callback event listener callback function\n   * @memberof EV\n   */\n  once (event, callback) {\n    const self = this\n    self.on(event, function onetimeCallback () {\n      callback.apply(this, arguments)\n      self.removeListener(event, onetimeCallback)\n    })\n  }\n  /**\n   * remove special event listener by callback function\n   * @param {any} event event name\n   * @param {any} callback event listener callback function\n   * @memberof EV\n   */\n  removeEventListener (event, callback) {\n    if (this.handlers[event]) {\n      const index = this\n        .handlers[event]\n        .indexOf(callback)\n      if (index > -1) {\n        this\n          .handlers[event]\n          .splice(index, 1)\n      }\n    }\n  }\n  /**\n   * remove all listeners for events\n   * @param {any} event event name\n   * @memberof EV\n   */\n  removeAllListeners (event) {\n    this.handlers[event] = undefined\n  }\n};\n"],"sourceRoot":""}